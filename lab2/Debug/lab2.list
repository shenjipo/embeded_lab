
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b4c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004cfc  08004cfc  00014cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d64  08004d64  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004d64  08004d64  00014d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d6c  08004d6c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d6c  08004d6c  00014d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d70  08004d70  00014d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044ac  20000010  08004d84  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044bc  08004d84  000244bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c07  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003262  00000000  00000000  00039c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  0003ceb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  0003e328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c91  00000000  00000000  0003f678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169f9  00000000  00000000  00065309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec4f6  00000000  00000000  0007bd02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001681f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056e4  00000000  00000000  0016824c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004ce4 	.word	0x08004ce4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08004ce4 	.word	0x08004ce4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96e 	b.w	80004e4 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468c      	mov	ip, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	f040 8083 	bne.w	8000336 <__udivmoddi4+0x116>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d947      	bls.n	80002c6 <__udivmoddi4+0xa6>
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	b142      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023c:	f1c2 0020 	rsb	r0, r2, #32
 8000240:	fa24 f000 	lsr.w	r0, r4, r0
 8000244:	4091      	lsls	r1, r2
 8000246:	4097      	lsls	r7, r2
 8000248:	ea40 0c01 	orr.w	ip, r0, r1
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbbc f6f8 	udiv	r6, ip, r8
 8000258:	fa1f fe87 	uxth.w	lr, r7
 800025c:	fb08 c116 	mls	r1, r8, r6, ip
 8000260:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000264:	fb06 f10e 	mul.w	r1, r6, lr
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 8119 	bcs.w	80004a8 <__udivmoddi4+0x288>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8116 	bls.w	80004a8 <__udivmoddi4+0x288>
 800027c:	3e02      	subs	r6, #2
 800027e:	443b      	add	r3, r7
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fe0e 	mul.w	lr, r0, lr
 8000294:	45a6      	cmp	lr, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	193c      	adds	r4, r7, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8105 	bcs.w	80004ac <__udivmoddi4+0x28c>
 80002a2:	45a6      	cmp	lr, r4
 80002a4:	f240 8102 	bls.w	80004ac <__udivmoddi4+0x28c>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b0:	eba4 040e 	sub.w	r4, r4, lr
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	b902      	cbnz	r2, 80002ca <__udivmoddi4+0xaa>
 80002c8:	deff      	udf	#255	; 0xff
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	2a00      	cmp	r2, #0
 80002d0:	d150      	bne.n	8000374 <__udivmoddi4+0x154>
 80002d2:	1bcb      	subs	r3, r1, r7
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f f887 	uxth.w	r8, r7
 80002dc:	2601      	movs	r6, #1
 80002de:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e2:	0c21      	lsrs	r1, r4, #16
 80002e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002ec:	fb08 f30c 	mul.w	r3, r8, ip
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0xe4>
 80002f4:	1879      	adds	r1, r7, r1
 80002f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0xe2>
 80002fc:	428b      	cmp	r3, r1
 80002fe:	f200 80e9 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 8000302:	4684      	mov	ip, r0
 8000304:	1ac9      	subs	r1, r1, r3
 8000306:	b2a3      	uxth	r3, r4
 8000308:	fbb1 f0fe 	udiv	r0, r1, lr
 800030c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000310:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000314:	fb08 f800 	mul.w	r8, r8, r0
 8000318:	45a0      	cmp	r8, r4
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x10c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x10a>
 8000324:	45a0      	cmp	r8, r4
 8000326:	f200 80d9 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 800032a:	4618      	mov	r0, r3
 800032c:	eba4 0408 	sub.w	r4, r4, r8
 8000330:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000334:	e7bf      	b.n	80002b6 <__udivmoddi4+0x96>
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x12e>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80b1 	beq.w	80004a2 <__udivmoddi4+0x282>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x1cc>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0x140>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80b8 	bhi.w	80004d0 <__udivmoddi4+0x2b0>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0103 	sbc.w	r1, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	468c      	mov	ip, r1
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0a8      	beq.n	80002c0 <__udivmoddi4+0xa0>
 800036e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000374:	f1c2 0320 	rsb	r3, r2, #32
 8000378:	fa20 f603 	lsr.w	r6, r0, r3
 800037c:	4097      	lsls	r7, r2
 800037e:	fa01 f002 	lsl.w	r0, r1, r2
 8000382:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000386:	40d9      	lsrs	r1, r3
 8000388:	4330      	orrs	r0, r6
 800038a:	0c03      	lsrs	r3, r0, #16
 800038c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000390:	fa1f f887 	uxth.w	r8, r7
 8000394:	fb0e 1116 	mls	r1, lr, r6, r1
 8000398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039c:	fb06 f108 	mul.w	r1, r6, r8
 80003a0:	4299      	cmp	r1, r3
 80003a2:	fa04 f402 	lsl.w	r4, r4, r2
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x19c>
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ae:	f080 808d 	bcs.w	80004cc <__udivmoddi4+0x2ac>
 80003b2:	4299      	cmp	r1, r3
 80003b4:	f240 808a 	bls.w	80004cc <__udivmoddi4+0x2ac>
 80003b8:	3e02      	subs	r6, #2
 80003ba:	443b      	add	r3, r7
 80003bc:	1a5b      	subs	r3, r3, r1
 80003be:	b281      	uxth	r1, r0
 80003c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb00 f308 	mul.w	r3, r0, r8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1c4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003da:	d273      	bcs.n	80004c4 <__udivmoddi4+0x2a4>
 80003dc:	428b      	cmp	r3, r1
 80003de:	d971      	bls.n	80004c4 <__udivmoddi4+0x2a4>
 80003e0:	3802      	subs	r0, #2
 80003e2:	4439      	add	r1, r7
 80003e4:	1acb      	subs	r3, r1, r3
 80003e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ea:	e778      	b.n	80002de <__udivmoddi4+0xbe>
 80003ec:	f1c6 0c20 	rsb	ip, r6, #32
 80003f0:	fa03 f406 	lsl.w	r4, r3, r6
 80003f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f8:	431c      	orrs	r4, r3
 80003fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000406:	fa21 f10c 	lsr.w	r1, r1, ip
 800040a:	431f      	orrs	r7, r3
 800040c:	0c3b      	lsrs	r3, r7, #16
 800040e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000412:	fa1f f884 	uxth.w	r8, r4
 8000416:	fb0e 1119 	mls	r1, lr, r9, r1
 800041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041e:	fb09 fa08 	mul.w	sl, r9, r8
 8000422:	458a      	cmp	sl, r1
 8000424:	fa02 f206 	lsl.w	r2, r2, r6
 8000428:	fa00 f306 	lsl.w	r3, r0, r6
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x220>
 800042e:	1861      	adds	r1, r4, r1
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	d248      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 8000436:	458a      	cmp	sl, r1
 8000438:	d946      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	4421      	add	r1, r4
 8000440:	eba1 010a 	sub.w	r1, r1, sl
 8000444:	b2bf      	uxth	r7, r7
 8000446:	fbb1 f0fe 	udiv	r0, r1, lr
 800044a:	fb0e 1110 	mls	r1, lr, r0, r1
 800044e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45b8      	cmp	r8, r7
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x24a>
 800045a:	19e7      	adds	r7, r4, r7
 800045c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000460:	d22e      	bcs.n	80004c0 <__udivmoddi4+0x2a0>
 8000462:	45b8      	cmp	r8, r7
 8000464:	d92c      	bls.n	80004c0 <__udivmoddi4+0x2a0>
 8000466:	3802      	subs	r0, #2
 8000468:	4427      	add	r7, r4
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba7 0708 	sub.w	r7, r7, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454f      	cmp	r7, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	4649      	mov	r1, r9
 800047c:	d31a      	bcc.n	80004b4 <__udivmoddi4+0x294>
 800047e:	d017      	beq.n	80004b0 <__udivmoddi4+0x290>
 8000480:	b15d      	cbz	r5, 800049a <__udivmoddi4+0x27a>
 8000482:	ebb3 020e 	subs.w	r2, r3, lr
 8000486:	eb67 0701 	sbc.w	r7, r7, r1
 800048a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048e:	40f2      	lsrs	r2, r6
 8000490:	ea4c 0202 	orr.w	r2, ip, r2
 8000494:	40f7      	lsrs	r7, r6
 8000496:	e9c5 2700 	strd	r2, r7, [r5]
 800049a:	2600      	movs	r6, #0
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e70b      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e9      	b.n	8000280 <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fd      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b0:	4543      	cmp	r3, r8
 80004b2:	d2e5      	bcs.n	8000480 <__udivmoddi4+0x260>
 80004b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b8:	eb69 0104 	sbc.w	r1, r9, r4
 80004bc:	3801      	subs	r0, #1
 80004be:	e7df      	b.n	8000480 <__udivmoddi4+0x260>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e7d2      	b.n	800046a <__udivmoddi4+0x24a>
 80004c4:	4660      	mov	r0, ip
 80004c6:	e78d      	b.n	80003e4 <__udivmoddi4+0x1c4>
 80004c8:	4681      	mov	r9, r0
 80004ca:	e7b9      	b.n	8000440 <__udivmoddi4+0x220>
 80004cc:	4666      	mov	r6, ip
 80004ce:	e775      	b.n	80003bc <__udivmoddi4+0x19c>
 80004d0:	4630      	mov	r0, r6
 80004d2:	e74a      	b.n	800036a <__udivmoddi4+0x14a>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	4439      	add	r1, r7
 80004da:	e713      	b.n	8000304 <__udivmoddi4+0xe4>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	e724      	b.n	800032c <__udivmoddi4+0x10c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	4a07      	ldr	r2, [pc, #28]	; (8000514 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	4a06      	ldr	r2, [pc, #24]	; (8000518 <vApplicationGetIdleTaskMemory+0x30>)
 80004fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2280      	movs	r2, #128	; 0x80
 8000504:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	2000002c 	.word	0x2000002c
 8000518:	20000080 	.word	0x20000080

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fcb6 	bl	8000e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f80c 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f914 	bl	8000754 <MX_GPIO_Init>
  MX_ETH_Init();
 800052c:	f000 f872 	bl	8000614 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000530:	f000 f8b8 	bl	80006a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000534:	f000 f8e0 	bl	80006f8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000538:	f003 f9bc 	bl	80038b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053c:	e7fe      	b.n	800053c <main+0x20>
	...

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f004 fbc0 	bl	8004cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b28      	ldr	r3, [pc, #160]	; (800060c <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a27      	ldr	r2, [pc, #156]	; (800060c <SystemClock_Config+0xcc>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b25      	ldr	r3, [pc, #148]	; (800060c <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b22      	ldr	r3, [pc, #136]	; (8000610 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a21      	ldr	r2, [pc, #132]	; (8000610 <SystemClock_Config+0xd0>)
 800058a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b0:	2304      	movs	r3, #4
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005b4:	23a8      	movs	r3, #168	; 0xa8
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005bc:	2307      	movs	r3, #7
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0320 	add.w	r3, r7, #32
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 fd13 	bl	8001ff0 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d0:	f000 fa0e 	bl	80009f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2105      	movs	r1, #5
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 ff74 	bl	80024e0 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005fe:	f000 f9f7 	bl	80009f0 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	; 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000618:	4b20      	ldr	r3, [pc, #128]	; (800069c <MX_ETH_Init+0x88>)
 800061a:	4a21      	ldr	r2, [pc, #132]	; (80006a0 <MX_ETH_Init+0x8c>)
 800061c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 800061e:	4b1f      	ldr	r3, [pc, #124]	; (800069c <MX_ETH_Init+0x88>)
 8000620:	2200      	movs	r2, #0
 8000622:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8000624:	4b1d      	ldr	r3, [pc, #116]	; (800069c <MX_ETH_Init+0x88>)
 8000626:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800062a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_ETH_Init+0x88>)
 800062e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000632:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000634:	4b19      	ldr	r3, [pc, #100]	; (800069c <MX_ETH_Init+0x88>)
 8000636:	2200      	movs	r2, #0
 8000638:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800063a:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_ETH_Init+0x88>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_ETH_Init+0x88>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	3301      	adds	r3, #1
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_ETH_Init+0x88>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	3302      	adds	r3, #2
 8000652:	22e1      	movs	r2, #225	; 0xe1
 8000654:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_ETH_Init+0x88>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	3303      	adds	r3, #3
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_ETH_Init+0x88>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	3304      	adds	r3, #4
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_ETH_Init+0x88>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	3305      	adds	r3, #5
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_ETH_Init+0x88>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_ETH_Init+0x88>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_ETH_Init+0x88>)
 8000682:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000686:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_ETH_Init+0x88>)
 800068a:	f000 fd49 	bl	8001120 <HAL_ETH_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ETH_Init+0x84>
  {
    Error_Handler();
 8000694:	f000 f9ac 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20004428 	.word	0x20004428
 80006a0:	40028000 	.word	0x40028000

080006a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <MX_USART3_UART_Init+0x50>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006dc:	f002 fbdc 	bl	8002e98 <HAL_UART_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006e6:	f000 f983 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20003fd4 	.word	0x20003fd4
 80006f4:	40004800 	.word	0x40004800

080006f8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000702:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000706:	2204      	movs	r2, #4
 8000708:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070c:	2202      	movs	r2, #2
 800070e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000718:	2202      	movs	r2, #2
 800071a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071e:	2201      	movs	r2, #1
 8000720:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000730:	2201      	movs	r2, #1
 8000732:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073c:	f001 fb3b 	bl	8001db6 <HAL_PCD_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000746:	f000 f953 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20004018 	.word	0x20004018

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08c      	sub	sp, #48	; 0x30
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
 800076e:	4b4c      	ldr	r3, [pc, #304]	; (80008a0 <MX_GPIO_Init+0x14c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a4b      	ldr	r2, [pc, #300]	; (80008a0 <MX_GPIO_Init+0x14c>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b49      	ldr	r3, [pc, #292]	; (80008a0 <MX_GPIO_Init+0x14c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <MX_GPIO_Init+0x14c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a44      	ldr	r2, [pc, #272]	; (80008a0 <MX_GPIO_Init+0x14c>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b42      	ldr	r3, [pc, #264]	; (80008a0 <MX_GPIO_Init+0x14c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <MX_GPIO_Init+0x14c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a3d      	ldr	r2, [pc, #244]	; (80008a0 <MX_GPIO_Init+0x14c>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b3b      	ldr	r3, [pc, #236]	; (80008a0 <MX_GPIO_Init+0x14c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b37      	ldr	r3, [pc, #220]	; (80008a0 <MX_GPIO_Init+0x14c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a36      	ldr	r2, [pc, #216]	; (80008a0 <MX_GPIO_Init+0x14c>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b34      	ldr	r3, [pc, #208]	; (80008a0 <MX_GPIO_Init+0x14c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <MX_GPIO_Init+0x14c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a2f      	ldr	r2, [pc, #188]	; (80008a0 <MX_GPIO_Init+0x14c>)
 80007e4:	f043 0308 	orr.w	r3, r3, #8
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <MX_GPIO_Init+0x14c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0308 	and.w	r3, r3, #8
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <MX_GPIO_Init+0x14c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a28      	ldr	r2, [pc, #160]	; (80008a0 <MX_GPIO_Init+0x14c>)
 8000800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_GPIO_Init+0x14c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f244 0181 	movw	r1, #16513	; 0x4081
 8000818:	4822      	ldr	r0, [pc, #136]	; (80008a4 <MX_GPIO_Init+0x150>)
 800081a:	f001 fa99 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2140      	movs	r1, #64	; 0x40
 8000822:	4821      	ldr	r0, [pc, #132]	; (80008a8 <MX_GPIO_Init+0x154>)
 8000824:	f001 fa94 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800082e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	481b      	ldr	r0, [pc, #108]	; (80008ac <MX_GPIO_Init+0x158>)
 8000840:	f001 f8da 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000844:	f244 0381 	movw	r3, #16513	; 0x4081
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	4811      	ldr	r0, [pc, #68]	; (80008a4 <MX_GPIO_Init+0x150>)
 800085e:	f001 f8cb 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000862:	2340      	movs	r3, #64	; 0x40
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	480b      	ldr	r0, [pc, #44]	; (80008a8 <MX_GPIO_Init+0x154>)
 800087a:	f001 f8bd 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_GPIO_Init+0x154>)
 8000892:	f001 f8b1 	bl	80019f8 <HAL_GPIO_Init>

}
 8000896:	bf00      	nop
 8000898:	3730      	adds	r7, #48	; 0x30
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020400 	.word	0x40020400
 80008a8:	40021800 	.word	0x40021800
 80008ac:	40020800 	.word	0x40020800

080008b0 <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */
void vApplicationIdleHook(void){
 80008b0:	b5b0      	push	{r4, r5, r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
	//blue
	int i=0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
	for(;i<4;i++){
 80008ba:	e00a      	b.n	80008d2 <vApplicationIdleHook+0x22>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	4811      	ldr	r0, [pc, #68]	; (8000904 <vApplicationIdleHook+0x54>)
 80008c0:	f001 fa5f 	bl	8001d82 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80008c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008c8:	f000 fb24 	bl	8000f14 <HAL_Delay>
	for(;i<4;i++){
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	3301      	adds	r3, #1
 80008d0:	61fb      	str	r3, [r7, #28]
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	ddf1      	ble.n	80008bc <vApplicationIdleHook+0xc>
	}
	osThreadDef(led_G, led_G_handler, osPriorityNormal, 0, 128);
 80008d8:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <vApplicationIdleHook+0x58>)
 80008da:	463c      	mov	r4, r7
 80008dc:	461d      	mov	r5, r3
 80008de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	led_GHandle = osThreadCreate(osThread(led_G), NULL);
 80008ea:	463b      	mov	r3, r7
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 ffe7 	bl	80038c2 <osThreadCreate>
 80008f4:	4603      	mov	r3, r0
 80008f6:	4a05      	ldr	r2, [pc, #20]	; (800090c <vApplicationIdleHook+0x5c>)
 80008f8:	6013      	str	r3, [r2, #0]
}
 80008fa:	bf00      	nop
 80008fc:	3720      	adds	r7, #32
 80008fe:	46bd      	mov	sp, r7
 8000900:	bdb0      	pop	{r4, r5, r7, pc}
 8000902:	bf00      	nop
 8000904:	40020400 	.word	0x40020400
 8000908:	08004d0c 	.word	0x08004d0c
 800090c:	20004420 	.word	0x20004420

08000910 <led_R_handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_led_R_handler */
void led_R_handler(void const * argument)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	//red
	int i=0;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
	for(;i<4;i++){
 800091c:	e00b      	b.n	8000936 <led_R_handler+0x26>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 800091e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000922:	480b      	ldr	r0, [pc, #44]	; (8000950 <led_R_handler+0x40>)
 8000924:	f001 fa2d 	bl	8001d82 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000928:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800092c:	f000 faf2 	bl	8000f14 <HAL_Delay>
	for(;i<4;i++){
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	3301      	adds	r3, #1
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	2b03      	cmp	r3, #3
 800093a:	ddf0      	ble.n	800091e <led_R_handler+0xe>
	}
	osThreadTerminate(led_RHandle);
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <led_R_handler+0x44>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4618      	mov	r0, r3
 8000942:	f003 f80a 	bl	800395a <osThreadTerminate>
  /* USER CODE END 5 */
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40020400 	.word	0x40020400
 8000954:	20004424 	.word	0x20004424

08000958 <led_G_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_G_handler */
void led_G_handler(void const * argument)
{
 8000958:	b5b0      	push	{r4, r5, r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_G_handler */
  /* Infinite loop */
	//green

	int i=0;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
	for(;i<6;i++){
 8000964:	e00a      	b.n	800097c <led_G_handler+0x24>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000966:	2101      	movs	r1, #1
 8000968:	4814      	ldr	r0, [pc, #80]	; (80009bc <led_G_handler+0x64>)
 800096a:	f001 fa0a 	bl	8001d82 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800096e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000972:	f000 facf 	bl	8000f14 <HAL_Delay>
	for(;i<6;i++){
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	3301      	adds	r3, #1
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
 800097c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097e:	2b05      	cmp	r3, #5
 8000980:	ddf1      	ble.n	8000966 <led_G_handler+0xe>
	}
	osThreadDef(led_R, led_R_handler, osPriorityNormal, 0, 128);
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <led_G_handler+0x68>)
 8000984:	f107 0408 	add.w	r4, r7, #8
 8000988:	461d      	mov	r5, r3
 800098a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000992:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	led_RHandle = osThreadCreate(osThread(led_R), NULL);
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f002 ff90 	bl	80038c2 <osThreadCreate>
 80009a2:	4603      	mov	r3, r0
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <led_G_handler+0x6c>)
 80009a6:	6013      	str	r3, [r2, #0]
	osThreadTerminate(led_GHandle);
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <led_G_handler+0x70>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f002 ffd4 	bl	800395a <osThreadTerminate>
  /* USER CODE END led_G_handler */
}
 80009b2:	bf00      	nop
 80009b4:	3728      	adds	r7, #40	; 0x28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bdb0      	pop	{r4, r5, r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40020400 	.word	0x40020400
 80009c0:	08004d28 	.word	0x08004d28
 80009c4:	20004424 	.word	0x20004424
 80009c8:	20004420 	.word	0x20004420

080009cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d101      	bne.n	80009e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009de:	f000 fa79 	bl	8000ed4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40010000 	.word	0x40010000

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <Error_Handler+0x8>
	...

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_MspInit+0x54>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a11      	ldr	r2, [pc, #68]	; (8000a50 <HAL_MspInit+0x54>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_MspInit+0x54>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <HAL_MspInit+0x54>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_MspInit+0x54>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_MspInit+0x54>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	210f      	movs	r1, #15
 8000a3e:	f06f 0001 	mvn.w	r0, #1
 8000a42:	f000 fb43 	bl	80010cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08e      	sub	sp, #56	; 0x38
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a55      	ldr	r2, [pc, #340]	; (8000bc8 <HAL_ETH_MspInit+0x174>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	f040 80a4 	bne.w	8000bc0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
 8000a7c:	4b53      	ldr	r3, [pc, #332]	; (8000bcc <HAL_ETH_MspInit+0x178>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a80:	4a52      	ldr	r2, [pc, #328]	; (8000bcc <HAL_ETH_MspInit+0x178>)
 8000a82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a86:	6313      	str	r3, [r2, #48]	; 0x30
 8000a88:	4b50      	ldr	r3, [pc, #320]	; (8000bcc <HAL_ETH_MspInit+0x178>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a90:	623b      	str	r3, [r7, #32]
 8000a92:	6a3b      	ldr	r3, [r7, #32]
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
 8000a98:	4b4c      	ldr	r3, [pc, #304]	; (8000bcc <HAL_ETH_MspInit+0x178>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	4a4b      	ldr	r2, [pc, #300]	; (8000bcc <HAL_ETH_MspInit+0x178>)
 8000a9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa4:	4b49      	ldr	r3, [pc, #292]	; (8000bcc <HAL_ETH_MspInit+0x178>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000aac:	61fb      	str	r3, [r7, #28]
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
 8000ab4:	4b45      	ldr	r3, [pc, #276]	; (8000bcc <HAL_ETH_MspInit+0x178>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a44      	ldr	r2, [pc, #272]	; (8000bcc <HAL_ETH_MspInit+0x178>)
 8000aba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac0:	4b42      	ldr	r3, [pc, #264]	; (8000bcc <HAL_ETH_MspInit+0x178>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ac8:	61bb      	str	r3, [r7, #24]
 8000aca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	4b3e      	ldr	r3, [pc, #248]	; (8000bcc <HAL_ETH_MspInit+0x178>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	4a3d      	ldr	r2, [pc, #244]	; (8000bcc <HAL_ETH_MspInit+0x178>)
 8000ad6:	f043 0304 	orr.w	r3, r3, #4
 8000ada:	6313      	str	r3, [r2, #48]	; 0x30
 8000adc:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <HAL_ETH_MspInit+0x178>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	4b37      	ldr	r3, [pc, #220]	; (8000bcc <HAL_ETH_MspInit+0x178>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	4a36      	ldr	r2, [pc, #216]	; (8000bcc <HAL_ETH_MspInit+0x178>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	6313      	str	r3, [r2, #48]	; 0x30
 8000af8:	4b34      	ldr	r3, [pc, #208]	; (8000bcc <HAL_ETH_MspInit+0x178>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <HAL_ETH_MspInit+0x178>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	4a2f      	ldr	r2, [pc, #188]	; (8000bcc <HAL_ETH_MspInit+0x178>)
 8000b0e:	f043 0302 	orr.w	r3, r3, #2
 8000b12:	6313      	str	r3, [r2, #48]	; 0x30
 8000b14:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <HAL_ETH_MspInit+0x178>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	f003 0302 	and.w	r3, r3, #2
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b20:	2300      	movs	r3, #0
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <HAL_ETH_MspInit+0x178>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	4a28      	ldr	r2, [pc, #160]	; (8000bcc <HAL_ETH_MspInit+0x178>)
 8000b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b30:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <HAL_ETH_MspInit+0x178>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b3c:	2332      	movs	r3, #50	; 0x32
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4c:	230b      	movs	r3, #11
 8000b4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	481e      	ldr	r0, [pc, #120]	; (8000bd0 <HAL_ETH_MspInit+0x17c>)
 8000b58:	f000 ff4e 	bl	80019f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b5c:	2386      	movs	r3, #134	; 0x86
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6c:	230b      	movs	r3, #11
 8000b6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	4619      	mov	r1, r3
 8000b76:	4817      	ldr	r0, [pc, #92]	; (8000bd4 <HAL_ETH_MspInit+0x180>)
 8000b78:	f000 ff3e 	bl	80019f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8e:	230b      	movs	r3, #11
 8000b90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <HAL_ETH_MspInit+0x184>)
 8000b9a:	f000 ff2d 	bl	80019f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b9e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb0:	230b      	movs	r3, #11
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4808      	ldr	r0, [pc, #32]	; (8000bdc <HAL_ETH_MspInit+0x188>)
 8000bbc:	f000 ff1c 	bl	80019f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bc0:	bf00      	nop
 8000bc2:	3738      	adds	r7, #56	; 0x38
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40028000 	.word	0x40028000
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020800 	.word	0x40020800
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	40020400 	.word	0x40020400
 8000bdc:	40021800 	.word	0x40021800

08000be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <HAL_UART_MspInit+0x84>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d12c      	bne.n	8000c5c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <HAL_UART_MspInit+0x88>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <HAL_UART_MspInit+0x88>)
 8000c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c10:	6413      	str	r3, [r2, #64]	; 0x40
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_UART_MspInit+0x88>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <HAL_UART_MspInit+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a10      	ldr	r2, [pc, #64]	; (8000c68 <HAL_UART_MspInit+0x88>)
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_UART_MspInit+0x88>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0308 	and.w	r3, r3, #8
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c4c:	2307      	movs	r3, #7
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <HAL_UART_MspInit+0x8c>)
 8000c58:	f000 fece 	bl	80019f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c5c:	bf00      	nop
 8000c5e:	3728      	adds	r7, #40	; 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40004800 	.word	0x40004800
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020c00 	.word	0x40020c00

08000c70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c90:	d13f      	bne.n	8000d12 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <HAL_PCD_MspInit+0xac>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a20      	ldr	r2, [pc, #128]	; (8000d1c <HAL_PCD_MspInit+0xac>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <HAL_PCD_MspInit+0xac>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cae:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cc0:	230a      	movs	r3, #10
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4815      	ldr	r0, [pc, #84]	; (8000d20 <HAL_PCD_MspInit+0xb0>)
 8000ccc:	f000 fe94 	bl	80019f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480e      	ldr	r0, [pc, #56]	; (8000d20 <HAL_PCD_MspInit+0xb0>)
 8000ce6:	f000 fe87 	bl	80019f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <HAL_PCD_MspInit+0xac>)
 8000cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cee:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <HAL_PCD_MspInit+0xac>)
 8000cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf4:	6353      	str	r3, [r2, #52]	; 0x34
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_PCD_MspInit+0xac>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <HAL_PCD_MspInit+0xac>)
 8000d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d04:	6453      	str	r3, [r2, #68]	; 0x44
 8000d06:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <HAL_PCD_MspInit+0xac>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020000 	.word	0x40020000

08000d24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08c      	sub	sp, #48	; 0x30
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	2019      	movs	r0, #25
 8000d3a:	f000 f9c7 	bl	80010cc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d3e:	2019      	movs	r0, #25
 8000d40:	f000 f9e0 	bl	8001104 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <HAL_InitTick+0xa4>)
 8000d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4c:	4a1e      	ldr	r2, [pc, #120]	; (8000dc8 <HAL_InitTick+0xa4>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6453      	str	r3, [r2, #68]	; 0x44
 8000d54:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <HAL_InitTick+0xa4>)
 8000d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d60:	f107 0210 	add.w	r2, r7, #16
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 fdb4 	bl	80028d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d70:	f001 fd9e 	bl	80028b0 <HAL_RCC_GetPCLK2Freq>
 8000d74:	4603      	mov	r3, r0
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7c:	4a13      	ldr	r2, [pc, #76]	; (8000dcc <HAL_InitTick+0xa8>)
 8000d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d82:	0c9b      	lsrs	r3, r3, #18
 8000d84:	3b01      	subs	r3, #1
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_InitTick+0xac>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <HAL_InitTick+0xb0>)
 8000d8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <HAL_InitTick+0xac>)
 8000d90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d94:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d96:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <HAL_InitTick+0xac>)
 8000d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d9a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <HAL_InitTick+0xac>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_InitTick+0xac>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000da8:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <HAL_InitTick+0xac>)
 8000daa:	f001 fdc7 	bl	800293c <HAL_TIM_Base_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d104      	bne.n	8000dbe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000db4:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <HAL_InitTick+0xac>)
 8000db6:	f001 fe1b 	bl	80029f0 <HAL_TIM_Base_Start_IT>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	e000      	b.n	8000dc0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3730      	adds	r7, #48	; 0x30
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	431bde83 	.word	0x431bde83
 8000dd0:	20004470 	.word	0x20004470
 8000dd4:	40010000 	.word	0x40010000

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e0a:	f001 fe61 	bl	8002ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20004470 	.word	0x20004470

08000e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <SystemInit+0x20>)
 8000e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e22:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <SystemInit+0x20>)
 8000e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e74 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e40:	480d      	ldr	r0, [pc, #52]	; (8000e78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e42:	490e      	ldr	r1, [pc, #56]	; (8000e7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e44:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e58:	4c0b      	ldr	r4, [pc, #44]	; (8000e88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e66:	f7ff ffd7 	bl	8000e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f003 ff0f 	bl	8004c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6e:	f7ff fb55 	bl	800051c <main>
  bx  lr    
 8000e72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e74:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e7c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e80:	08004d74 	.word	0x08004d74
  ldr r2, =_sbss
 8000e84:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e88:	200044bc 	.word	0x200044bc

08000e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC_IRQHandler>
	...

08000e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <HAL_Init+0x40>)
 8000e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_Init+0x40>)
 8000ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <HAL_Init+0x40>)
 8000eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f000 f8fc 	bl	80010b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f7ff ff30 	bl	8000d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec4:	f7ff fd9a 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023c00 	.word	0x40023c00

08000ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x20>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x24>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <HAL_IncTick+0x24>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	200044b8 	.word	0x200044b8

08000efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return uwTick;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <HAL_GetTick+0x14>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	200044b8 	.word	0x200044b8

08000f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f1c:	f7ff ffee 	bl	8000efc <HAL_GetTick>
 8000f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f2c:	d005      	beq.n	8000f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_Delay+0x44>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3a:	bf00      	nop
 8000f3c:	f7ff ffde 	bl	8000efc <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d8f7      	bhi.n	8000f3c <HAL_Delay+0x28>
  {
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008

08000f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8e:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	60d3      	str	r3, [r2, #12]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <__NVIC_GetPriorityGrouping+0x18>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	f003 0307 	and.w	r3, r3, #7
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	db0b      	blt.n	8000fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f003 021f 	and.w	r2, r3, #31
 8000fd8:	4907      	ldr	r1, [pc, #28]	; (8000ff8 <__NVIC_EnableIRQ+0x38>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	095b      	lsrs	r3, r3, #5
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000e100 	.word	0xe000e100

08000ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	; (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	; (800104c <__NVIC_SetPriority+0x50>)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2b04      	cmp	r3, #4
 800106c:	bf28      	it	cs
 800106e:	2304      	movcs	r3, #4
 8001070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	2b06      	cmp	r3, #6
 8001078:	d902      	bls.n	8001080 <NVIC_EncodePriority+0x30>
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3b03      	subs	r3, #3
 800107e:	e000      	b.n	8001082 <NVIC_EncodePriority+0x32>
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 32ff 	mov.w	r2, #4294967295
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001098:	f04f 31ff 	mov.w	r1, #4294967295
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
         );
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	; 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ff4c 	bl	8000f5c <__NVIC_SetPriorityGrouping>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010de:	f7ff ff61 	bl	8000fa4 <__NVIC_GetPriorityGrouping>
 80010e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	68b9      	ldr	r1, [r7, #8]
 80010e8:	6978      	ldr	r0, [r7, #20]
 80010ea:	f7ff ffb1 	bl	8001050 <NVIC_EncodePriority>
 80010ee:	4602      	mov	r2, r0
 80010f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f4:	4611      	mov	r1, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff80 	bl	8000ffc <__NVIC_SetPriority>
}
 80010fc:	bf00      	nop
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff54 	bl	8000fc0 <__NVIC_EnableIRQ>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001130:	4baa      	ldr	r3, [pc, #680]	; (80013dc <HAL_ETH_Init+0x2bc>)
 8001132:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e183      	b.n	800144e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d106      	bne.n	8001160 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff fc7a 	bl	8000a54 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	4b9e      	ldr	r3, [pc, #632]	; (80013e0 <HAL_ETH_Init+0x2c0>)
 8001166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001168:	4a9d      	ldr	r2, [pc, #628]	; (80013e0 <HAL_ETH_Init+0x2c0>)
 800116a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116e:	6453      	str	r3, [r2, #68]	; 0x44
 8001170:	4b9b      	ldr	r3, [pc, #620]	; (80013e0 <HAL_ETH_Init+0x2c0>)
 8001172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800117c:	4b99      	ldr	r3, [pc, #612]	; (80013e4 <HAL_ETH_Init+0x2c4>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	4a98      	ldr	r2, [pc, #608]	; (80013e4 <HAL_ETH_Init+0x2c4>)
 8001182:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001186:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001188:	4b96      	ldr	r3, [pc, #600]	; (80013e4 <HAL_ETH_Init+0x2c4>)
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	4994      	ldr	r1, [pc, #592]	; (80013e4 <HAL_ETH_Init+0x2c4>)
 8001192:	4313      	orrs	r3, r2
 8001194:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f042 0201 	orr.w	r2, r2, #1
 80011a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ac:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80011ae:	f7ff fea5 	bl	8000efc <HAL_GetTick>
 80011b2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011b4:	e011      	b.n	80011da <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80011b6:	f7ff fea1 	bl	8000efc <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011c4:	d909      	bls.n	80011da <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2203      	movs	r2, #3
 80011ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e139      	b.n	800144e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1e4      	bne.n	80011b6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f023 031c 	bic.w	r3, r3, #28
 80011fa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80011fc:	f001 fb38 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 8001200:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4a78      	ldr	r2, [pc, #480]	; (80013e8 <HAL_ETH_Init+0x2c8>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d908      	bls.n	800121c <HAL_ETH_Init+0xfc>
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	4a77      	ldr	r2, [pc, #476]	; (80013ec <HAL_ETH_Init+0x2cc>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d804      	bhi.n	800121c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	e027      	b.n	800126c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	4a73      	ldr	r2, [pc, #460]	; (80013ec <HAL_ETH_Init+0x2cc>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d908      	bls.n	8001236 <HAL_ETH_Init+0x116>
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	4a6d      	ldr	r2, [pc, #436]	; (80013dc <HAL_ETH_Init+0x2bc>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d204      	bcs.n	8001236 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f043 030c 	orr.w	r3, r3, #12
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	e01a      	b.n	800126c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	4a68      	ldr	r2, [pc, #416]	; (80013dc <HAL_ETH_Init+0x2bc>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d303      	bcc.n	8001246 <HAL_ETH_Init+0x126>
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	4a6b      	ldr	r2, [pc, #428]	; (80013f0 <HAL_ETH_Init+0x2d0>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d911      	bls.n	800126a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	4a69      	ldr	r2, [pc, #420]	; (80013f0 <HAL_ETH_Init+0x2d0>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d908      	bls.n	8001260 <HAL_ETH_Init+0x140>
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4a68      	ldr	r2, [pc, #416]	; (80013f4 <HAL_ETH_Init+0x2d4>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d804      	bhi.n	8001260 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	61fb      	str	r3, [r7, #28]
 800125e:	e005      	b.n	800126c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f043 0310 	orr.w	r3, r3, #16
 8001266:	61fb      	str	r3, [r7, #28]
 8001268:	e000      	b.n	800126c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800126a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001274:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001278:	2100      	movs	r1, #0
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f954 	bl	8001528 <HAL_ETH_WritePHYRegister>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00b      	beq.n	800129e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800128a:	6939      	ldr	r1, [r7, #16]
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f9b1 	bl	80015f4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e0d7      	b.n	800144e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800129e:	20ff      	movs	r0, #255	; 0xff
 80012a0:	f7ff fe38 	bl	8000f14 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80a5 	beq.w	80013f8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80012ae:	f7ff fe25 	bl	8000efc <HAL_GetTick>
 80012b2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	461a      	mov	r2, r3
 80012ba:	2101      	movs	r1, #1
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f8cb 	bl	8001458 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80012c2:	f7ff fe1b 	bl	8000efc <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d90f      	bls.n	80012f4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80012d8:	6939      	ldr	r1, [r7, #16]
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f98a 	bl	80015f4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e0ac      	b.n	800144e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0da      	beq.n	80012b4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80012fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001302:	2100      	movs	r1, #0
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 f90f 	bl	8001528 <HAL_ETH_WritePHYRegister>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00b      	beq.n	8001328 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001314:	6939      	ldr	r1, [r7, #16]
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 f96c 	bl	80015f4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001324:	2301      	movs	r3, #1
 8001326:	e092      	b.n	800144e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001328:	f7ff fde8 	bl	8000efc <HAL_GetTick>
 800132c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	461a      	mov	r2, r3
 8001334:	2101      	movs	r1, #1
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 f88e 	bl	8001458 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800133c:	f7ff fdde 	bl	8000efc <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	f241 3288 	movw	r2, #5000	; 0x1388
 800134a:	4293      	cmp	r3, r2
 800134c:	d90f      	bls.n	800136e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001352:	6939      	ldr	r1, [r7, #16]
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 f94d 	bl	80015f4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e06f      	b.n	800144e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f003 0320 	and.w	r3, r3, #32
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0da      	beq.n	800132e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	461a      	mov	r2, r3
 800137e:	2110      	movs	r1, #16
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f869 	bl	8001458 <HAL_ETH_ReadPHYRegister>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00b      	beq.n	80013a4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001390:	6939      	ldr	r1, [r7, #16]
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f92e 	bl	80015f4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013a0:	2301      	movs	r3, #1
 80013a2:	e054      	b.n	800144e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d004      	beq.n	80013b8 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	e002      	b.n	80013be <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	e035      	b.n	800143c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	e030      	b.n	800143c <HAL_ETH_Init+0x31c>
 80013da:	bf00      	nop
 80013dc:	03938700 	.word	0x03938700
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40013800 	.word	0x40013800
 80013e8:	01312cff 	.word	0x01312cff
 80013ec:	02160ebf 	.word	0x02160ebf
 80013f0:	05f5e0ff 	.word	0x05f5e0ff
 80013f4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	08db      	lsrs	r3, r3, #3
 80013fe:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	085b      	lsrs	r3, r3, #1
 8001406:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001408:	4313      	orrs	r3, r2
 800140a:	b29b      	uxth	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	2100      	movs	r1, #0
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f889 	bl	8001528 <HAL_ETH_WritePHYRegister>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00b      	beq.n	8001434 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001420:	6939      	ldr	r1, [r7, #16]
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 f8e6 	bl	80015f4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e00c      	b.n	800144e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001434:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001438:	f7ff fd6c 	bl	8000f14 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800143c:	6939      	ldr	r1, [r7, #16]
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f8d8 	bl	80015f4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3720      	adds	r7, #32
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop

08001458 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	460b      	mov	r3, r1
 8001462:	607a      	str	r2, [r7, #4]
 8001464:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b82      	cmp	r3, #130	; 0x82
 8001478:	d101      	bne.n	800147e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800147a:	2302      	movs	r3, #2
 800147c:	e050      	b.n	8001520 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2282      	movs	r2, #130	; 0x82
 8001482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f003 031c 	and.w	r3, r3, #28
 8001494:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8a1b      	ldrh	r3, [r3, #16]
 800149a:	02db      	lsls	r3, r3, #11
 800149c:	b29b      	uxth	r3, r3
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80014a4:	897b      	ldrh	r3, [r7, #10]
 80014a6:	019b      	lsls	r3, r3, #6
 80014a8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f023 0302 	bic.w	r3, r3, #2
 80014b8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80014ca:	f7ff fd17 	bl	8000efc <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80014d0:	e015      	b.n	80014fe <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80014d2:	f7ff fd13 	bl	8000efc <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e0:	d309      	bcc.n	80014f6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e014      	b.n	8001520 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1e4      	bne.n	80014d2 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	b29b      	uxth	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	460b      	mov	r3, r1
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b42      	cmp	r3, #66	; 0x42
 8001548:	d101      	bne.n	800154e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800154a:	2302      	movs	r3, #2
 800154c:	e04e      	b.n	80015ec <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2242      	movs	r2, #66	; 0x42
 8001552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f003 031c 	and.w	r3, r3, #28
 8001564:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	8a1b      	ldrh	r3, [r3, #16]
 800156a:	02db      	lsls	r3, r3, #11
 800156c:	b29b      	uxth	r3, r3
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	4313      	orrs	r3, r2
 8001572:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001574:	897b      	ldrh	r3, [r7, #10]
 8001576:	019b      	lsls	r3, r3, #6
 8001578:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	4313      	orrs	r3, r2
 8001580:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	b29a      	uxth	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80015a4:	f7ff fcaa 	bl	8000efc <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80015aa:	e015      	b.n	80015d8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80015ac:	f7ff fca6 	bl	8000efc <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ba:	d309      	bcc.n	80015d0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e00d      	b.n	80015ec <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1e4      	bne.n	80015ac <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b0b0      	sub	sp, #192	; 0xc0
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d007      	beq.n	800161a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001610:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001618:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001622:	2300      	movs	r3, #0
 8001624:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001626:	2300      	movs	r3, #0
 8001628:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d103      	bne.n	8001642 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800163a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800163e:	663b      	str	r3, [r7, #96]	; 0x60
 8001640:	e001      	b.n	8001646 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800164a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001650:	2300      	movs	r3, #0
 8001652:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001660:	2340      	movs	r3, #64	; 0x40
 8001662:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800166a:	2300      	movs	r3, #0
 800166c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001676:	2300      	movs	r3, #0
 8001678:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001682:	2300      	movs	r3, #0
 8001684:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80016c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016cc:	4bac      	ldr	r3, [pc, #688]	; (8001980 <ETH_MACDMAConfig+0x38c>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80016d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80016d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80016d8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80016da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80016dc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80016de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80016e0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80016e6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80016e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80016ea:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80016ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80016ee:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80016f4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80016f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80016f8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80016fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80016fc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80016fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001700:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001704:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001708:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800170a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800170e:	4313      	orrs	r3, r2
 8001710:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800171c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001728:	2001      	movs	r0, #1
 800172a:	f7ff fbf3 	bl	8000f14 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001736:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001738:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800173a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800173c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800173e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001740:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001742:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001746:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001748:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800174c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800174e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001752:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001754:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001758:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800175c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001764:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001766:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001772:	2001      	movs	r0, #1
 8001774:	f7ff fbce 	bl	8000f14 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001780:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800178a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001794:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80017a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017a4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80017a8:	4013      	ands	r3, r2
 80017aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80017ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017b2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80017b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80017b8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80017ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80017be:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80017c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80017c4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80017c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80017ca:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80017cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80017d0:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80017d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017d6:	4313      	orrs	r3, r2
 80017d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017e4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80017f0:	2001      	movs	r0, #1
 80017f2:	f7ff fb8f 	bl	8000f14 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017fe:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001800:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001804:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800181a:	2001      	movs	r0, #1
 800181c:	f7ff fb7a 	bl	8000f14 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001828:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800182e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001832:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001838:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800183c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800184e:	2304      	movs	r3, #4
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001852:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001858:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800185c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800185e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001862:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001868:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800186e:	2300      	movs	r3, #0
 8001870:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001872:	2300      	movs	r3, #0
 8001874:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187e:	3318      	adds	r3, #24
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001886:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800188a:	4b3e      	ldr	r3, [pc, #248]	; (8001984 <ETH_MACDMAConfig+0x390>)
 800188c:	4013      	ands	r3, r2
 800188e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001892:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001894:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001896:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001898:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800189a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800189c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800189e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80018a0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80018a2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80018a4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80018a6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80018a8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80018aa:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80018ae:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80018b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80018b2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80018b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018b8:	4313      	orrs	r3, r2
 80018ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c6:	3318      	adds	r3, #24
 80018c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018cc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018d6:	3318      	adds	r3, #24
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018de:	2001      	movs	r0, #1
 80018e0:	f7ff fb18 	bl	8000f14 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ec:	3318      	adds	r3, #24
 80018ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018f2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80018f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80018f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80018f8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80018fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80018fc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80018fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001900:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001904:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001908:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800190a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800190c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800190e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800191c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800192c:	2001      	movs	r0, #1
 800192e:	f7ff faf1 	bl	8000f14 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800193a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800193e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d10f      	bne.n	8001968 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001950:	331c      	adds	r3, #28
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800195c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001964:	331c      	adds	r3, #28
 8001966:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	461a      	mov	r2, r3
 800196e:	2100      	movs	r1, #0
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f809 	bl	8001988 <ETH_MACAddressConfig>
}
 8001976:	bf00      	nop
 8001978:	37c0      	adds	r7, #192	; 0xc0
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	ff20810f 	.word	0xff20810f
 8001984:	f8de3f23 	.word	0xf8de3f23

08001988 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3305      	adds	r3, #5
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	3204      	adds	r2, #4
 80019a0:	7812      	ldrb	r2, [r2, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <ETH_MACAddressConfig+0x68>)
 80019aa:	4413      	add	r3, r2
 80019ac:	461a      	mov	r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3303      	adds	r3, #3
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	061a      	lsls	r2, r3, #24
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3302      	adds	r3, #2
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	041b      	lsls	r3, r3, #16
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3301      	adds	r3, #1
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	4313      	orrs	r3, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	7812      	ldrb	r2, [r2, #0]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <ETH_MACAddressConfig+0x6c>)
 80019da:	4413      	add	r3, r2
 80019dc:	461a      	mov	r2, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	6013      	str	r3, [r2, #0]
}
 80019e2:	bf00      	nop
 80019e4:	371c      	adds	r7, #28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40028040 	.word	0x40028040
 80019f4:	40028044 	.word	0x40028044

080019f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	e177      	b.n	8001d04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a14:	2201      	movs	r2, #1
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	f040 8166 	bne.w	8001cfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d005      	beq.n	8001a4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d130      	bne.n	8001aac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	2203      	movs	r2, #3
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a80:	2201      	movs	r2, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 0201 	and.w	r2, r3, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d017      	beq.n	8001ae8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d123      	bne.n	8001b3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	08da      	lsrs	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3208      	adds	r2, #8
 8001afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	220f      	movs	r2, #15
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	69b9      	ldr	r1, [r7, #24]
 8001b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0203 	and.w	r2, r3, #3
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80c0 	beq.w	8001cfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b66      	ldr	r3, [pc, #408]	; (8001d1c <HAL_GPIO_Init+0x324>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a65      	ldr	r2, [pc, #404]	; (8001d1c <HAL_GPIO_Init+0x324>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b63      	ldr	r3, [pc, #396]	; (8001d1c <HAL_GPIO_Init+0x324>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b9a:	4a61      	ldr	r2, [pc, #388]	; (8001d20 <HAL_GPIO_Init+0x328>)
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a58      	ldr	r2, [pc, #352]	; (8001d24 <HAL_GPIO_Init+0x32c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d037      	beq.n	8001c36 <HAL_GPIO_Init+0x23e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a57      	ldr	r2, [pc, #348]	; (8001d28 <HAL_GPIO_Init+0x330>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d031      	beq.n	8001c32 <HAL_GPIO_Init+0x23a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a56      	ldr	r2, [pc, #344]	; (8001d2c <HAL_GPIO_Init+0x334>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d02b      	beq.n	8001c2e <HAL_GPIO_Init+0x236>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a55      	ldr	r2, [pc, #340]	; (8001d30 <HAL_GPIO_Init+0x338>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d025      	beq.n	8001c2a <HAL_GPIO_Init+0x232>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a54      	ldr	r2, [pc, #336]	; (8001d34 <HAL_GPIO_Init+0x33c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d01f      	beq.n	8001c26 <HAL_GPIO_Init+0x22e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a53      	ldr	r2, [pc, #332]	; (8001d38 <HAL_GPIO_Init+0x340>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d019      	beq.n	8001c22 <HAL_GPIO_Init+0x22a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a52      	ldr	r2, [pc, #328]	; (8001d3c <HAL_GPIO_Init+0x344>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_GPIO_Init+0x226>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a51      	ldr	r2, [pc, #324]	; (8001d40 <HAL_GPIO_Init+0x348>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00d      	beq.n	8001c1a <HAL_GPIO_Init+0x222>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a50      	ldr	r2, [pc, #320]	; (8001d44 <HAL_GPIO_Init+0x34c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d007      	beq.n	8001c16 <HAL_GPIO_Init+0x21e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4f      	ldr	r2, [pc, #316]	; (8001d48 <HAL_GPIO_Init+0x350>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d101      	bne.n	8001c12 <HAL_GPIO_Init+0x21a>
 8001c0e:	2309      	movs	r3, #9
 8001c10:	e012      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c12:	230a      	movs	r3, #10
 8001c14:	e010      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c16:	2308      	movs	r3, #8
 8001c18:	e00e      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	e00c      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c1e:	2306      	movs	r3, #6
 8001c20:	e00a      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c22:	2305      	movs	r3, #5
 8001c24:	e008      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c26:	2304      	movs	r3, #4
 8001c28:	e006      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e004      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e002      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c36:	2300      	movs	r3, #0
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	f002 0203 	and.w	r2, r2, #3
 8001c3e:	0092      	lsls	r2, r2, #2
 8001c40:	4093      	lsls	r3, r2
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c48:	4935      	ldr	r1, [pc, #212]	; (8001d20 <HAL_GPIO_Init+0x328>)
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	3302      	adds	r3, #2
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c56:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <HAL_GPIO_Init+0x354>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c7a:	4a34      	ldr	r2, [pc, #208]	; (8001d4c <HAL_GPIO_Init+0x354>)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c80:	4b32      	ldr	r3, [pc, #200]	; (8001d4c <HAL_GPIO_Init+0x354>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ca4:	4a29      	ldr	r2, [pc, #164]	; (8001d4c <HAL_GPIO_Init+0x354>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001caa:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <HAL_GPIO_Init+0x354>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cce:	4a1f      	ldr	r2, [pc, #124]	; (8001d4c <HAL_GPIO_Init+0x354>)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <HAL_GPIO_Init+0x354>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf8:	4a14      	ldr	r2, [pc, #80]	; (8001d4c <HAL_GPIO_Init+0x354>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3301      	adds	r3, #1
 8001d02:	61fb      	str	r3, [r7, #28]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	2b0f      	cmp	r3, #15
 8001d08:	f67f ae84 	bls.w	8001a14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3724      	adds	r7, #36	; 0x24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40013800 	.word	0x40013800
 8001d24:	40020000 	.word	0x40020000
 8001d28:	40020400 	.word	0x40020400
 8001d2c:	40020800 	.word	0x40020800
 8001d30:	40020c00 	.word	0x40020c00
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40021400 	.word	0x40021400
 8001d3c:	40021800 	.word	0x40021800
 8001d40:	40021c00 	.word	0x40021c00
 8001d44:	40022000 	.word	0x40022000
 8001d48:	40022400 	.word	0x40022400
 8001d4c:	40013c00 	.word	0x40013c00

08001d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d60:	787b      	ldrb	r3, [r7, #1]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d66:	887a      	ldrh	r2, [r7, #2]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d6c:	e003      	b.n	8001d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	041a      	lsls	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	619a      	str	r2, [r3, #24]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b085      	sub	sp, #20
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d94:	887a      	ldrh	r2, [r7, #2]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	041a      	lsls	r2, r3, #16
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	400b      	ands	r3, r1
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	619a      	str	r2, [r3, #24]
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001db6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db8:	b08f      	sub	sp, #60	; 0x3c
 8001dba:	af0a      	add	r7, sp, #40	; 0x28
 8001dbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e10f      	b.n	8001fe8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d106      	bne.n	8001de8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7fe ff44 	bl	8000c70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2203      	movs	r2, #3
 8001dec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f001 fabd 	bl	8003386 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	687e      	ldr	r6, [r7, #4]
 8001e14:	466d      	mov	r5, sp
 8001e16:	f106 0410 	add.w	r4, r6, #16
 8001e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e26:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e2a:	1d33      	adds	r3, r6, #4
 8001e2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e2e:	6838      	ldr	r0, [r7, #0]
 8001e30:	f001 fa48 	bl	80032c4 <USB_CoreInit>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0d0      	b.n	8001fe8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f001 faab 	bl	80033a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	73fb      	strb	r3, [r7, #15]
 8001e56:	e04a      	b.n	8001eee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	1a9b      	subs	r3, r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	333d      	adds	r3, #61	; 0x3d
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	333c      	adds	r3, #60	; 0x3c
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	b298      	uxth	r0, r3
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	3342      	adds	r3, #66	; 0x42
 8001e94:	4602      	mov	r2, r0
 8001e96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e98:	7bfa      	ldrb	r2, [r7, #15]
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	333f      	adds	r3, #63	; 0x3f
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eac:	7bfa      	ldrb	r2, [r7, #15]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	3344      	adds	r3, #68	; 0x44
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	3348      	adds	r3, #72	; 0x48
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	3350      	adds	r3, #80	; 0x50
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	3301      	adds	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d3af      	bcc.n	8001e58 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	e044      	b.n	8001f88 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001efe:	7bfa      	ldrb	r2, [r7, #15]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f26:	7bfa      	ldrb	r2, [r7, #15]
 8001f28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f2a:	7bfa      	ldrb	r2, [r7, #15]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	1a9b      	subs	r3, r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	1a9b      	subs	r3, r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	3301      	adds	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d3b5      	bcc.n	8001efe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	687e      	ldr	r6, [r7, #4]
 8001f9a:	466d      	mov	r5, sp
 8001f9c:	f106 0410 	add.w	r4, r6, #16
 8001fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fac:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fb0:	1d33      	adds	r3, r6, #4
 8001fb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fb4:	6838      	ldr	r0, [r7, #0]
 8001fb6:	f001 fa43 	bl	8003440 <USB_DevInit>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e00d      	b.n	8001fe8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f001 fbee 	bl	80037c2 <USB_DevDisconnect>

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e264      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d075      	beq.n	80020fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800200e:	4ba3      	ldr	r3, [pc, #652]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b04      	cmp	r3, #4
 8002018:	d00c      	beq.n	8002034 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800201a:	4ba0      	ldr	r3, [pc, #640]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002022:	2b08      	cmp	r3, #8
 8002024:	d112      	bne.n	800204c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002026:	4b9d      	ldr	r3, [pc, #628]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002032:	d10b      	bne.n	800204c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002034:	4b99      	ldr	r3, [pc, #612]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d05b      	beq.n	80020f8 <HAL_RCC_OscConfig+0x108>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d157      	bne.n	80020f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e23f      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002054:	d106      	bne.n	8002064 <HAL_RCC_OscConfig+0x74>
 8002056:	4b91      	ldr	r3, [pc, #580]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a90      	ldr	r2, [pc, #576]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e01d      	b.n	80020a0 <HAL_RCC_OscConfig+0xb0>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800206c:	d10c      	bne.n	8002088 <HAL_RCC_OscConfig+0x98>
 800206e:	4b8b      	ldr	r3, [pc, #556]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a8a      	ldr	r2, [pc, #552]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	4b88      	ldr	r3, [pc, #544]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a87      	ldr	r2, [pc, #540]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	e00b      	b.n	80020a0 <HAL_RCC_OscConfig+0xb0>
 8002088:	4b84      	ldr	r3, [pc, #528]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a83      	ldr	r2, [pc, #524]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800208e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	4b81      	ldr	r3, [pc, #516]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a80      	ldr	r2, [pc, #512]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800209a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d013      	beq.n	80020d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7fe ff28 	bl	8000efc <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020b0:	f7fe ff24 	bl	8000efc <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b64      	cmp	r3, #100	; 0x64
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e204      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c2:	4b76      	ldr	r3, [pc, #472]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0xc0>
 80020ce:	e014      	b.n	80020fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7fe ff14 	bl	8000efc <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d8:	f7fe ff10 	bl	8000efc <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e1f0      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ea:	4b6c      	ldr	r3, [pc, #432]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0xe8>
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d063      	beq.n	80021ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002106:	4b65      	ldr	r3, [pc, #404]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00b      	beq.n	800212a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002112:	4b62      	ldr	r3, [pc, #392]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800211a:	2b08      	cmp	r3, #8
 800211c:	d11c      	bne.n	8002158 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800211e:	4b5f      	ldr	r3, [pc, #380]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d116      	bne.n	8002158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212a:	4b5c      	ldr	r3, [pc, #368]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <HAL_RCC_OscConfig+0x152>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d001      	beq.n	8002142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e1c4      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002142:	4b56      	ldr	r3, [pc, #344]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4952      	ldr	r1, [pc, #328]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002156:	e03a      	b.n	80021ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d020      	beq.n	80021a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002160:	4b4f      	ldr	r3, [pc, #316]	; (80022a0 <HAL_RCC_OscConfig+0x2b0>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002166:	f7fe fec9 	bl	8000efc <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800216e:	f7fe fec5 	bl	8000efc <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e1a5      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002180:	4b46      	ldr	r3, [pc, #280]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218c:	4b43      	ldr	r3, [pc, #268]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4940      	ldr	r1, [pc, #256]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]
 80021a0:	e015      	b.n	80021ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a2:	4b3f      	ldr	r3, [pc, #252]	; (80022a0 <HAL_RCC_OscConfig+0x2b0>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe fea8 	bl	8000efc <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b0:	f7fe fea4 	bl	8000efc <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e184      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c2:	4b36      	ldr	r3, [pc, #216]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d030      	beq.n	800223c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d016      	beq.n	8002210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e2:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <HAL_RCC_OscConfig+0x2b4>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e8:	f7fe fe88 	bl	8000efc <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021f0:	f7fe fe84 	bl	8000efc <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e164      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002202:	4b26      	ldr	r3, [pc, #152]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x200>
 800220e:	e015      	b.n	800223c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002210:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <HAL_RCC_OscConfig+0x2b4>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002216:	f7fe fe71 	bl	8000efc <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800221e:	f7fe fe6d 	bl	8000efc <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e14d      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f0      	bne.n	800221e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80a0 	beq.w	800238a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224a:	2300      	movs	r3, #0
 800224c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800224e:	4b13      	ldr	r3, [pc, #76]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10f      	bne.n	800227a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	4b0f      	ldr	r3, [pc, #60]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	4a0e      	ldr	r2, [pc, #56]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002268:	6413      	str	r3, [r2, #64]	; 0x40
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002276:	2301      	movs	r3, #1
 8002278:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_OscConfig+0x2b8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002282:	2b00      	cmp	r3, #0
 8002284:	d121      	bne.n	80022ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <HAL_RCC_OscConfig+0x2b8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <HAL_RCC_OscConfig+0x2b8>)
 800228c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002292:	f7fe fe33 	bl	8000efc <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002298:	e011      	b.n	80022be <HAL_RCC_OscConfig+0x2ce>
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	42470000 	.word	0x42470000
 80022a4:	42470e80 	.word	0x42470e80
 80022a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ac:	f7fe fe26 	bl	8000efc <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e106      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022be:	4b85      	ldr	r3, [pc, #532]	; (80024d4 <HAL_RCC_OscConfig+0x4e4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d106      	bne.n	80022e0 <HAL_RCC_OscConfig+0x2f0>
 80022d2:	4b81      	ldr	r3, [pc, #516]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d6:	4a80      	ldr	r2, [pc, #512]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6713      	str	r3, [r2, #112]	; 0x70
 80022de:	e01c      	b.n	800231a <HAL_RCC_OscConfig+0x32a>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	d10c      	bne.n	8002302 <HAL_RCC_OscConfig+0x312>
 80022e8:	4b7b      	ldr	r3, [pc, #492]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80022ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ec:	4a7a      	ldr	r2, [pc, #488]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80022ee:	f043 0304 	orr.w	r3, r3, #4
 80022f2:	6713      	str	r3, [r2, #112]	; 0x70
 80022f4:	4b78      	ldr	r3, [pc, #480]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80022f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f8:	4a77      	ldr	r2, [pc, #476]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002300:	e00b      	b.n	800231a <HAL_RCC_OscConfig+0x32a>
 8002302:	4b75      	ldr	r3, [pc, #468]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	4a74      	ldr	r2, [pc, #464]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	6713      	str	r3, [r2, #112]	; 0x70
 800230e:	4b72      	ldr	r3, [pc, #456]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002312:	4a71      	ldr	r2, [pc, #452]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002314:	f023 0304 	bic.w	r3, r3, #4
 8002318:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d015      	beq.n	800234e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002322:	f7fe fdeb 	bl	8000efc <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002328:	e00a      	b.n	8002340 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7fe fde7 	bl	8000efc <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	; 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e0c5      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002340:	4b65      	ldr	r3, [pc, #404]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0ee      	beq.n	800232a <HAL_RCC_OscConfig+0x33a>
 800234c:	e014      	b.n	8002378 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234e:	f7fe fdd5 	bl	8000efc <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002354:	e00a      	b.n	800236c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7fe fdd1 	bl	8000efc <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	; 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0af      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236c:	4b5a      	ldr	r3, [pc, #360]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 800236e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1ee      	bne.n	8002356 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002378:	7dfb      	ldrb	r3, [r7, #23]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d105      	bne.n	800238a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237e:	4b56      	ldr	r3, [pc, #344]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	4a55      	ldr	r2, [pc, #340]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002388:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 809b 	beq.w	80024ca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002394:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 030c 	and.w	r3, r3, #12
 800239c:	2b08      	cmp	r3, #8
 800239e:	d05c      	beq.n	800245a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d141      	bne.n	800242c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a8:	4b4c      	ldr	r3, [pc, #304]	; (80024dc <HAL_RCC_OscConfig+0x4ec>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7fe fda5 	bl	8000efc <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b6:	f7fe fda1 	bl	8000efc <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e081      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c8:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f0      	bne.n	80023b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69da      	ldr	r2, [r3, #28]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	019b      	lsls	r3, r3, #6
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ea:	085b      	lsrs	r3, r3, #1
 80023ec:	3b01      	subs	r3, #1
 80023ee:	041b      	lsls	r3, r3, #16
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	061b      	lsls	r3, r3, #24
 80023f8:	4937      	ldr	r1, [pc, #220]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023fe:	4b37      	ldr	r3, [pc, #220]	; (80024dc <HAL_RCC_OscConfig+0x4ec>)
 8002400:	2201      	movs	r2, #1
 8002402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7fe fd7a 	bl	8000efc <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe fd76 	bl	8000efc <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e056      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241e:	4b2e      	ldr	r3, [pc, #184]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x41c>
 800242a:	e04e      	b.n	80024ca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242c:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <HAL_RCC_OscConfig+0x4ec>)
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7fe fd63 	bl	8000efc <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800243a:	f7fe fd5f 	bl	8000efc <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e03f      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244c:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f0      	bne.n	800243a <HAL_RCC_OscConfig+0x44a>
 8002458:	e037      	b.n	80024ca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e032      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002466:	4b1c      	ldr	r3, [pc, #112]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d028      	beq.n	80024c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d121      	bne.n	80024c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248c:	429a      	cmp	r2, r3
 800248e:	d11a      	bne.n	80024c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002496:	4013      	ands	r3, r2
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800249c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800249e:	4293      	cmp	r3, r2
 80024a0:	d111      	bne.n	80024c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	085b      	lsrs	r3, r3, #1
 80024ae:	3b01      	subs	r3, #1
 80024b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40007000 	.word	0x40007000
 80024d8:	40023800 	.word	0x40023800
 80024dc:	42470060 	.word	0x42470060

080024e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0cc      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024f4:	4b68      	ldr	r3, [pc, #416]	; (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d90c      	bls.n	800251c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002502:	4b65      	ldr	r3, [pc, #404]	; (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	4b63      	ldr	r3, [pc, #396]	; (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0b8      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d020      	beq.n	800256a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002534:	4b59      	ldr	r3, [pc, #356]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	4a58      	ldr	r2, [pc, #352]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800253e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800254c:	4b53      	ldr	r3, [pc, #332]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	4a52      	ldr	r2, [pc, #328]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002558:	4b50      	ldr	r3, [pc, #320]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	494d      	ldr	r1, [pc, #308]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	4313      	orrs	r3, r2
 8002568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d044      	beq.n	8002600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d107      	bne.n	800258e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	4b47      	ldr	r3, [pc, #284]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d119      	bne.n	80025be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e07f      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d003      	beq.n	800259e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259a:	2b03      	cmp	r3, #3
 800259c:	d107      	bne.n	80025ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259e:	4b3f      	ldr	r3, [pc, #252]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d109      	bne.n	80025be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e06f      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ae:	4b3b      	ldr	r3, [pc, #236]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e067      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025be:	4b37      	ldr	r3, [pc, #220]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f023 0203 	bic.w	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4934      	ldr	r1, [pc, #208]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d0:	f7fe fc94 	bl	8000efc <HAL_GetTick>
 80025d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	e00a      	b.n	80025ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d8:	f7fe fc90 	bl	8000efc <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e04f      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	4b2b      	ldr	r3, [pc, #172]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 020c 	and.w	r2, r3, #12
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d1eb      	bne.n	80025d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002600:	4b25      	ldr	r3, [pc, #148]	; (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d20c      	bcs.n	8002628 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b22      	ldr	r3, [pc, #136]	; (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b20      	ldr	r3, [pc, #128]	; (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e032      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002634:	4b19      	ldr	r3, [pc, #100]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4916      	ldr	r1, [pc, #88]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	4313      	orrs	r3, r2
 8002644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d009      	beq.n	8002666 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	490e      	ldr	r1, [pc, #56]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	4313      	orrs	r3, r2
 8002664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002666:	f000 f821 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 800266a:	4602      	mov	r2, r0
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	490a      	ldr	r1, [pc, #40]	; (80026a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002678:	5ccb      	ldrb	r3, [r1, r3]
 800267a:	fa22 f303 	lsr.w	r3, r2, r3
 800267e:	4a09      	ldr	r2, [pc, #36]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fb4c 	bl	8000d24 <HAL_InitTick>

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40023c00 	.word	0x40023c00
 800269c:	40023800 	.word	0x40023800
 80026a0:	08004d4c 	.word	0x08004d4c
 80026a4:	20000000 	.word	0x20000000
 80026a8:	20000004 	.word	0x20000004

080026ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	607b      	str	r3, [r7, #4]
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	2300      	movs	r3, #0
 80026be:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026c4:	4b67      	ldr	r3, [pc, #412]	; (8002864 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 030c 	and.w	r3, r3, #12
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d00d      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0x40>
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	f200 80bd 	bhi.w	8002850 <HAL_RCC_GetSysClockFreq+0x1a4>
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0x34>
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d003      	beq.n	80026e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80026de:	e0b7      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026e0:	4b61      	ldr	r3, [pc, #388]	; (8002868 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80026e2:	60bb      	str	r3, [r7, #8]
       break;
 80026e4:	e0b7      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026e6:	4b61      	ldr	r3, [pc, #388]	; (800286c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80026e8:	60bb      	str	r3, [r7, #8]
      break;
 80026ea:	e0b4      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026ec:	4b5d      	ldr	r3, [pc, #372]	; (8002864 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026f6:	4b5b      	ldr	r3, [pc, #364]	; (8002864 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d04d      	beq.n	800279e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002702:	4b58      	ldr	r3, [pc, #352]	; (8002864 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	099b      	lsrs	r3, r3, #6
 8002708:	461a      	mov	r2, r3
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002712:	f04f 0100 	mov.w	r1, #0
 8002716:	ea02 0800 	and.w	r8, r2, r0
 800271a:	ea03 0901 	and.w	r9, r3, r1
 800271e:	4640      	mov	r0, r8
 8002720:	4649      	mov	r1, r9
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	014b      	lsls	r3, r1, #5
 800272c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002730:	0142      	lsls	r2, r0, #5
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	ebb0 0008 	subs.w	r0, r0, r8
 800273a:	eb61 0109 	sbc.w	r1, r1, r9
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	018b      	lsls	r3, r1, #6
 8002748:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800274c:	0182      	lsls	r2, r0, #6
 800274e:	1a12      	subs	r2, r2, r0
 8002750:	eb63 0301 	sbc.w	r3, r3, r1
 8002754:	f04f 0000 	mov.w	r0, #0
 8002758:	f04f 0100 	mov.w	r1, #0
 800275c:	00d9      	lsls	r1, r3, #3
 800275e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002762:	00d0      	lsls	r0, r2, #3
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	eb12 0208 	adds.w	r2, r2, r8
 800276c:	eb43 0309 	adc.w	r3, r3, r9
 8002770:	f04f 0000 	mov.w	r0, #0
 8002774:	f04f 0100 	mov.w	r1, #0
 8002778:	0259      	lsls	r1, r3, #9
 800277a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800277e:	0250      	lsls	r0, r2, #9
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	461a      	mov	r2, r3
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	f7fd fd2e 	bl	80001f0 <__aeabi_uldivmod>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4613      	mov	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	e04a      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279e:	4b31      	ldr	r3, [pc, #196]	; (8002864 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	099b      	lsrs	r3, r3, #6
 80027a4:	461a      	mov	r2, r3
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027ae:	f04f 0100 	mov.w	r1, #0
 80027b2:	ea02 0400 	and.w	r4, r2, r0
 80027b6:	ea03 0501 	and.w	r5, r3, r1
 80027ba:	4620      	mov	r0, r4
 80027bc:	4629      	mov	r1, r5
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	014b      	lsls	r3, r1, #5
 80027c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027cc:	0142      	lsls	r2, r0, #5
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	1b00      	subs	r0, r0, r4
 80027d4:	eb61 0105 	sbc.w	r1, r1, r5
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	018b      	lsls	r3, r1, #6
 80027e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027e6:	0182      	lsls	r2, r0, #6
 80027e8:	1a12      	subs	r2, r2, r0
 80027ea:	eb63 0301 	sbc.w	r3, r3, r1
 80027ee:	f04f 0000 	mov.w	r0, #0
 80027f2:	f04f 0100 	mov.w	r1, #0
 80027f6:	00d9      	lsls	r1, r3, #3
 80027f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027fc:	00d0      	lsls	r0, r2, #3
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	1912      	adds	r2, r2, r4
 8002804:	eb45 0303 	adc.w	r3, r5, r3
 8002808:	f04f 0000 	mov.w	r0, #0
 800280c:	f04f 0100 	mov.w	r1, #0
 8002810:	0299      	lsls	r1, r3, #10
 8002812:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002816:	0290      	lsls	r0, r2, #10
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	461a      	mov	r2, r3
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	f7fd fce2 	bl	80001f0 <__aeabi_uldivmod>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4613      	mov	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	0c1b      	lsrs	r3, r3, #16
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	3301      	adds	r3, #1
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	fbb2 f3f3 	udiv	r3, r2, r3
 800284c:	60bb      	str	r3, [r7, #8]
      break;
 800284e:	e002      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002852:	60bb      	str	r3, [r7, #8]
      break;
 8002854:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002856:	68bb      	ldr	r3, [r7, #8]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	00f42400 	.word	0x00f42400
 800286c:	007a1200 	.word	0x007a1200

08002870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <HAL_RCC_GetHCLKFreq+0x14>)
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20000000 	.word	0x20000000

08002888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800288c:	f7ff fff0 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	0a9b      	lsrs	r3, r3, #10
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	4903      	ldr	r1, [pc, #12]	; (80028ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40023800 	.word	0x40023800
 80028ac:	08004d5c 	.word	0x08004d5c

080028b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028b4:	f7ff ffdc 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	0b5b      	lsrs	r3, r3, #13
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	4903      	ldr	r1, [pc, #12]	; (80028d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028c6:	5ccb      	ldrb	r3, [r1, r3]
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40023800 	.word	0x40023800
 80028d4:	08004d5c 	.word	0x08004d5c

080028d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	220f      	movs	r2, #15
 80028e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028e8:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_RCC_GetClockConfig+0x5c>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 0203 	and.w	r2, r3, #3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028f4:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <HAL_RCC_GetClockConfig+0x5c>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <HAL_RCC_GetClockConfig+0x5c>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800290c:	4b09      	ldr	r3, [pc, #36]	; (8002934 <HAL_RCC_GetClockConfig+0x5c>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	08db      	lsrs	r3, r3, #3
 8002912:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800291a:	4b07      	ldr	r3, [pc, #28]	; (8002938 <HAL_RCC_GetClockConfig+0x60>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 020f 	and.w	r2, r3, #15
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	601a      	str	r2, [r3, #0]
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800
 8002938:	40023c00 	.word	0x40023c00

0800293c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e041      	b.n	80029d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f839 	bl	80029da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3304      	adds	r3, #4
 8002978:	4619      	mov	r1, r3
 800297a:	4610      	mov	r0, r2
 800297c:	f000 f9d8 	bl	8002d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d001      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e04e      	b.n	8002aa6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a23      	ldr	r2, [pc, #140]	; (8002ab4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d022      	beq.n	8002a70 <HAL_TIM_Base_Start_IT+0x80>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a32:	d01d      	beq.n	8002a70 <HAL_TIM_Base_Start_IT+0x80>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a1f      	ldr	r2, [pc, #124]	; (8002ab8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d018      	beq.n	8002a70 <HAL_TIM_Base_Start_IT+0x80>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1e      	ldr	r2, [pc, #120]	; (8002abc <HAL_TIM_Base_Start_IT+0xcc>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d013      	beq.n	8002a70 <HAL_TIM_Base_Start_IT+0x80>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a1c      	ldr	r2, [pc, #112]	; (8002ac0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00e      	beq.n	8002a70 <HAL_TIM_Base_Start_IT+0x80>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a1b      	ldr	r2, [pc, #108]	; (8002ac4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d009      	beq.n	8002a70 <HAL_TIM_Base_Start_IT+0x80>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a19      	ldr	r2, [pc, #100]	; (8002ac8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d004      	beq.n	8002a70 <HAL_TIM_Base_Start_IT+0x80>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a18      	ldr	r2, [pc, #96]	; (8002acc <HAL_TIM_Base_Start_IT+0xdc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d111      	bne.n	8002a94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b06      	cmp	r3, #6
 8002a80:	d010      	beq.n	8002aa4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f042 0201 	orr.w	r2, r2, #1
 8002a90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a92:	e007      	b.n	8002aa4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40010000 	.word	0x40010000
 8002ab8:	40000400 	.word	0x40000400
 8002abc:	40000800 	.word	0x40000800
 8002ac0:	40000c00 	.word	0x40000c00
 8002ac4:	40010400 	.word	0x40010400
 8002ac8:	40014000 	.word	0x40014000
 8002acc:	40001800 	.word	0x40001800

08002ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d122      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d11b      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0202 	mvn.w	r2, #2
 8002afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f8ee 	bl	8002cf4 <HAL_TIM_IC_CaptureCallback>
 8002b18:	e005      	b.n	8002b26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f8e0 	bl	8002ce0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f8f1 	bl	8002d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d122      	bne.n	8002b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d11b      	bne.n	8002b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0204 	mvn.w	r2, #4
 8002b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2202      	movs	r2, #2
 8002b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f8c4 	bl	8002cf4 <HAL_TIM_IC_CaptureCallback>
 8002b6c:	e005      	b.n	8002b7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f8b6 	bl	8002ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f8c7 	bl	8002d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d122      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d11b      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0208 	mvn.w	r2, #8
 8002ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2204      	movs	r2, #4
 8002baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f89a 	bl	8002cf4 <HAL_TIM_IC_CaptureCallback>
 8002bc0:	e005      	b.n	8002bce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f88c 	bl	8002ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f89d 	bl	8002d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b10      	cmp	r3, #16
 8002be0:	d122      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	2b10      	cmp	r3, #16
 8002bee:	d11b      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0210 	mvn.w	r2, #16
 8002bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2208      	movs	r2, #8
 8002bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f870 	bl	8002cf4 <HAL_TIM_IC_CaptureCallback>
 8002c14:	e005      	b.n	8002c22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f862 	bl	8002ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f873 	bl	8002d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d10e      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d107      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0201 	mvn.w	r2, #1
 8002c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fd febc 	bl	80009cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5e:	2b80      	cmp	r3, #128	; 0x80
 8002c60:	d10e      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6c:	2b80      	cmp	r3, #128	; 0x80
 8002c6e:	d107      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f902 	bl	8002e84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8a:	2b40      	cmp	r3, #64	; 0x40
 8002c8c:	d10e      	bne.n	8002cac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c98:	2b40      	cmp	r3, #64	; 0x40
 8002c9a:	d107      	bne.n	8002cac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f838 	bl	8002d1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	d10e      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d107      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0220 	mvn.w	r2, #32
 8002cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f8cc 	bl	8002e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a40      	ldr	r2, [pc, #256]	; (8002e44 <TIM_Base_SetConfig+0x114>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d013      	beq.n	8002d70 <TIM_Base_SetConfig+0x40>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d4e:	d00f      	beq.n	8002d70 <TIM_Base_SetConfig+0x40>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a3d      	ldr	r2, [pc, #244]	; (8002e48 <TIM_Base_SetConfig+0x118>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00b      	beq.n	8002d70 <TIM_Base_SetConfig+0x40>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a3c      	ldr	r2, [pc, #240]	; (8002e4c <TIM_Base_SetConfig+0x11c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d007      	beq.n	8002d70 <TIM_Base_SetConfig+0x40>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a3b      	ldr	r2, [pc, #236]	; (8002e50 <TIM_Base_SetConfig+0x120>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d003      	beq.n	8002d70 <TIM_Base_SetConfig+0x40>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a3a      	ldr	r2, [pc, #232]	; (8002e54 <TIM_Base_SetConfig+0x124>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d108      	bne.n	8002d82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a2f      	ldr	r2, [pc, #188]	; (8002e44 <TIM_Base_SetConfig+0x114>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d02b      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d90:	d027      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a2c      	ldr	r2, [pc, #176]	; (8002e48 <TIM_Base_SetConfig+0x118>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d023      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a2b      	ldr	r2, [pc, #172]	; (8002e4c <TIM_Base_SetConfig+0x11c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d01f      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a2a      	ldr	r2, [pc, #168]	; (8002e50 <TIM_Base_SetConfig+0x120>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d01b      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a29      	ldr	r2, [pc, #164]	; (8002e54 <TIM_Base_SetConfig+0x124>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d017      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a28      	ldr	r2, [pc, #160]	; (8002e58 <TIM_Base_SetConfig+0x128>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d013      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a27      	ldr	r2, [pc, #156]	; (8002e5c <TIM_Base_SetConfig+0x12c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00f      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a26      	ldr	r2, [pc, #152]	; (8002e60 <TIM_Base_SetConfig+0x130>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00b      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a25      	ldr	r2, [pc, #148]	; (8002e64 <TIM_Base_SetConfig+0x134>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d007      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a24      	ldr	r2, [pc, #144]	; (8002e68 <TIM_Base_SetConfig+0x138>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d003      	beq.n	8002de2 <TIM_Base_SetConfig+0xb2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a23      	ldr	r2, [pc, #140]	; (8002e6c <TIM_Base_SetConfig+0x13c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d108      	bne.n	8002df4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <TIM_Base_SetConfig+0x114>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d003      	beq.n	8002e28 <TIM_Base_SetConfig+0xf8>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a0c      	ldr	r2, [pc, #48]	; (8002e54 <TIM_Base_SetConfig+0x124>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d103      	bne.n	8002e30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	615a      	str	r2, [r3, #20]
}
 8002e36:	bf00      	nop
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40010000 	.word	0x40010000
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	40000800 	.word	0x40000800
 8002e50:	40000c00 	.word	0x40000c00
 8002e54:	40010400 	.word	0x40010400
 8002e58:	40014000 	.word	0x40014000
 8002e5c:	40014400 	.word	0x40014400
 8002e60:	40014800 	.word	0x40014800
 8002e64:	40001800 	.word	0x40001800
 8002e68:	40001c00 	.word	0x40001c00
 8002e6c:	40002000 	.word	0x40002000

08002e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e03f      	b.n	8002f2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fd fe8e 	bl	8000be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2224      	movs	r2, #36	; 0x24
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f829 	bl	8002f34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ef0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695a      	ldr	r2, [r3, #20]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f38:	b09f      	sub	sp, #124	; 0x7c
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4a:	68d9      	ldr	r1, [r3, #12]
 8002f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	ea40 0301 	orr.w	r3, r0, r1
 8002f54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f78:	f021 010c 	bic.w	r1, r1, #12
 8002f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f82:	430b      	orrs	r3, r1
 8002f84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f92:	6999      	ldr	r1, [r3, #24]
 8002f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	ea40 0301 	orr.w	r3, r0, r1
 8002f9c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	4bc5      	ldr	r3, [pc, #788]	; (80032b8 <UART_SetConfig+0x384>)
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d004      	beq.n	8002fb2 <UART_SetConfig+0x7e>
 8002fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4bc3      	ldr	r3, [pc, #780]	; (80032bc <UART_SetConfig+0x388>)
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d103      	bne.n	8002fba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fb2:	f7ff fc7d 	bl	80028b0 <HAL_RCC_GetPCLK2Freq>
 8002fb6:	6778      	str	r0, [r7, #116]	; 0x74
 8002fb8:	e002      	b.n	8002fc0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fba:	f7ff fc65 	bl	8002888 <HAL_RCC_GetPCLK1Freq>
 8002fbe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc8:	f040 80b6 	bne.w	8003138 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fce:	461c      	mov	r4, r3
 8002fd0:	f04f 0500 	mov.w	r5, #0
 8002fd4:	4622      	mov	r2, r4
 8002fd6:	462b      	mov	r3, r5
 8002fd8:	1891      	adds	r1, r2, r2
 8002fda:	6439      	str	r1, [r7, #64]	; 0x40
 8002fdc:	415b      	adcs	r3, r3
 8002fde:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fe4:	1912      	adds	r2, r2, r4
 8002fe6:	eb45 0303 	adc.w	r3, r5, r3
 8002fea:	f04f 0000 	mov.w	r0, #0
 8002fee:	f04f 0100 	mov.w	r1, #0
 8002ff2:	00d9      	lsls	r1, r3, #3
 8002ff4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ff8:	00d0      	lsls	r0, r2, #3
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	1911      	adds	r1, r2, r4
 8003000:	6639      	str	r1, [r7, #96]	; 0x60
 8003002:	416b      	adcs	r3, r5
 8003004:	667b      	str	r3, [r7, #100]	; 0x64
 8003006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	461a      	mov	r2, r3
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	1891      	adds	r1, r2, r2
 8003012:	63b9      	str	r1, [r7, #56]	; 0x38
 8003014:	415b      	adcs	r3, r3
 8003016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003018:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800301c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003020:	f7fd f8e6 	bl	80001f0 <__aeabi_uldivmod>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4ba5      	ldr	r3, [pc, #660]	; (80032c0 <UART_SetConfig+0x38c>)
 800302a:	fba3 2302 	umull	r2, r3, r3, r2
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	011e      	lsls	r6, r3, #4
 8003032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003034:	461c      	mov	r4, r3
 8003036:	f04f 0500 	mov.w	r5, #0
 800303a:	4622      	mov	r2, r4
 800303c:	462b      	mov	r3, r5
 800303e:	1891      	adds	r1, r2, r2
 8003040:	6339      	str	r1, [r7, #48]	; 0x30
 8003042:	415b      	adcs	r3, r3
 8003044:	637b      	str	r3, [r7, #52]	; 0x34
 8003046:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800304a:	1912      	adds	r2, r2, r4
 800304c:	eb45 0303 	adc.w	r3, r5, r3
 8003050:	f04f 0000 	mov.w	r0, #0
 8003054:	f04f 0100 	mov.w	r1, #0
 8003058:	00d9      	lsls	r1, r3, #3
 800305a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800305e:	00d0      	lsls	r0, r2, #3
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	1911      	adds	r1, r2, r4
 8003066:	65b9      	str	r1, [r7, #88]	; 0x58
 8003068:	416b      	adcs	r3, r5
 800306a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800306c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	461a      	mov	r2, r3
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	1891      	adds	r1, r2, r2
 8003078:	62b9      	str	r1, [r7, #40]	; 0x28
 800307a:	415b      	adcs	r3, r3
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800307e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003082:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003086:	f7fd f8b3 	bl	80001f0 <__aeabi_uldivmod>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4b8c      	ldr	r3, [pc, #560]	; (80032c0 <UART_SetConfig+0x38c>)
 8003090:	fba3 1302 	umull	r1, r3, r3, r2
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	2164      	movs	r1, #100	; 0x64
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	3332      	adds	r3, #50	; 0x32
 80030a2:	4a87      	ldr	r2, [pc, #540]	; (80032c0 <UART_SetConfig+0x38c>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030b0:	441e      	add	r6, r3
 80030b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b4:	4618      	mov	r0, r3
 80030b6:	f04f 0100 	mov.w	r1, #0
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	1894      	adds	r4, r2, r2
 80030c0:	623c      	str	r4, [r7, #32]
 80030c2:	415b      	adcs	r3, r3
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
 80030c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030ca:	1812      	adds	r2, r2, r0
 80030cc:	eb41 0303 	adc.w	r3, r1, r3
 80030d0:	f04f 0400 	mov.w	r4, #0
 80030d4:	f04f 0500 	mov.w	r5, #0
 80030d8:	00dd      	lsls	r5, r3, #3
 80030da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030de:	00d4      	lsls	r4, r2, #3
 80030e0:	4622      	mov	r2, r4
 80030e2:	462b      	mov	r3, r5
 80030e4:	1814      	adds	r4, r2, r0
 80030e6:	653c      	str	r4, [r7, #80]	; 0x50
 80030e8:	414b      	adcs	r3, r1
 80030ea:	657b      	str	r3, [r7, #84]	; 0x54
 80030ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	461a      	mov	r2, r3
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	1891      	adds	r1, r2, r2
 80030f8:	61b9      	str	r1, [r7, #24]
 80030fa:	415b      	adcs	r3, r3
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003102:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003106:	f7fd f873 	bl	80001f0 <__aeabi_uldivmod>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4b6c      	ldr	r3, [pc, #432]	; (80032c0 <UART_SetConfig+0x38c>)
 8003110:	fba3 1302 	umull	r1, r3, r3, r2
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	2164      	movs	r1, #100	; 0x64
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	3332      	adds	r3, #50	; 0x32
 8003122:	4a67      	ldr	r2, [pc, #412]	; (80032c0 <UART_SetConfig+0x38c>)
 8003124:	fba2 2303 	umull	r2, r3, r2, r3
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	f003 0207 	and.w	r2, r3, #7
 800312e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4432      	add	r2, r6
 8003134:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003136:	e0b9      	b.n	80032ac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800313a:	461c      	mov	r4, r3
 800313c:	f04f 0500 	mov.w	r5, #0
 8003140:	4622      	mov	r2, r4
 8003142:	462b      	mov	r3, r5
 8003144:	1891      	adds	r1, r2, r2
 8003146:	6139      	str	r1, [r7, #16]
 8003148:	415b      	adcs	r3, r3
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003150:	1912      	adds	r2, r2, r4
 8003152:	eb45 0303 	adc.w	r3, r5, r3
 8003156:	f04f 0000 	mov.w	r0, #0
 800315a:	f04f 0100 	mov.w	r1, #0
 800315e:	00d9      	lsls	r1, r3, #3
 8003160:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003164:	00d0      	lsls	r0, r2, #3
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	eb12 0804 	adds.w	r8, r2, r4
 800316e:	eb43 0905 	adc.w	r9, r3, r5
 8003172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4618      	mov	r0, r3
 8003178:	f04f 0100 	mov.w	r1, #0
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	008b      	lsls	r3, r1, #2
 8003186:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800318a:	0082      	lsls	r2, r0, #2
 800318c:	4640      	mov	r0, r8
 800318e:	4649      	mov	r1, r9
 8003190:	f7fd f82e 	bl	80001f0 <__aeabi_uldivmod>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4b49      	ldr	r3, [pc, #292]	; (80032c0 <UART_SetConfig+0x38c>)
 800319a:	fba3 2302 	umull	r2, r3, r3, r2
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	011e      	lsls	r6, r3, #4
 80031a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a4:	4618      	mov	r0, r3
 80031a6:	f04f 0100 	mov.w	r1, #0
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	1894      	adds	r4, r2, r2
 80031b0:	60bc      	str	r4, [r7, #8]
 80031b2:	415b      	adcs	r3, r3
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031ba:	1812      	adds	r2, r2, r0
 80031bc:	eb41 0303 	adc.w	r3, r1, r3
 80031c0:	f04f 0400 	mov.w	r4, #0
 80031c4:	f04f 0500 	mov.w	r5, #0
 80031c8:	00dd      	lsls	r5, r3, #3
 80031ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031ce:	00d4      	lsls	r4, r2, #3
 80031d0:	4622      	mov	r2, r4
 80031d2:	462b      	mov	r3, r5
 80031d4:	1814      	adds	r4, r2, r0
 80031d6:	64bc      	str	r4, [r7, #72]	; 0x48
 80031d8:	414b      	adcs	r3, r1
 80031da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f04f 0100 	mov.w	r1, #0
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	008b      	lsls	r3, r1, #2
 80031f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80031f4:	0082      	lsls	r2, r0, #2
 80031f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80031fa:	f7fc fff9 	bl	80001f0 <__aeabi_uldivmod>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4b2f      	ldr	r3, [pc, #188]	; (80032c0 <UART_SetConfig+0x38c>)
 8003204:	fba3 1302 	umull	r1, r3, r3, r2
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	2164      	movs	r1, #100	; 0x64
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	3332      	adds	r3, #50	; 0x32
 8003216:	4a2a      	ldr	r2, [pc, #168]	; (80032c0 <UART_SetConfig+0x38c>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003222:	441e      	add	r6, r3
 8003224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003226:	4618      	mov	r0, r3
 8003228:	f04f 0100 	mov.w	r1, #0
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	1894      	adds	r4, r2, r2
 8003232:	603c      	str	r4, [r7, #0]
 8003234:	415b      	adcs	r3, r3
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800323c:	1812      	adds	r2, r2, r0
 800323e:	eb41 0303 	adc.w	r3, r1, r3
 8003242:	f04f 0400 	mov.w	r4, #0
 8003246:	f04f 0500 	mov.w	r5, #0
 800324a:	00dd      	lsls	r5, r3, #3
 800324c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003250:	00d4      	lsls	r4, r2, #3
 8003252:	4622      	mov	r2, r4
 8003254:	462b      	mov	r3, r5
 8003256:	eb12 0a00 	adds.w	sl, r2, r0
 800325a:	eb43 0b01 	adc.w	fp, r3, r1
 800325e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4618      	mov	r0, r3
 8003264:	f04f 0100 	mov.w	r1, #0
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	008b      	lsls	r3, r1, #2
 8003272:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003276:	0082      	lsls	r2, r0, #2
 8003278:	4650      	mov	r0, sl
 800327a:	4659      	mov	r1, fp
 800327c:	f7fc ffb8 	bl	80001f0 <__aeabi_uldivmod>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <UART_SetConfig+0x38c>)
 8003286:	fba3 1302 	umull	r1, r3, r3, r2
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	2164      	movs	r1, #100	; 0x64
 800328e:	fb01 f303 	mul.w	r3, r1, r3
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	3332      	adds	r3, #50	; 0x32
 8003298:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <UART_SetConfig+0x38c>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	f003 020f 	and.w	r2, r3, #15
 80032a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4432      	add	r2, r6
 80032aa:	609a      	str	r2, [r3, #8]
}
 80032ac:	bf00      	nop
 80032ae:	377c      	adds	r7, #124	; 0x7c
 80032b0:	46bd      	mov	sp, r7
 80032b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032b6:	bf00      	nop
 80032b8:	40011000 	.word	0x40011000
 80032bc:	40011400 	.word	0x40011400
 80032c0:	51eb851f 	.word	0x51eb851f

080032c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80032c4:	b084      	sub	sp, #16
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b084      	sub	sp, #16
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	f107 001c 	add.w	r0, r7, #28
 80032d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80032d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d122      	bne.n	8003322 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80032f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003306:	2b01      	cmp	r3, #1
 8003308:	d105      	bne.n	8003316 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fa82 	bl	8003820 <USB_CoreReset>
 800331c:	4603      	mov	r3, r0
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	e01a      	b.n	8003358 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fa76 	bl	8003820 <USB_CoreReset>
 8003334:	4603      	mov	r3, r0
 8003336:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	639a      	str	r2, [r3, #56]	; 0x38
 800334a:	e005      	b.n	8003358 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003350:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335a:	2b01      	cmp	r3, #1
 800335c:	d10b      	bne.n	8003376 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f043 0206 	orr.w	r2, r3, #6
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f043 0220 	orr.w	r2, r3, #32
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003376:	7bfb      	ldrb	r3, [r7, #15]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003382:	b004      	add	sp, #16
 8003384:	4770      	bx	lr

08003386 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f023 0201 	bic.w	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d115      	bne.n	80033f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80033d6:	2001      	movs	r0, #1
 80033d8:	f7fd fd9c 	bl	8000f14 <HAL_Delay>
      ms++;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3301      	adds	r3, #1
 80033e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fa0e 	bl	8003804 <USB_GetMode>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d01e      	beq.n	800342c <USB_SetCurrentMode+0x84>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b31      	cmp	r3, #49	; 0x31
 80033f2:	d9f0      	bls.n	80033d6 <USB_SetCurrentMode+0x2e>
 80033f4:	e01a      	b.n	800342c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d115      	bne.n	8003428 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003408:	2001      	movs	r0, #1
 800340a:	f7fd fd83 	bl	8000f14 <HAL_Delay>
      ms++;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	3301      	adds	r3, #1
 8003412:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f9f5 	bl	8003804 <USB_GetMode>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <USB_SetCurrentMode+0x84>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b31      	cmp	r3, #49	; 0x31
 8003424:	d9f0      	bls.n	8003408 <USB_SetCurrentMode+0x60>
 8003426:	e001      	b.n	800342c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e005      	b.n	8003438 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b32      	cmp	r3, #50	; 0x32
 8003430:	d101      	bne.n	8003436 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003440:	b084      	sub	sp, #16
 8003442:	b580      	push	{r7, lr}
 8003444:	b086      	sub	sp, #24
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800344e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800345a:	2300      	movs	r3, #0
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	e009      	b.n	8003474 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	3340      	adds	r3, #64	; 0x40
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	2200      	movs	r2, #0
 800346c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	3301      	adds	r3, #1
 8003472:	613b      	str	r3, [r7, #16]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	2b0e      	cmp	r3, #14
 8003478:	d9f2      	bls.n	8003460 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800347a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800347c:	2b00      	cmp	r3, #0
 800347e:	d11c      	bne.n	80034ba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800348e:	f043 0302 	orr.w	r3, r3, #2
 8003492:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	639a      	str	r2, [r3, #56]	; 0x38
 80034b8:	e00b      	b.n	80034d2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80034d8:	461a      	mov	r2, r3
 80034da:	2300      	movs	r3, #0
 80034dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e4:	4619      	mov	r1, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ec:	461a      	mov	r2, r3
 80034ee:	680b      	ldr	r3, [r1, #0]
 80034f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d10c      	bne.n	8003512 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80034f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d104      	bne.n	8003508 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80034fe:	2100      	movs	r1, #0
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f945 	bl	8003790 <USB_SetDevSpeed>
 8003506:	e008      	b.n	800351a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003508:	2101      	movs	r1, #1
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f940 	bl	8003790 <USB_SetDevSpeed>
 8003510:	e003      	b.n	800351a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003512:	2103      	movs	r1, #3
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f93b 	bl	8003790 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800351a:	2110      	movs	r1, #16
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f8f3 	bl	8003708 <USB_FlushTxFifo>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f90f 	bl	8003750 <USB_FlushRxFifo>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003542:	461a      	mov	r2, r3
 8003544:	2300      	movs	r3, #0
 8003546:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800354e:	461a      	mov	r2, r3
 8003550:	2300      	movs	r3, #0
 8003552:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355a:	461a      	mov	r2, r3
 800355c:	2300      	movs	r3, #0
 800355e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003560:	2300      	movs	r3, #0
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	e043      	b.n	80035ee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003578:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800357c:	d118      	bne.n	80035b0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10a      	bne.n	800359a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003590:	461a      	mov	r2, r3
 8003592:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	e013      	b.n	80035c2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a6:	461a      	mov	r2, r3
 80035a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	e008      	b.n	80035c2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035bc:	461a      	mov	r2, r3
 80035be:	2300      	movs	r3, #0
 80035c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ce:	461a      	mov	r2, r3
 80035d0:	2300      	movs	r3, #0
 80035d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e0:	461a      	mov	r2, r3
 80035e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	3301      	adds	r3, #1
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d3b7      	bcc.n	8003566 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	e043      	b.n	8003684 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800360e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003612:	d118      	bne.n	8003646 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10a      	bne.n	8003630 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003626:	461a      	mov	r2, r3
 8003628:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	e013      	b.n	8003658 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363c:	461a      	mov	r2, r3
 800363e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	e008      	b.n	8003658 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003652:	461a      	mov	r2, r3
 8003654:	2300      	movs	r3, #0
 8003656:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003664:	461a      	mov	r2, r3
 8003666:	2300      	movs	r3, #0
 8003668:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4413      	add	r3, r2
 8003672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003676:	461a      	mov	r2, r3
 8003678:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800367c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	3301      	adds	r3, #1
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	429a      	cmp	r2, r3
 800368a:	d3b7      	bcc.n	80035fc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800369a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800369e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80036ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80036ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d105      	bne.n	80036c0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	f043 0210 	orr.w	r2, r3, #16
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699a      	ldr	r2, [r3, #24]
 80036c4:	4b0f      	ldr	r3, [pc, #60]	; (8003704 <USB_DevInit+0x2c4>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80036cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f043 0208 	orr.w	r2, r3, #8
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80036de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d107      	bne.n	80036f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036ec:	f043 0304 	orr.w	r3, r3, #4
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80036f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003700:	b004      	add	sp, #16
 8003702:	4770      	bx	lr
 8003704:	803c3800 	.word	0x803c3800

08003708 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	019b      	lsls	r3, r3, #6
 800371a:	f043 0220 	orr.w	r2, r3, #32
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3301      	adds	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	4a08      	ldr	r2, [pc, #32]	; (800374c <USB_FlushTxFifo+0x44>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e006      	b.n	8003740 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b20      	cmp	r3, #32
 800373c:	d0f1      	beq.n	8003722 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	00030d40 	.word	0x00030d40

08003750 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2210      	movs	r2, #16
 8003760:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3301      	adds	r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	4a08      	ldr	r2, [pc, #32]	; (800378c <USB_FlushRxFifo+0x3c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d901      	bls.n	8003772 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e006      	b.n	8003780 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0310 	and.w	r3, r3, #16
 800377a:	2b10      	cmp	r3, #16
 800377c:	d0f1      	beq.n	8003762 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	00030d40 	.word	0x00030d40

08003790 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	68f9      	ldr	r1, [r7, #12]
 80037ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037b0:	4313      	orrs	r3, r2
 80037b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b085      	sub	sp, #20
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80037dc:	f023 0303 	bic.w	r3, r3, #3
 80037e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037f0:	f043 0302 	orr.w	r3, r3, #2
 80037f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f003 0301 	and.w	r3, r3, #1
}
 8003814:	4618      	mov	r0, r3
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	3301      	adds	r3, #1
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	4a13      	ldr	r2, [pc, #76]	; (8003880 <USB_CoreReset+0x60>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d901      	bls.n	800383c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e01a      	b.n	8003872 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	2b00      	cmp	r3, #0
 8003842:	daf3      	bge.n	800382c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	f043 0201 	orr.w	r2, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	3301      	adds	r3, #1
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	4a09      	ldr	r2, [pc, #36]	; (8003880 <USB_CoreReset+0x60>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d901      	bls.n	8003864 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e006      	b.n	8003872 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b01      	cmp	r3, #1
 800386e:	d0f1      	beq.n	8003854 <USB_CoreReset+0x34>

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	00030d40 	.word	0x00030d40

08003884 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003896:	2b84      	cmp	r3, #132	; 0x84
 8003898:	d005      	beq.n	80038a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800389a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4413      	add	r3, r2
 80038a2:	3303      	adds	r3, #3
 80038a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80038a6:	68fb      	ldr	r3, [r7, #12]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80038b8:	f000 fafa 	bl	8003eb0 <vTaskStartScheduler>
  
  return osOK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80038c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c4:	b089      	sub	sp, #36	; 0x24
 80038c6:	af04      	add	r7, sp, #16
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d020      	beq.n	8003916 <osThreadCreate+0x54>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01c      	beq.n	8003916 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685c      	ldr	r4, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681d      	ldr	r5, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691e      	ldr	r6, [r3, #16]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff ffc8 	bl	8003884 <makeFreeRtosPriority>
 80038f4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038fe:	9202      	str	r2, [sp, #8]
 8003900:	9301      	str	r3, [sp, #4]
 8003902:	9100      	str	r1, [sp, #0]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	4632      	mov	r2, r6
 8003908:	4629      	mov	r1, r5
 800390a:	4620      	mov	r0, r4
 800390c:	f000 f8ac 	bl	8003a68 <xTaskCreateStatic>
 8003910:	4603      	mov	r3, r0
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	e01c      	b.n	8003950 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685c      	ldr	r4, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003922:	b29e      	uxth	r6, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff ffaa 	bl	8003884 <makeFreeRtosPriority>
 8003930:	4602      	mov	r2, r0
 8003932:	f107 030c 	add.w	r3, r7, #12
 8003936:	9301      	str	r3, [sp, #4]
 8003938:	9200      	str	r2, [sp, #0]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	4632      	mov	r2, r6
 800393e:	4629      	mov	r1, r5
 8003940:	4620      	mov	r0, r4
 8003942:	f000 f8ee 	bl	8003b22 <xTaskCreate>
 8003946:	4603      	mov	r3, r0
 8003948:	2b01      	cmp	r3, #1
 800394a:	d001      	beq.n	8003950 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800394c:	2300      	movs	r3, #0
 800394e:	e000      	b.n	8003952 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003950:	68fb      	ldr	r3, [r7, #12]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800395a <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fa14 	bl	8003d90 <vTaskDelete>
  return osOK;
 8003968:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f103 0208 	add.w	r2, r3, #8
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f04f 32ff 	mov.w	r2, #4294967295
 800398a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f103 0208 	add.w	r2, r3, #8
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f103 0208 	add.w	r2, r3, #8
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	601a      	str	r2, [r3, #0]
}
 8003a08:	bf00      	nop
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6892      	ldr	r2, [r2, #8]
 8003a2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6852      	ldr	r2, [r2, #4]
 8003a34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d103      	bne.n	8003a48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	1e5a      	subs	r2, r3, #1
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08e      	sub	sp, #56	; 0x38
 8003a6c:	af04      	add	r7, sp, #16
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10a      	bne.n	8003a92 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a8e:	bf00      	nop
 8003a90:	e7fe      	b.n	8003a90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10a      	bne.n	8003aae <xTaskCreateStatic+0x46>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	61fb      	str	r3, [r7, #28]
}
 8003aaa:	bf00      	nop
 8003aac:	e7fe      	b.n	8003aac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003aae:	2354      	movs	r3, #84	; 0x54
 8003ab0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b54      	cmp	r3, #84	; 0x54
 8003ab6:	d00a      	beq.n	8003ace <xTaskCreateStatic+0x66>
	__asm volatile
 8003ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abc:	f383 8811 	msr	BASEPRI, r3
 8003ac0:	f3bf 8f6f 	isb	sy
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	61bb      	str	r3, [r7, #24]
}
 8003aca:	bf00      	nop
 8003acc:	e7fe      	b.n	8003acc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ace:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d01e      	beq.n	8003b14 <xTaskCreateStatic+0xac>
 8003ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d01b      	beq.n	8003b14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ae4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	2202      	movs	r2, #2
 8003aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003aee:	2300      	movs	r3, #0
 8003af0:	9303      	str	r3, [sp, #12]
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	9302      	str	r3, [sp, #8]
 8003af6:	f107 0314 	add.w	r3, r7, #20
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 f850 	bl	8003bac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b0e:	f000 f8d5 	bl	8003cbc <prvAddNewTaskToReadyList>
 8003b12:	e001      	b.n	8003b18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b18:	697b      	ldr	r3, [r7, #20]
	}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3728      	adds	r7, #40	; 0x28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b08c      	sub	sp, #48	; 0x30
 8003b26:	af04      	add	r7, sp, #16
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	603b      	str	r3, [r7, #0]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 febe 	bl	80048b8 <pvPortMalloc>
 8003b3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00e      	beq.n	8003b62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b44:	2054      	movs	r0, #84	; 0x54
 8003b46:	f000 feb7 	bl	80048b8 <pvPortMalloc>
 8003b4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
 8003b58:	e005      	b.n	8003b66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b5a:	6978      	ldr	r0, [r7, #20]
 8003b5c:	f000 ff78 	bl	8004a50 <vPortFree>
 8003b60:	e001      	b.n	8003b66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d017      	beq.n	8003b9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b74:	88fa      	ldrh	r2, [r7, #6]
 8003b76:	2300      	movs	r3, #0
 8003b78:	9303      	str	r3, [sp, #12]
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	9302      	str	r3, [sp, #8]
 8003b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b80:	9301      	str	r3, [sp, #4]
 8003b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f80e 	bl	8003bac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b90:	69f8      	ldr	r0, [r7, #28]
 8003b92:	f000 f893 	bl	8003cbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b96:	2301      	movs	r3, #1
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	e002      	b.n	8003ba2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ba2:	69bb      	ldr	r3, [r7, #24]
	}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3720      	adds	r7, #32
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
 8003bb8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	f023 0307 	bic.w	r3, r3, #7
 8003bd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	617b      	str	r3, [r7, #20]
}
 8003bf0:	bf00      	nop
 8003bf2:	e7fe      	b.n	8003bf2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d01f      	beq.n	8003c3a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
 8003bfe:	e012      	b.n	8003c26 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	4413      	add	r3, r2
 8003c06:	7819      	ldrb	r1, [r3, #0]
 8003c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3334      	adds	r3, #52	; 0x34
 8003c10:	460a      	mov	r2, r1
 8003c12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	4413      	add	r3, r2
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d006      	beq.n	8003c2e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	3301      	adds	r3, #1
 8003c24:	61fb      	str	r3, [r7, #28]
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	2b0f      	cmp	r3, #15
 8003c2a:	d9e9      	bls.n	8003c00 <prvInitialiseNewTask+0x54>
 8003c2c:	e000      	b.n	8003c30 <prvInitialiseNewTask+0x84>
			{
				break;
 8003c2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c38:	e003      	b.n	8003c42 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	2b06      	cmp	r3, #6
 8003c46:	d901      	bls.n	8003c4c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c48:	2306      	movs	r3, #6
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c56:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c60:	3304      	adds	r3, #4
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff fea5 	bl	80039b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	3318      	adds	r3, #24
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff fea0 	bl	80039b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7a:	f1c3 0207 	rsb	r2, r3, #7
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	68f9      	ldr	r1, [r7, #12]
 8003c9a:	69b8      	ldr	r0, [r7, #24]
 8003c9c:	f000 fbfe 	bl	800449c <pxPortInitialiseStack>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cb2:	bf00      	nop
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003cc4:	f000 fd16 	bl	80046f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003cc8:	4b2a      	ldr	r3, [pc, #168]	; (8003d74 <prvAddNewTaskToReadyList+0xb8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	4a29      	ldr	r2, [pc, #164]	; (8003d74 <prvAddNewTaskToReadyList+0xb8>)
 8003cd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cd2:	4b29      	ldr	r3, [pc, #164]	; (8003d78 <prvAddNewTaskToReadyList+0xbc>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cda:	4a27      	ldr	r2, [pc, #156]	; (8003d78 <prvAddNewTaskToReadyList+0xbc>)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ce0:	4b24      	ldr	r3, [pc, #144]	; (8003d74 <prvAddNewTaskToReadyList+0xb8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d110      	bne.n	8003d0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ce8:	f000 fb1a 	bl	8004320 <prvInitialiseTaskLists>
 8003cec:	e00d      	b.n	8003d0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cee:	4b23      	ldr	r3, [pc, #140]	; (8003d7c <prvAddNewTaskToReadyList+0xc0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cf6:	4b20      	ldr	r3, [pc, #128]	; (8003d78 <prvAddNewTaskToReadyList+0xbc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d802      	bhi.n	8003d0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d04:	4a1c      	ldr	r2, [pc, #112]	; (8003d78 <prvAddNewTaskToReadyList+0xbc>)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d0a:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <prvAddNewTaskToReadyList+0xc4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	4a1b      	ldr	r2, [pc, #108]	; (8003d80 <prvAddNewTaskToReadyList+0xc4>)
 8003d12:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	2201      	movs	r2, #1
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	4b19      	ldr	r3, [pc, #100]	; (8003d84 <prvAddNewTaskToReadyList+0xc8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	4a18      	ldr	r2, [pc, #96]	; (8003d84 <prvAddNewTaskToReadyList+0xc8>)
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4a15      	ldr	r2, [pc, #84]	; (8003d88 <prvAddNewTaskToReadyList+0xcc>)
 8003d34:	441a      	add	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	f7ff fe45 	bl	80039cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d42:	f000 fd07 	bl	8004754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d46:	4b0d      	ldr	r3, [pc, #52]	; (8003d7c <prvAddNewTaskToReadyList+0xc0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00e      	beq.n	8003d6c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <prvAddNewTaskToReadyList+0xbc>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d207      	bcs.n	8003d6c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <prvAddNewTaskToReadyList+0xd0>)
 8003d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d6c:	bf00      	nop
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20000380 	.word	0x20000380
 8003d78:	20000280 	.word	0x20000280
 8003d7c:	2000038c 	.word	0x2000038c
 8003d80:	2000039c 	.word	0x2000039c
 8003d84:	20000388 	.word	0x20000388
 8003d88:	20000284 	.word	0x20000284
 8003d8c:	e000ed04 	.word	0xe000ed04

08003d90 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003d98:	f000 fcac 	bl	80046f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d102      	bne.n	8003da8 <vTaskDelete+0x18>
 8003da2:	4b39      	ldr	r3, [pc, #228]	; (8003e88 <vTaskDelete+0xf8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	e000      	b.n	8003daa <vTaskDelete+0x1a>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff fe2f 	bl	8003a14 <uxListRemove>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d115      	bne.n	8003de8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc0:	4932      	ldr	r1, [pc, #200]	; (8003e8c <vTaskDelete+0xfc>)
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <vTaskDelete+0x58>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43da      	mvns	r2, r3
 8003dde:	4b2c      	ldr	r3, [pc, #176]	; (8003e90 <vTaskDelete+0x100>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4013      	ands	r3, r2
 8003de4:	4a2a      	ldr	r2, [pc, #168]	; (8003e90 <vTaskDelete+0x100>)
 8003de6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d004      	beq.n	8003dfa <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	3318      	adds	r3, #24
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fe0d 	bl	8003a14 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003dfa:	4b26      	ldr	r3, [pc, #152]	; (8003e94 <vTaskDelete+0x104>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	4a24      	ldr	r2, [pc, #144]	; (8003e94 <vTaskDelete+0x104>)
 8003e02:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003e04:	4b20      	ldr	r3, [pc, #128]	; (8003e88 <vTaskDelete+0xf8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d10b      	bne.n	8003e26 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3304      	adds	r3, #4
 8003e12:	4619      	mov	r1, r3
 8003e14:	4820      	ldr	r0, [pc, #128]	; (8003e98 <vTaskDelete+0x108>)
 8003e16:	f7ff fdd9 	bl	80039cc <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003e1a:	4b20      	ldr	r3, [pc, #128]	; (8003e9c <vTaskDelete+0x10c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	4a1e      	ldr	r2, [pc, #120]	; (8003e9c <vTaskDelete+0x10c>)
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	e009      	b.n	8003e3a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003e26:	4b1e      	ldr	r3, [pc, #120]	; (8003ea0 <vTaskDelete+0x110>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ea0 <vTaskDelete+0x110>)
 8003e2e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 fae3 	bl	80043fc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003e36:	f000 fb11 	bl	800445c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003e3a:	f000 fc8b 	bl	8004754 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003e3e:	4b19      	ldr	r3, [pc, #100]	; (8003ea4 <vTaskDelete+0x114>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01b      	beq.n	8003e7e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <vTaskDelete+0xf8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d116      	bne.n	8003e7e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003e50:	4b15      	ldr	r3, [pc, #84]	; (8003ea8 <vTaskDelete+0x118>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <vTaskDelete+0xde>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	60bb      	str	r3, [r7, #8]
}
 8003e6a:	bf00      	nop
 8003e6c:	e7fe      	b.n	8003e6c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <vTaskDelete+0x11c>)
 8003e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20000280 	.word	0x20000280
 8003e8c:	20000284 	.word	0x20000284
 8003e90:	20000388 	.word	0x20000388
 8003e94:	2000039c 	.word	0x2000039c
 8003e98:	20000354 	.word	0x20000354
 8003e9c:	20000368 	.word	0x20000368
 8003ea0:	20000380 	.word	0x20000380
 8003ea4:	2000038c 	.word	0x2000038c
 8003ea8:	200003a8 	.word	0x200003a8
 8003eac:	e000ed04 	.word	0xe000ed04

08003eb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08a      	sub	sp, #40	; 0x28
 8003eb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ebe:	463a      	mov	r2, r7
 8003ec0:	1d39      	adds	r1, r7, #4
 8003ec2:	f107 0308 	add.w	r3, r7, #8
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fc fb0e 	bl	80004e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ecc:	6839      	ldr	r1, [r7, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	9202      	str	r2, [sp, #8]
 8003ed4:	9301      	str	r3, [sp, #4]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	2300      	movs	r3, #0
 8003edc:	460a      	mov	r2, r1
 8003ede:	491e      	ldr	r1, [pc, #120]	; (8003f58 <vTaskStartScheduler+0xa8>)
 8003ee0:	481e      	ldr	r0, [pc, #120]	; (8003f5c <vTaskStartScheduler+0xac>)
 8003ee2:	f7ff fdc1 	bl	8003a68 <xTaskCreateStatic>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	4a1d      	ldr	r2, [pc, #116]	; (8003f60 <vTaskStartScheduler+0xb0>)
 8003eea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003eec:	4b1c      	ldr	r3, [pc, #112]	; (8003f60 <vTaskStartScheduler+0xb0>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	e001      	b.n	8003efe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d116      	bne.n	8003f32 <vTaskStartScheduler+0x82>
	__asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	613b      	str	r3, [r7, #16]
}
 8003f16:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f18:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <vTaskStartScheduler+0xb4>)
 8003f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f20:	4b11      	ldr	r3, [pc, #68]	; (8003f68 <vTaskStartScheduler+0xb8>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f26:	4b11      	ldr	r3, [pc, #68]	; (8003f6c <vTaskStartScheduler+0xbc>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f2c:	f000 fb40 	bl	80045b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f30:	e00e      	b.n	8003f50 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f38:	d10a      	bne.n	8003f50 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	60fb      	str	r3, [r7, #12]
}
 8003f4c:	bf00      	nop
 8003f4e:	e7fe      	b.n	8003f4e <vTaskStartScheduler+0x9e>
}
 8003f50:	bf00      	nop
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	08004d44 	.word	0x08004d44
 8003f5c:	080042ed 	.word	0x080042ed
 8003f60:	200003a4 	.word	0x200003a4
 8003f64:	200003a0 	.word	0x200003a0
 8003f68:	2000038c 	.word	0x2000038c
 8003f6c:	20000384 	.word	0x20000384

08003f70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003f74:	4b04      	ldr	r3, [pc, #16]	; (8003f88 <vTaskSuspendAll+0x18>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	4a03      	ldr	r2, [pc, #12]	; (8003f88 <vTaskSuspendAll+0x18>)
 8003f7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003f7e:	bf00      	nop
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	200003a8 	.word	0x200003a8

08003f8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f9a:	4b41      	ldr	r3, [pc, #260]	; (80040a0 <xTaskResumeAll+0x114>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	603b      	str	r3, [r7, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	e7fe      	b.n	8003fb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003fb8:	f000 fb9c 	bl	80046f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003fbc:	4b38      	ldr	r3, [pc, #224]	; (80040a0 <xTaskResumeAll+0x114>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	4a37      	ldr	r2, [pc, #220]	; (80040a0 <xTaskResumeAll+0x114>)
 8003fc4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fc6:	4b36      	ldr	r3, [pc, #216]	; (80040a0 <xTaskResumeAll+0x114>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d161      	bne.n	8004092 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003fce:	4b35      	ldr	r3, [pc, #212]	; (80040a4 <xTaskResumeAll+0x118>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d05d      	beq.n	8004092 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fd6:	e02e      	b.n	8004036 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fd8:	4b33      	ldr	r3, [pc, #204]	; (80040a8 <xTaskResumeAll+0x11c>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3318      	adds	r3, #24
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff fd15 	bl	8003a14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3304      	adds	r3, #4
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff fd10 	bl	8003a14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	4b2b      	ldr	r3, [pc, #172]	; (80040ac <xTaskResumeAll+0x120>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4313      	orrs	r3, r2
 8004002:	4a2a      	ldr	r2, [pc, #168]	; (80040ac <xTaskResumeAll+0x120>)
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4a27      	ldr	r2, [pc, #156]	; (80040b0 <xTaskResumeAll+0x124>)
 8004014:	441a      	add	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3304      	adds	r3, #4
 800401a:	4619      	mov	r1, r3
 800401c:	4610      	mov	r0, r2
 800401e:	f7ff fcd5 	bl	80039cc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004026:	4b23      	ldr	r3, [pc, #140]	; (80040b4 <xTaskResumeAll+0x128>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	429a      	cmp	r2, r3
 800402e:	d302      	bcc.n	8004036 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004030:	4b21      	ldr	r3, [pc, #132]	; (80040b8 <xTaskResumeAll+0x12c>)
 8004032:	2201      	movs	r2, #1
 8004034:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004036:	4b1c      	ldr	r3, [pc, #112]	; (80040a8 <xTaskResumeAll+0x11c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1cc      	bne.n	8003fd8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004044:	f000 fa0a 	bl	800445c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004048:	4b1c      	ldr	r3, [pc, #112]	; (80040bc <xTaskResumeAll+0x130>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d010      	beq.n	8004076 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004054:	f000 f836 	bl	80040c4 <xTaskIncrementTick>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800405e:	4b16      	ldr	r3, [pc, #88]	; (80040b8 <xTaskResumeAll+0x12c>)
 8004060:	2201      	movs	r2, #1
 8004062:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3b01      	subs	r3, #1
 8004068:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1f1      	bne.n	8004054 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004070:	4b12      	ldr	r3, [pc, #72]	; (80040bc <xTaskResumeAll+0x130>)
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004076:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <xTaskResumeAll+0x12c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800407e:	2301      	movs	r3, #1
 8004080:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004082:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <xTaskResumeAll+0x134>)
 8004084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004092:	f000 fb5f 	bl	8004754 <vPortExitCritical>

	return xAlreadyYielded;
 8004096:	68bb      	ldr	r3, [r7, #8]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	200003a8 	.word	0x200003a8
 80040a4:	20000380 	.word	0x20000380
 80040a8:	20000340 	.word	0x20000340
 80040ac:	20000388 	.word	0x20000388
 80040b0:	20000284 	.word	0x20000284
 80040b4:	20000280 	.word	0x20000280
 80040b8:	20000394 	.word	0x20000394
 80040bc:	20000390 	.word	0x20000390
 80040c0:	e000ed04 	.word	0xe000ed04

080040c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040ce:	4b4e      	ldr	r3, [pc, #312]	; (8004208 <xTaskIncrementTick+0x144>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f040 808e 	bne.w	80041f4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040d8:	4b4c      	ldr	r3, [pc, #304]	; (800420c <xTaskIncrementTick+0x148>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3301      	adds	r3, #1
 80040de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040e0:	4a4a      	ldr	r2, [pc, #296]	; (800420c <xTaskIncrementTick+0x148>)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d120      	bne.n	800412e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80040ec:	4b48      	ldr	r3, [pc, #288]	; (8004210 <xTaskIncrementTick+0x14c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <xTaskIncrementTick+0x48>
	__asm volatile
 80040f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fa:	f383 8811 	msr	BASEPRI, r3
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	603b      	str	r3, [r7, #0]
}
 8004108:	bf00      	nop
 800410a:	e7fe      	b.n	800410a <xTaskIncrementTick+0x46>
 800410c:	4b40      	ldr	r3, [pc, #256]	; (8004210 <xTaskIncrementTick+0x14c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	4b40      	ldr	r3, [pc, #256]	; (8004214 <xTaskIncrementTick+0x150>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a3e      	ldr	r2, [pc, #248]	; (8004210 <xTaskIncrementTick+0x14c>)
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	4a3e      	ldr	r2, [pc, #248]	; (8004214 <xTaskIncrementTick+0x150>)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	4b3d      	ldr	r3, [pc, #244]	; (8004218 <xTaskIncrementTick+0x154>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3301      	adds	r3, #1
 8004126:	4a3c      	ldr	r2, [pc, #240]	; (8004218 <xTaskIncrementTick+0x154>)
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	f000 f997 	bl	800445c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800412e:	4b3b      	ldr	r3, [pc, #236]	; (800421c <xTaskIncrementTick+0x158>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	429a      	cmp	r2, r3
 8004136:	d348      	bcc.n	80041ca <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004138:	4b35      	ldr	r3, [pc, #212]	; (8004210 <xTaskIncrementTick+0x14c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d104      	bne.n	800414c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004142:	4b36      	ldr	r3, [pc, #216]	; (800421c <xTaskIncrementTick+0x158>)
 8004144:	f04f 32ff 	mov.w	r2, #4294967295
 8004148:	601a      	str	r2, [r3, #0]
					break;
 800414a:	e03e      	b.n	80041ca <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800414c:	4b30      	ldr	r3, [pc, #192]	; (8004210 <xTaskIncrementTick+0x14c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	429a      	cmp	r2, r3
 8004162:	d203      	bcs.n	800416c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004164:	4a2d      	ldr	r2, [pc, #180]	; (800421c <xTaskIncrementTick+0x158>)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800416a:	e02e      	b.n	80041ca <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	3304      	adds	r3, #4
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff fc4f 	bl	8003a14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417a:	2b00      	cmp	r3, #0
 800417c:	d004      	beq.n	8004188 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	3318      	adds	r3, #24
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff fc46 	bl	8003a14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	2201      	movs	r2, #1
 800418e:	409a      	lsls	r2, r3
 8004190:	4b23      	ldr	r3, [pc, #140]	; (8004220 <xTaskIncrementTick+0x15c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4313      	orrs	r3, r2
 8004196:	4a22      	ldr	r2, [pc, #136]	; (8004220 <xTaskIncrementTick+0x15c>)
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4a1f      	ldr	r2, [pc, #124]	; (8004224 <xTaskIncrementTick+0x160>)
 80041a8:	441a      	add	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	3304      	adds	r3, #4
 80041ae:	4619      	mov	r1, r3
 80041b0:	4610      	mov	r0, r2
 80041b2:	f7ff fc0b 	bl	80039cc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ba:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <xTaskIncrementTick+0x164>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d3b9      	bcc.n	8004138 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80041c4:	2301      	movs	r3, #1
 80041c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041c8:	e7b6      	b.n	8004138 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041ca:	4b17      	ldr	r3, [pc, #92]	; (8004228 <xTaskIncrementTick+0x164>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d0:	4914      	ldr	r1, [pc, #80]	; (8004224 <xTaskIncrementTick+0x160>)
 80041d2:	4613      	mov	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d901      	bls.n	80041e6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80041e2:	2301      	movs	r3, #1
 80041e4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80041e6:	4b11      	ldr	r3, [pc, #68]	; (800422c <xTaskIncrementTick+0x168>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d007      	beq.n	80041fe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80041ee:	2301      	movs	r3, #1
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	e004      	b.n	80041fe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80041f4:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <xTaskIncrementTick+0x16c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3301      	adds	r3, #1
 80041fa:	4a0d      	ldr	r2, [pc, #52]	; (8004230 <xTaskIncrementTick+0x16c>)
 80041fc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80041fe:	697b      	ldr	r3, [r7, #20]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	200003a8 	.word	0x200003a8
 800420c:	20000384 	.word	0x20000384
 8004210:	20000338 	.word	0x20000338
 8004214:	2000033c 	.word	0x2000033c
 8004218:	20000398 	.word	0x20000398
 800421c:	200003a0 	.word	0x200003a0
 8004220:	20000388 	.word	0x20000388
 8004224:	20000284 	.word	0x20000284
 8004228:	20000280 	.word	0x20000280
 800422c:	20000394 	.word	0x20000394
 8004230:	20000390 	.word	0x20000390

08004234 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800423a:	4b27      	ldr	r3, [pc, #156]	; (80042d8 <vTaskSwitchContext+0xa4>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004242:	4b26      	ldr	r3, [pc, #152]	; (80042dc <vTaskSwitchContext+0xa8>)
 8004244:	2201      	movs	r2, #1
 8004246:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004248:	e03f      	b.n	80042ca <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800424a:	4b24      	ldr	r3, [pc, #144]	; (80042dc <vTaskSwitchContext+0xa8>)
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004250:	4b23      	ldr	r3, [pc, #140]	; (80042e0 <vTaskSwitchContext+0xac>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	fab3 f383 	clz	r3, r3
 800425c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800425e:	7afb      	ldrb	r3, [r7, #11]
 8004260:	f1c3 031f 	rsb	r3, r3, #31
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	491f      	ldr	r1, [pc, #124]	; (80042e4 <vTaskSwitchContext+0xb0>)
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	4613      	mov	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10a      	bne.n	8004290 <vTaskSwitchContext+0x5c>
	__asm volatile
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	607b      	str	r3, [r7, #4]
}
 800428c:	bf00      	nop
 800428e:	e7fe      	b.n	800428e <vTaskSwitchContext+0x5a>
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4a12      	ldr	r2, [pc, #72]	; (80042e4 <vTaskSwitchContext+0xb0>)
 800429c:	4413      	add	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	605a      	str	r2, [r3, #4]
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	3308      	adds	r3, #8
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d104      	bne.n	80042c0 <vTaskSwitchContext+0x8c>
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	605a      	str	r2, [r3, #4]
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	4a08      	ldr	r2, [pc, #32]	; (80042e8 <vTaskSwitchContext+0xb4>)
 80042c8:	6013      	str	r3, [r2, #0]
}
 80042ca:	bf00      	nop
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	200003a8 	.word	0x200003a8
 80042dc:	20000394 	.word	0x20000394
 80042e0:	20000388 	.word	0x20000388
 80042e4:	20000284 	.word	0x20000284
 80042e8:	20000280 	.word	0x20000280

080042ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042f4:	f000 f854 	bl	80043a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042f8:	4b07      	ldr	r3, [pc, #28]	; (8004318 <prvIdleTask+0x2c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d907      	bls.n	8004310 <prvIdleTask+0x24>
			{
				taskYIELD();
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <prvIdleTask+0x30>)
 8004302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8004310:	f7fc face 	bl	80008b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8004314:	e7ee      	b.n	80042f4 <prvIdleTask+0x8>
 8004316:	bf00      	nop
 8004318:	20000284 	.word	0x20000284
 800431c:	e000ed04 	.word	0xe000ed04

08004320 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004326:	2300      	movs	r3, #0
 8004328:	607b      	str	r3, [r7, #4]
 800432a:	e00c      	b.n	8004346 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4a12      	ldr	r2, [pc, #72]	; (8004380 <prvInitialiseTaskLists+0x60>)
 8004338:	4413      	add	r3, r2
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fb19 	bl	8003972 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3301      	adds	r3, #1
 8004344:	607b      	str	r3, [r7, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b06      	cmp	r3, #6
 800434a:	d9ef      	bls.n	800432c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800434c:	480d      	ldr	r0, [pc, #52]	; (8004384 <prvInitialiseTaskLists+0x64>)
 800434e:	f7ff fb10 	bl	8003972 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004352:	480d      	ldr	r0, [pc, #52]	; (8004388 <prvInitialiseTaskLists+0x68>)
 8004354:	f7ff fb0d 	bl	8003972 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004358:	480c      	ldr	r0, [pc, #48]	; (800438c <prvInitialiseTaskLists+0x6c>)
 800435a:	f7ff fb0a 	bl	8003972 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800435e:	480c      	ldr	r0, [pc, #48]	; (8004390 <prvInitialiseTaskLists+0x70>)
 8004360:	f7ff fb07 	bl	8003972 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004364:	480b      	ldr	r0, [pc, #44]	; (8004394 <prvInitialiseTaskLists+0x74>)
 8004366:	f7ff fb04 	bl	8003972 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800436a:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <prvInitialiseTaskLists+0x78>)
 800436c:	4a05      	ldr	r2, [pc, #20]	; (8004384 <prvInitialiseTaskLists+0x64>)
 800436e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004370:	4b0a      	ldr	r3, [pc, #40]	; (800439c <prvInitialiseTaskLists+0x7c>)
 8004372:	4a05      	ldr	r2, [pc, #20]	; (8004388 <prvInitialiseTaskLists+0x68>)
 8004374:	601a      	str	r2, [r3, #0]
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20000284 	.word	0x20000284
 8004384:	20000310 	.word	0x20000310
 8004388:	20000324 	.word	0x20000324
 800438c:	20000340 	.word	0x20000340
 8004390:	20000354 	.word	0x20000354
 8004394:	2000036c 	.word	0x2000036c
 8004398:	20000338 	.word	0x20000338
 800439c:	2000033c 	.word	0x2000033c

080043a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043a6:	e019      	b.n	80043dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043a8:	f000 f9a4 	bl	80046f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ac:	4b10      	ldr	r3, [pc, #64]	; (80043f0 <prvCheckTasksWaitingTermination+0x50>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff fb2b 	bl	8003a14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043be:	4b0d      	ldr	r3, [pc, #52]	; (80043f4 <prvCheckTasksWaitingTermination+0x54>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	4a0b      	ldr	r2, [pc, #44]	; (80043f4 <prvCheckTasksWaitingTermination+0x54>)
 80043c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043c8:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <prvCheckTasksWaitingTermination+0x58>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	4a0a      	ldr	r2, [pc, #40]	; (80043f8 <prvCheckTasksWaitingTermination+0x58>)
 80043d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043d2:	f000 f9bf 	bl	8004754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f810 	bl	80043fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043dc:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <prvCheckTasksWaitingTermination+0x58>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e1      	bne.n	80043a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043e4:	bf00      	nop
 80043e6:	bf00      	nop
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20000354 	.word	0x20000354
 80043f4:	20000380 	.word	0x20000380
 80043f8:	20000368 	.word	0x20000368

080043fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800440a:	2b00      	cmp	r3, #0
 800440c:	d108      	bne.n	8004420 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fb1c 	bl	8004a50 <vPortFree>
				vPortFree( pxTCB );
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 fb19 	bl	8004a50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800441e:	e018      	b.n	8004452 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004426:	2b01      	cmp	r3, #1
 8004428:	d103      	bne.n	8004432 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fb10 	bl	8004a50 <vPortFree>
	}
 8004430:	e00f      	b.n	8004452 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004438:	2b02      	cmp	r3, #2
 800443a:	d00a      	beq.n	8004452 <prvDeleteTCB+0x56>
	__asm volatile
 800443c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	60fb      	str	r3, [r7, #12]
}
 800444e:	bf00      	nop
 8004450:	e7fe      	b.n	8004450 <prvDeleteTCB+0x54>
	}
 8004452:	bf00      	nop
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004462:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <prvResetNextTaskUnblockTime+0x38>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d104      	bne.n	8004476 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800446c:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <prvResetNextTaskUnblockTime+0x3c>)
 800446e:	f04f 32ff 	mov.w	r2, #4294967295
 8004472:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004474:	e008      	b.n	8004488 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004476:	4b07      	ldr	r3, [pc, #28]	; (8004494 <prvResetNextTaskUnblockTime+0x38>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	4a04      	ldr	r2, [pc, #16]	; (8004498 <prvResetNextTaskUnblockTime+0x3c>)
 8004486:	6013      	str	r3, [r2, #0]
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	20000338 	.word	0x20000338
 8004498:	200003a0 	.word	0x200003a0

0800449c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3b04      	subs	r3, #4
 80044ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3b04      	subs	r3, #4
 80044ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f023 0201 	bic.w	r2, r3, #1
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3b04      	subs	r3, #4
 80044ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044cc:	4a0c      	ldr	r2, [pc, #48]	; (8004500 <pxPortInitialiseStack+0x64>)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3b14      	subs	r3, #20
 80044d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3b04      	subs	r3, #4
 80044e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f06f 0202 	mvn.w	r2, #2
 80044ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3b20      	subs	r3, #32
 80044f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044f2:	68fb      	ldr	r3, [r7, #12]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	08004505 	.word	0x08004505

08004504 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800450e:	4b12      	ldr	r3, [pc, #72]	; (8004558 <prvTaskExitError+0x54>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004516:	d00a      	beq.n	800452e <prvTaskExitError+0x2a>
	__asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	60fb      	str	r3, [r7, #12]
}
 800452a:	bf00      	nop
 800452c:	e7fe      	b.n	800452c <prvTaskExitError+0x28>
	__asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	60bb      	str	r3, [r7, #8]
}
 8004540:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004542:	bf00      	nop
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0fc      	beq.n	8004544 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800454a:	bf00      	nop
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	2000000c 	.word	0x2000000c
 800455c:	00000000 	.word	0x00000000

08004560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004560:	4b07      	ldr	r3, [pc, #28]	; (8004580 <pxCurrentTCBConst2>)
 8004562:	6819      	ldr	r1, [r3, #0]
 8004564:	6808      	ldr	r0, [r1, #0]
 8004566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456a:	f380 8809 	msr	PSP, r0
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f04f 0000 	mov.w	r0, #0
 8004576:	f380 8811 	msr	BASEPRI, r0
 800457a:	4770      	bx	lr
 800457c:	f3af 8000 	nop.w

08004580 <pxCurrentTCBConst2>:
 8004580:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop

08004588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004588:	4808      	ldr	r0, [pc, #32]	; (80045ac <prvPortStartFirstTask+0x24>)
 800458a:	6800      	ldr	r0, [r0, #0]
 800458c:	6800      	ldr	r0, [r0, #0]
 800458e:	f380 8808 	msr	MSP, r0
 8004592:	f04f 0000 	mov.w	r0, #0
 8004596:	f380 8814 	msr	CONTROL, r0
 800459a:	b662      	cpsie	i
 800459c:	b661      	cpsie	f
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	df00      	svc	0
 80045a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045aa:	bf00      	nop
 80045ac:	e000ed08 	.word	0xe000ed08

080045b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045b6:	4b46      	ldr	r3, [pc, #280]	; (80046d0 <xPortStartScheduler+0x120>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a46      	ldr	r2, [pc, #280]	; (80046d4 <xPortStartScheduler+0x124>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d10a      	bne.n	80045d6 <xPortStartScheduler+0x26>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	613b      	str	r3, [r7, #16]
}
 80045d2:	bf00      	nop
 80045d4:	e7fe      	b.n	80045d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045d6:	4b3e      	ldr	r3, [pc, #248]	; (80046d0 <xPortStartScheduler+0x120>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a3f      	ldr	r2, [pc, #252]	; (80046d8 <xPortStartScheduler+0x128>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d10a      	bne.n	80045f6 <xPortStartScheduler+0x46>
	__asm volatile
 80045e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	60fb      	str	r3, [r7, #12]
}
 80045f2:	bf00      	nop
 80045f4:	e7fe      	b.n	80045f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045f6:	4b39      	ldr	r3, [pc, #228]	; (80046dc <xPortStartScheduler+0x12c>)
 80045f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	22ff      	movs	r2, #255	; 0xff
 8004606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004610:	78fb      	ldrb	r3, [r7, #3]
 8004612:	b2db      	uxtb	r3, r3
 8004614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004618:	b2da      	uxtb	r2, r3
 800461a:	4b31      	ldr	r3, [pc, #196]	; (80046e0 <xPortStartScheduler+0x130>)
 800461c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800461e:	4b31      	ldr	r3, [pc, #196]	; (80046e4 <xPortStartScheduler+0x134>)
 8004620:	2207      	movs	r2, #7
 8004622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004624:	e009      	b.n	800463a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004626:	4b2f      	ldr	r3, [pc, #188]	; (80046e4 <xPortStartScheduler+0x134>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3b01      	subs	r3, #1
 800462c:	4a2d      	ldr	r2, [pc, #180]	; (80046e4 <xPortStartScheduler+0x134>)
 800462e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	b2db      	uxtb	r3, r3
 8004638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800463a:	78fb      	ldrb	r3, [r7, #3]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004642:	2b80      	cmp	r3, #128	; 0x80
 8004644:	d0ef      	beq.n	8004626 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004646:	4b27      	ldr	r3, [pc, #156]	; (80046e4 <xPortStartScheduler+0x134>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f1c3 0307 	rsb	r3, r3, #7
 800464e:	2b04      	cmp	r3, #4
 8004650:	d00a      	beq.n	8004668 <xPortStartScheduler+0xb8>
	__asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	60bb      	str	r3, [r7, #8]
}
 8004664:	bf00      	nop
 8004666:	e7fe      	b.n	8004666 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004668:	4b1e      	ldr	r3, [pc, #120]	; (80046e4 <xPortStartScheduler+0x134>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	4a1d      	ldr	r2, [pc, #116]	; (80046e4 <xPortStartScheduler+0x134>)
 8004670:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004672:	4b1c      	ldr	r3, [pc, #112]	; (80046e4 <xPortStartScheduler+0x134>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800467a:	4a1a      	ldr	r2, [pc, #104]	; (80046e4 <xPortStartScheduler+0x134>)
 800467c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	b2da      	uxtb	r2, r3
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004686:	4b18      	ldr	r3, [pc, #96]	; (80046e8 <xPortStartScheduler+0x138>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a17      	ldr	r2, [pc, #92]	; (80046e8 <xPortStartScheduler+0x138>)
 800468c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004692:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <xPortStartScheduler+0x138>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a14      	ldr	r2, [pc, #80]	; (80046e8 <xPortStartScheduler+0x138>)
 8004698:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800469c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800469e:	f000 f8dd 	bl	800485c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80046a2:	4b12      	ldr	r3, [pc, #72]	; (80046ec <xPortStartScheduler+0x13c>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80046a8:	f000 f8fc 	bl	80048a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046ac:	4b10      	ldr	r3, [pc, #64]	; (80046f0 <xPortStartScheduler+0x140>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a0f      	ldr	r2, [pc, #60]	; (80046f0 <xPortStartScheduler+0x140>)
 80046b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80046b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80046b8:	f7ff ff66 	bl	8004588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80046bc:	f7ff fdba 	bl	8004234 <vTaskSwitchContext>
	prvTaskExitError();
 80046c0:	f7ff ff20 	bl	8004504 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	e000ed00 	.word	0xe000ed00
 80046d4:	410fc271 	.word	0x410fc271
 80046d8:	410fc270 	.word	0x410fc270
 80046dc:	e000e400 	.word	0xe000e400
 80046e0:	200003ac 	.word	0x200003ac
 80046e4:	200003b0 	.word	0x200003b0
 80046e8:	e000ed20 	.word	0xe000ed20
 80046ec:	2000000c 	.word	0x2000000c
 80046f0:	e000ef34 	.word	0xe000ef34

080046f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	607b      	str	r3, [r7, #4]
}
 800470c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800470e:	4b0f      	ldr	r3, [pc, #60]	; (800474c <vPortEnterCritical+0x58>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3301      	adds	r3, #1
 8004714:	4a0d      	ldr	r2, [pc, #52]	; (800474c <vPortEnterCritical+0x58>)
 8004716:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004718:	4b0c      	ldr	r3, [pc, #48]	; (800474c <vPortEnterCritical+0x58>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d10f      	bne.n	8004740 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004720:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <vPortEnterCritical+0x5c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <vPortEnterCritical+0x4c>
	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	603b      	str	r3, [r7, #0]
}
 800473c:	bf00      	nop
 800473e:	e7fe      	b.n	800473e <vPortEnterCritical+0x4a>
	}
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	2000000c 	.word	0x2000000c
 8004750:	e000ed04 	.word	0xe000ed04

08004754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800475a:	4b12      	ldr	r3, [pc, #72]	; (80047a4 <vPortExitCritical+0x50>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10a      	bne.n	8004778 <vPortExitCritical+0x24>
	__asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	607b      	str	r3, [r7, #4]
}
 8004774:	bf00      	nop
 8004776:	e7fe      	b.n	8004776 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004778:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <vPortExitCritical+0x50>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3b01      	subs	r3, #1
 800477e:	4a09      	ldr	r2, [pc, #36]	; (80047a4 <vPortExitCritical+0x50>)
 8004780:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004782:	4b08      	ldr	r3, [pc, #32]	; (80047a4 <vPortExitCritical+0x50>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d105      	bne.n	8004796 <vPortExitCritical+0x42>
 800478a:	2300      	movs	r3, #0
 800478c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004794:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	2000000c 	.word	0x2000000c
	...

080047b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80047b0:	f3ef 8009 	mrs	r0, PSP
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	4b15      	ldr	r3, [pc, #84]	; (8004810 <pxCurrentTCBConst>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	f01e 0f10 	tst.w	lr, #16
 80047c0:	bf08      	it	eq
 80047c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ca:	6010      	str	r0, [r2, #0]
 80047cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047d4:	f380 8811 	msr	BASEPRI, r0
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f7ff fd28 	bl	8004234 <vTaskSwitchContext>
 80047e4:	f04f 0000 	mov.w	r0, #0
 80047e8:	f380 8811 	msr	BASEPRI, r0
 80047ec:	bc09      	pop	{r0, r3}
 80047ee:	6819      	ldr	r1, [r3, #0]
 80047f0:	6808      	ldr	r0, [r1, #0]
 80047f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f6:	f01e 0f10 	tst.w	lr, #16
 80047fa:	bf08      	it	eq
 80047fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004800:	f380 8809 	msr	PSP, r0
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	f3af 8000 	nop.w

08004810 <pxCurrentTCBConst>:
 8004810:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop

08004818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
	__asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	607b      	str	r3, [r7, #4]
}
 8004830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004832:	f7ff fc47 	bl	80040c4 <xTaskIncrementTick>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800483c:	4b06      	ldr	r3, [pc, #24]	; (8004858 <SysTick_Handler+0x40>)
 800483e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	2300      	movs	r3, #0
 8004846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	f383 8811 	msr	BASEPRI, r3
}
 800484e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004850:	bf00      	nop
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <vPortSetupTimerInterrupt+0x34>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <vPortSetupTimerInterrupt+0x38>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800486c:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <vPortSetupTimerInterrupt+0x3c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a0a      	ldr	r2, [pc, #40]	; (800489c <vPortSetupTimerInterrupt+0x40>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	099b      	lsrs	r3, r3, #6
 8004878:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <vPortSetupTimerInterrupt+0x44>)
 800487a:	3b01      	subs	r3, #1
 800487c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800487e:	4b04      	ldr	r3, [pc, #16]	; (8004890 <vPortSetupTimerInterrupt+0x34>)
 8004880:	2207      	movs	r2, #7
 8004882:	601a      	str	r2, [r3, #0]
}
 8004884:	bf00      	nop
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	e000e010 	.word	0xe000e010
 8004894:	e000e018 	.word	0xe000e018
 8004898:	20000000 	.word	0x20000000
 800489c:	10624dd3 	.word	0x10624dd3
 80048a0:	e000e014 	.word	0xe000e014

080048a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80048a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80048b4 <vPortEnableVFP+0x10>
 80048a8:	6801      	ldr	r1, [r0, #0]
 80048aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80048ae:	6001      	str	r1, [r0, #0]
 80048b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80048b2:	bf00      	nop
 80048b4:	e000ed88 	.word	0xe000ed88

080048b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08a      	sub	sp, #40	; 0x28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80048c0:	2300      	movs	r3, #0
 80048c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80048c4:	f7ff fb54 	bl	8003f70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80048c8:	4b5b      	ldr	r3, [pc, #364]	; (8004a38 <pvPortMalloc+0x180>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048d0:	f000 f920 	bl	8004b14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048d4:	4b59      	ldr	r3, [pc, #356]	; (8004a3c <pvPortMalloc+0x184>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f040 8093 	bne.w	8004a08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d01d      	beq.n	8004924 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80048e8:	2208      	movs	r2, #8
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4413      	add	r3, r2
 80048ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d014      	beq.n	8004924 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f023 0307 	bic.w	r3, r3, #7
 8004900:	3308      	adds	r3, #8
 8004902:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <pvPortMalloc+0x6c>
	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	617b      	str	r3, [r7, #20]
}
 8004920:	bf00      	nop
 8004922:	e7fe      	b.n	8004922 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d06e      	beq.n	8004a08 <pvPortMalloc+0x150>
 800492a:	4b45      	ldr	r3, [pc, #276]	; (8004a40 <pvPortMalloc+0x188>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	429a      	cmp	r2, r3
 8004932:	d869      	bhi.n	8004a08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004934:	4b43      	ldr	r3, [pc, #268]	; (8004a44 <pvPortMalloc+0x18c>)
 8004936:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004938:	4b42      	ldr	r3, [pc, #264]	; (8004a44 <pvPortMalloc+0x18c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800493e:	e004      	b.n	800494a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	429a      	cmp	r2, r3
 8004952:	d903      	bls.n	800495c <pvPortMalloc+0xa4>
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f1      	bne.n	8004940 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800495c:	4b36      	ldr	r3, [pc, #216]	; (8004a38 <pvPortMalloc+0x180>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004962:	429a      	cmp	r2, r3
 8004964:	d050      	beq.n	8004a08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2208      	movs	r2, #8
 800496c:	4413      	add	r3, r2
 800496e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	1ad2      	subs	r2, r2, r3
 8004980:	2308      	movs	r3, #8
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	429a      	cmp	r2, r3
 8004986:	d91f      	bls.n	80049c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4413      	add	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <pvPortMalloc+0xf8>
	__asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	613b      	str	r3, [r7, #16]
}
 80049ac:	bf00      	nop
 80049ae:	e7fe      	b.n	80049ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	1ad2      	subs	r2, r2, r3
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049c2:	69b8      	ldr	r0, [r7, #24]
 80049c4:	f000 f908 	bl	8004bd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049c8:	4b1d      	ldr	r3, [pc, #116]	; (8004a40 <pvPortMalloc+0x188>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	4a1b      	ldr	r2, [pc, #108]	; (8004a40 <pvPortMalloc+0x188>)
 80049d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049d6:	4b1a      	ldr	r3, [pc, #104]	; (8004a40 <pvPortMalloc+0x188>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <pvPortMalloc+0x190>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d203      	bcs.n	80049ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049e2:	4b17      	ldr	r3, [pc, #92]	; (8004a40 <pvPortMalloc+0x188>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a18      	ldr	r2, [pc, #96]	; (8004a48 <pvPortMalloc+0x190>)
 80049e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	4b13      	ldr	r3, [pc, #76]	; (8004a3c <pvPortMalloc+0x184>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80049fe:	4b13      	ldr	r3, [pc, #76]	; (8004a4c <pvPortMalloc+0x194>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3301      	adds	r3, #1
 8004a04:	4a11      	ldr	r2, [pc, #68]	; (8004a4c <pvPortMalloc+0x194>)
 8004a06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a08:	f7ff fac0 	bl	8003f8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <pvPortMalloc+0x174>
	__asm volatile
 8004a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	60fb      	str	r3, [r7, #12]
}
 8004a28:	bf00      	nop
 8004a2a:	e7fe      	b.n	8004a2a <pvPortMalloc+0x172>
	return pvReturn;
 8004a2c:	69fb      	ldr	r3, [r7, #28]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3728      	adds	r7, #40	; 0x28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20003fbc 	.word	0x20003fbc
 8004a3c:	20003fd0 	.word	0x20003fd0
 8004a40:	20003fc0 	.word	0x20003fc0
 8004a44:	20003fb4 	.word	0x20003fb4
 8004a48:	20003fc4 	.word	0x20003fc4
 8004a4c:	20003fc8 	.word	0x20003fc8

08004a50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d04d      	beq.n	8004afe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a62:	2308      	movs	r3, #8
 8004a64:	425b      	negs	r3, r3
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4413      	add	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	4b24      	ldr	r3, [pc, #144]	; (8004b08 <vPortFree+0xb8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10a      	bne.n	8004a94 <vPortFree+0x44>
	__asm volatile
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	60fb      	str	r3, [r7, #12]
}
 8004a90:	bf00      	nop
 8004a92:	e7fe      	b.n	8004a92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <vPortFree+0x62>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	60bb      	str	r3, [r7, #8]
}
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <vPortFree+0xb8>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4013      	ands	r3, r2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d01e      	beq.n	8004afe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d11a      	bne.n	8004afe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	4b0e      	ldr	r3, [pc, #56]	; (8004b08 <vPortFree+0xb8>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	401a      	ands	r2, r3
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ad8:	f7ff fa4a 	bl	8003f70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	4b0a      	ldr	r3, [pc, #40]	; (8004b0c <vPortFree+0xbc>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	4a09      	ldr	r2, [pc, #36]	; (8004b0c <vPortFree+0xbc>)
 8004ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004aea:	6938      	ldr	r0, [r7, #16]
 8004aec:	f000 f874 	bl	8004bd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004af0:	4b07      	ldr	r3, [pc, #28]	; (8004b10 <vPortFree+0xc0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3301      	adds	r3, #1
 8004af6:	4a06      	ldr	r2, [pc, #24]	; (8004b10 <vPortFree+0xc0>)
 8004af8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004afa:	f7ff fa47 	bl	8003f8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004afe:	bf00      	nop
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20003fd0 	.word	0x20003fd0
 8004b0c:	20003fc0 	.word	0x20003fc0
 8004b10:	20003fcc 	.word	0x20003fcc

08004b14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004b1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b20:	4b27      	ldr	r3, [pc, #156]	; (8004bc0 <prvHeapInit+0xac>)
 8004b22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00c      	beq.n	8004b48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	3307      	adds	r3, #7
 8004b32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f023 0307 	bic.w	r3, r3, #7
 8004b3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	4a1f      	ldr	r2, [pc, #124]	; (8004bc0 <prvHeapInit+0xac>)
 8004b44:	4413      	add	r3, r2
 8004b46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b4c:	4a1d      	ldr	r2, [pc, #116]	; (8004bc4 <prvHeapInit+0xb0>)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b52:	4b1c      	ldr	r3, [pc, #112]	; (8004bc4 <prvHeapInit+0xb0>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b60:	2208      	movs	r2, #8
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0307 	bic.w	r3, r3, #7
 8004b6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4a15      	ldr	r2, [pc, #84]	; (8004bc8 <prvHeapInit+0xb4>)
 8004b74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b76:	4b14      	ldr	r3, [pc, #80]	; (8004bc8 <prvHeapInit+0xb4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b7e:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <prvHeapInit+0xb4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	1ad2      	subs	r2, r2, r3
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b94:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <prvHeapInit+0xb4>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4a0a      	ldr	r2, [pc, #40]	; (8004bcc <prvHeapInit+0xb8>)
 8004ba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	4a09      	ldr	r2, [pc, #36]	; (8004bd0 <prvHeapInit+0xbc>)
 8004baa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004bac:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <prvHeapInit+0xc0>)
 8004bae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004bb2:	601a      	str	r2, [r3, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	200003b4 	.word	0x200003b4
 8004bc4:	20003fb4 	.word	0x20003fb4
 8004bc8:	20003fbc 	.word	0x20003fbc
 8004bcc:	20003fc4 	.word	0x20003fc4
 8004bd0:	20003fc0 	.word	0x20003fc0
 8004bd4:	20003fd0 	.word	0x20003fd0

08004bd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004be0:	4b28      	ldr	r3, [pc, #160]	; (8004c84 <prvInsertBlockIntoFreeList+0xac>)
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	e002      	b.n	8004bec <prvInsertBlockIntoFreeList+0x14>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d8f7      	bhi.n	8004be6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	4413      	add	r3, r2
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d108      	bne.n	8004c1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	441a      	add	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	441a      	add	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d118      	bne.n	8004c60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	4b15      	ldr	r3, [pc, #84]	; (8004c88 <prvInsertBlockIntoFreeList+0xb0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d00d      	beq.n	8004c56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	441a      	add	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	e008      	b.n	8004c68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c56:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <prvInsertBlockIntoFreeList+0xb0>)
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	e003      	b.n	8004c68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d002      	beq.n	8004c76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c76:	bf00      	nop
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20003fb4 	.word	0x20003fb4
 8004c88:	20003fbc 	.word	0x20003fbc

08004c8c <__libc_init_array>:
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	4d0d      	ldr	r5, [pc, #52]	; (8004cc4 <__libc_init_array+0x38>)
 8004c90:	4c0d      	ldr	r4, [pc, #52]	; (8004cc8 <__libc_init_array+0x3c>)
 8004c92:	1b64      	subs	r4, r4, r5
 8004c94:	10a4      	asrs	r4, r4, #2
 8004c96:	2600      	movs	r6, #0
 8004c98:	42a6      	cmp	r6, r4
 8004c9a:	d109      	bne.n	8004cb0 <__libc_init_array+0x24>
 8004c9c:	4d0b      	ldr	r5, [pc, #44]	; (8004ccc <__libc_init_array+0x40>)
 8004c9e:	4c0c      	ldr	r4, [pc, #48]	; (8004cd0 <__libc_init_array+0x44>)
 8004ca0:	f000 f820 	bl	8004ce4 <_init>
 8004ca4:	1b64      	subs	r4, r4, r5
 8004ca6:	10a4      	asrs	r4, r4, #2
 8004ca8:	2600      	movs	r6, #0
 8004caa:	42a6      	cmp	r6, r4
 8004cac:	d105      	bne.n	8004cba <__libc_init_array+0x2e>
 8004cae:	bd70      	pop	{r4, r5, r6, pc}
 8004cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb4:	4798      	blx	r3
 8004cb6:	3601      	adds	r6, #1
 8004cb8:	e7ee      	b.n	8004c98 <__libc_init_array+0xc>
 8004cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cbe:	4798      	blx	r3
 8004cc0:	3601      	adds	r6, #1
 8004cc2:	e7f2      	b.n	8004caa <__libc_init_array+0x1e>
 8004cc4:	08004d6c 	.word	0x08004d6c
 8004cc8:	08004d6c 	.word	0x08004d6c
 8004ccc:	08004d6c 	.word	0x08004d6c
 8004cd0:	08004d70 	.word	0x08004d70

08004cd4 <memset>:
 8004cd4:	4402      	add	r2, r0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d100      	bne.n	8004cde <memset+0xa>
 8004cdc:	4770      	bx	lr
 8004cde:	f803 1b01 	strb.w	r1, [r3], #1
 8004ce2:	e7f9      	b.n	8004cd8 <memset+0x4>

08004ce4 <_init>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	bf00      	nop
 8004ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cea:	bc08      	pop	{r3}
 8004cec:	469e      	mov	lr, r3
 8004cee:	4770      	bx	lr

08004cf0 <_fini>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	bf00      	nop
 8004cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf6:	bc08      	pop	{r3}
 8004cf8:	469e      	mov	lr, r3
 8004cfa:	4770      	bx	lr
