
lab4_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f58  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08006108  08006108  00016108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006194  08006194  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006194  08006194  00016194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800619c  0800619c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061a0  080061a0  000161a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080061a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044bc  20000010  080061b4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044cc  080061b4  000244cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be3c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c4  00000000  00000000  0003be7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  0003f440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001440  00000000  00000000  000409b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f44  00000000  00000000  00041df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017f48  00000000  00000000  00067d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eccd5  00000000  00000000  0007fc84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016c959  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b4c  00000000  00000000  0016c9ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080060f0 	.word	0x080060f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	080060f0 	.word	0x080060f0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96e 	b.w	80004e4 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468c      	mov	ip, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	f040 8083 	bne.w	8000336 <__udivmoddi4+0x116>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d947      	bls.n	80002c6 <__udivmoddi4+0xa6>
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	b142      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023c:	f1c2 0020 	rsb	r0, r2, #32
 8000240:	fa24 f000 	lsr.w	r0, r4, r0
 8000244:	4091      	lsls	r1, r2
 8000246:	4097      	lsls	r7, r2
 8000248:	ea40 0c01 	orr.w	ip, r0, r1
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbbc f6f8 	udiv	r6, ip, r8
 8000258:	fa1f fe87 	uxth.w	lr, r7
 800025c:	fb08 c116 	mls	r1, r8, r6, ip
 8000260:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000264:	fb06 f10e 	mul.w	r1, r6, lr
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 8119 	bcs.w	80004a8 <__udivmoddi4+0x288>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8116 	bls.w	80004a8 <__udivmoddi4+0x288>
 800027c:	3e02      	subs	r6, #2
 800027e:	443b      	add	r3, r7
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fe0e 	mul.w	lr, r0, lr
 8000294:	45a6      	cmp	lr, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	193c      	adds	r4, r7, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8105 	bcs.w	80004ac <__udivmoddi4+0x28c>
 80002a2:	45a6      	cmp	lr, r4
 80002a4:	f240 8102 	bls.w	80004ac <__udivmoddi4+0x28c>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b0:	eba4 040e 	sub.w	r4, r4, lr
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	b902      	cbnz	r2, 80002ca <__udivmoddi4+0xaa>
 80002c8:	deff      	udf	#255	; 0xff
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	2a00      	cmp	r2, #0
 80002d0:	d150      	bne.n	8000374 <__udivmoddi4+0x154>
 80002d2:	1bcb      	subs	r3, r1, r7
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f f887 	uxth.w	r8, r7
 80002dc:	2601      	movs	r6, #1
 80002de:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e2:	0c21      	lsrs	r1, r4, #16
 80002e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002ec:	fb08 f30c 	mul.w	r3, r8, ip
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0xe4>
 80002f4:	1879      	adds	r1, r7, r1
 80002f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0xe2>
 80002fc:	428b      	cmp	r3, r1
 80002fe:	f200 80e9 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 8000302:	4684      	mov	ip, r0
 8000304:	1ac9      	subs	r1, r1, r3
 8000306:	b2a3      	uxth	r3, r4
 8000308:	fbb1 f0fe 	udiv	r0, r1, lr
 800030c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000310:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000314:	fb08 f800 	mul.w	r8, r8, r0
 8000318:	45a0      	cmp	r8, r4
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x10c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x10a>
 8000324:	45a0      	cmp	r8, r4
 8000326:	f200 80d9 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 800032a:	4618      	mov	r0, r3
 800032c:	eba4 0408 	sub.w	r4, r4, r8
 8000330:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000334:	e7bf      	b.n	80002b6 <__udivmoddi4+0x96>
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x12e>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80b1 	beq.w	80004a2 <__udivmoddi4+0x282>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x1cc>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0x140>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80b8 	bhi.w	80004d0 <__udivmoddi4+0x2b0>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0103 	sbc.w	r1, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	468c      	mov	ip, r1
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0a8      	beq.n	80002c0 <__udivmoddi4+0xa0>
 800036e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000374:	f1c2 0320 	rsb	r3, r2, #32
 8000378:	fa20 f603 	lsr.w	r6, r0, r3
 800037c:	4097      	lsls	r7, r2
 800037e:	fa01 f002 	lsl.w	r0, r1, r2
 8000382:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000386:	40d9      	lsrs	r1, r3
 8000388:	4330      	orrs	r0, r6
 800038a:	0c03      	lsrs	r3, r0, #16
 800038c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000390:	fa1f f887 	uxth.w	r8, r7
 8000394:	fb0e 1116 	mls	r1, lr, r6, r1
 8000398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039c:	fb06 f108 	mul.w	r1, r6, r8
 80003a0:	4299      	cmp	r1, r3
 80003a2:	fa04 f402 	lsl.w	r4, r4, r2
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x19c>
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ae:	f080 808d 	bcs.w	80004cc <__udivmoddi4+0x2ac>
 80003b2:	4299      	cmp	r1, r3
 80003b4:	f240 808a 	bls.w	80004cc <__udivmoddi4+0x2ac>
 80003b8:	3e02      	subs	r6, #2
 80003ba:	443b      	add	r3, r7
 80003bc:	1a5b      	subs	r3, r3, r1
 80003be:	b281      	uxth	r1, r0
 80003c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb00 f308 	mul.w	r3, r0, r8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1c4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003da:	d273      	bcs.n	80004c4 <__udivmoddi4+0x2a4>
 80003dc:	428b      	cmp	r3, r1
 80003de:	d971      	bls.n	80004c4 <__udivmoddi4+0x2a4>
 80003e0:	3802      	subs	r0, #2
 80003e2:	4439      	add	r1, r7
 80003e4:	1acb      	subs	r3, r1, r3
 80003e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ea:	e778      	b.n	80002de <__udivmoddi4+0xbe>
 80003ec:	f1c6 0c20 	rsb	ip, r6, #32
 80003f0:	fa03 f406 	lsl.w	r4, r3, r6
 80003f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f8:	431c      	orrs	r4, r3
 80003fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000406:	fa21 f10c 	lsr.w	r1, r1, ip
 800040a:	431f      	orrs	r7, r3
 800040c:	0c3b      	lsrs	r3, r7, #16
 800040e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000412:	fa1f f884 	uxth.w	r8, r4
 8000416:	fb0e 1119 	mls	r1, lr, r9, r1
 800041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041e:	fb09 fa08 	mul.w	sl, r9, r8
 8000422:	458a      	cmp	sl, r1
 8000424:	fa02 f206 	lsl.w	r2, r2, r6
 8000428:	fa00 f306 	lsl.w	r3, r0, r6
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x220>
 800042e:	1861      	adds	r1, r4, r1
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	d248      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 8000436:	458a      	cmp	sl, r1
 8000438:	d946      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	4421      	add	r1, r4
 8000440:	eba1 010a 	sub.w	r1, r1, sl
 8000444:	b2bf      	uxth	r7, r7
 8000446:	fbb1 f0fe 	udiv	r0, r1, lr
 800044a:	fb0e 1110 	mls	r1, lr, r0, r1
 800044e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45b8      	cmp	r8, r7
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x24a>
 800045a:	19e7      	adds	r7, r4, r7
 800045c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000460:	d22e      	bcs.n	80004c0 <__udivmoddi4+0x2a0>
 8000462:	45b8      	cmp	r8, r7
 8000464:	d92c      	bls.n	80004c0 <__udivmoddi4+0x2a0>
 8000466:	3802      	subs	r0, #2
 8000468:	4427      	add	r7, r4
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba7 0708 	sub.w	r7, r7, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454f      	cmp	r7, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	4649      	mov	r1, r9
 800047c:	d31a      	bcc.n	80004b4 <__udivmoddi4+0x294>
 800047e:	d017      	beq.n	80004b0 <__udivmoddi4+0x290>
 8000480:	b15d      	cbz	r5, 800049a <__udivmoddi4+0x27a>
 8000482:	ebb3 020e 	subs.w	r2, r3, lr
 8000486:	eb67 0701 	sbc.w	r7, r7, r1
 800048a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048e:	40f2      	lsrs	r2, r6
 8000490:	ea4c 0202 	orr.w	r2, ip, r2
 8000494:	40f7      	lsrs	r7, r6
 8000496:	e9c5 2700 	strd	r2, r7, [r5]
 800049a:	2600      	movs	r6, #0
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e70b      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e9      	b.n	8000280 <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fd      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b0:	4543      	cmp	r3, r8
 80004b2:	d2e5      	bcs.n	8000480 <__udivmoddi4+0x260>
 80004b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b8:	eb69 0104 	sbc.w	r1, r9, r4
 80004bc:	3801      	subs	r0, #1
 80004be:	e7df      	b.n	8000480 <__udivmoddi4+0x260>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e7d2      	b.n	800046a <__udivmoddi4+0x24a>
 80004c4:	4660      	mov	r0, ip
 80004c6:	e78d      	b.n	80003e4 <__udivmoddi4+0x1c4>
 80004c8:	4681      	mov	r9, r0
 80004ca:	e7b9      	b.n	8000440 <__udivmoddi4+0x220>
 80004cc:	4666      	mov	r6, ip
 80004ce:	e775      	b.n	80003bc <__udivmoddi4+0x19c>
 80004d0:	4630      	mov	r0, r6
 80004d2:	e74a      	b.n	800036a <__udivmoddi4+0x14a>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	4439      	add	r1, r7
 80004da:	e713      	b.n	8000304 <__udivmoddi4+0xe4>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	e724      	b.n	800032c <__udivmoddi4+0x10c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	4a07      	ldr	r2, [pc, #28]	; (8000514 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	4a06      	ldr	r2, [pc, #24]	; (8000518 <vApplicationGetIdleTaskMemory+0x30>)
 80004fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2280      	movs	r2, #128	; 0x80
 8000504:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	2000002c 	.word	0x2000002c
 8000518:	20000080 	.word	0x20000080

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b5b0      	push	{r4, r5, r7, lr}
 800051e:	b09c      	sub	sp, #112	; 0x70
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 fd65 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f88d 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 f995 	bl	8000858 <MX_GPIO_Init>
  MX_ETH_Init();
 800052e:	f000 f8f3 	bl	8000718 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000532:	f000 f939 	bl	80007a8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000536:	f000 f961 	bl	80007fc <MX_USB_OTG_FS_PCD_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 800053a:	2300      	movs	r3, #0
 800053c:	66bb      	str	r3, [r7, #104]	; 0x68
 800053e:	2300      	movs	r3, #0
 8000540:	66fb      	str	r3, [r7, #108]	; 0x6c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000542:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000546:	2101      	movs	r1, #1
 8000548:	4618      	mov	r0, r3
 800054a:	f003 fac8 	bl	8003ade <osSemaphoreCreate>
 800054e:	4603      	mov	r3, r0
 8000550:	4a33      	ldr	r2, [pc, #204]	; (8000620 <main+0x104>)
 8000552:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySem02 */
  osSemaphoreDef(myBinarySem02);
 8000554:	2300      	movs	r3, #0
 8000556:	663b      	str	r3, [r7, #96]	; 0x60
 8000558:	2300      	movs	r3, #0
 800055a:	667b      	str	r3, [r7, #100]	; 0x64
  myBinarySem02Handle = osSemaphoreCreate(osSemaphore(myBinarySem02), 1);
 800055c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000560:	2101      	movs	r1, #1
 8000562:	4618      	mov	r0, r3
 8000564:	f003 fabb 	bl	8003ade <osSemaphoreCreate>
 8000568:	4603      	mov	r3, r0
 800056a:	4a2e      	ldr	r2, [pc, #184]	; (8000624 <main+0x108>)
 800056c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySem03 */
  osSemaphoreDef(myBinarySem03);
 800056e:	2300      	movs	r3, #0
 8000570:	65bb      	str	r3, [r7, #88]	; 0x58
 8000572:	2300      	movs	r3, #0
 8000574:	65fb      	str	r3, [r7, #92]	; 0x5c
  myBinarySem03Handle = osSemaphoreCreate(osSemaphore(myBinarySem03), 1);
 8000576:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800057a:	2101      	movs	r1, #1
 800057c:	4618      	mov	r0, r3
 800057e:	f003 faae 	bl	8003ade <osSemaphoreCreate>
 8000582:	4603      	mov	r3, r0
 8000584:	4a28      	ldr	r2, [pc, #160]	; (8000628 <main+0x10c>)
 8000586:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  osSemaphoreWait(myBinarySem01Handle, 0);
 8000588:	4b25      	ldr	r3, [pc, #148]	; (8000620 <main+0x104>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f003 fad8 	bl	8003b44 <osSemaphoreWait>
  osSemaphoreWait(myBinarySem02Handle, 0);
 8000594:	4b23      	ldr	r3, [pc, #140]	; (8000624 <main+0x108>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f003 fad2 	bl	8003b44 <osSemaphoreWait>
  osSemaphoreWait(myBinarySem03Handle, 0);
 80005a0:	4b21      	ldr	r3, [pc, #132]	; (8000628 <main+0x10c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 facc 	bl	8003b44 <osSemaphoreWait>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task1 */
  osThreadDef(task1, StartTask1, osPriorityNormal, 0, 128);
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <main+0x110>)
 80005ae:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80005b2:	461d      	mov	r5, r3
 80005b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 80005c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fa3d 	bl	8003a46 <osThreadCreate>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a18      	ldr	r2, [pc, #96]	; (8000630 <main+0x114>)
 80005d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, StartTask02, osPriorityNormal, 0, 128);
 80005d2:	4b18      	ldr	r3, [pc, #96]	; (8000634 <main+0x118>)
 80005d4:	f107 0420 	add.w	r4, r7, #32
 80005d8:	461d      	mov	r5, r3
 80005da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 fa2a 	bl	8003a46 <osThreadCreate>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a10      	ldr	r2, [pc, #64]	; (8000638 <main+0x11c>)
 80005f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, StartTask03, osPriorityNormal, 0, 128);
 80005f8:	4b10      	ldr	r3, [pc, #64]	; (800063c <main+0x120>)
 80005fa:	1d3c      	adds	r4, r7, #4
 80005fc:	461d      	mov	r5, r3
 80005fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000602:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000606:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3), NULL);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fa19 	bl	8003a46 <osThreadCreate>
 8000614:	4603      	mov	r3, r0
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <main+0x124>)
 8000618:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800061a:	f003 fa0d 	bl	8003a38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061e:	e7fe      	b.n	800061e <main+0x102>
 8000620:	20004430 	.word	0x20004430
 8000624:	20004428 	.word	0x20004428
 8000628:	20004424 	.word	0x20004424
 800062c:	08006120 	.word	0x08006120
 8000630:	20004420 	.word	0x20004420
 8000634:	0800613c 	.word	0x0800613c
 8000638:	2000447c 	.word	0x2000447c
 800063c:	08006158 	.word	0x08006158
 8000640:	2000442c 	.word	0x2000442c

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f005 fd44 	bl	80060e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a27      	ldr	r2, [pc, #156]	; (8000710 <SystemClock_Config+0xcc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xd0>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b8:	23a8      	movs	r3, #168	; 0xa8
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fd41 	bl	8002150 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 fa3c 	bl	8000b50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2105      	movs	r1, #5
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 ffa2 	bl	8002640 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000702:	f000 fa25 	bl	8000b50 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800071c:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <MX_ETH_Init+0x88>)
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <MX_ETH_Init+0x8c>)
 8000720:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_ETH_Init+0x88>)
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_ETH_Init+0x88>)
 800072a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800072e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_ETH_Init+0x88>)
 8000732:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000736:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_ETH_Init+0x88>)
 800073a:	2200      	movs	r2, #0
 800073c:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_ETH_Init+0x88>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_ETH_Init+0x88>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	3301      	adds	r3, #1
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000750:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_ETH_Init+0x88>)
 8000752:	695b      	ldr	r3, [r3, #20]
 8000754:	3302      	adds	r3, #2
 8000756:	22e1      	movs	r2, #225	; 0xe1
 8000758:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_ETH_Init+0x88>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	3303      	adds	r3, #3
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_ETH_Init+0x88>)
 8000766:	695b      	ldr	r3, [r3, #20]
 8000768:	3304      	adds	r3, #4
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_ETH_Init+0x88>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	3305      	adds	r3, #5
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_ETH_Init+0x88>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_ETH_Init+0x88>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_ETH_Init+0x88>)
 8000786:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800078a:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_ETH_Init+0x88>)
 800078e:	f000 fd77 	bl	8001280 <HAL_ETH_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ETH_Init+0x84>
  {
    Error_Handler();
 8000798:	f000 f9da 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20004434 	.word	0x20004434
 80007a4:	40028000 	.word	0x40028000

080007a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_USART3_UART_Init+0x4c>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <MX_USART3_UART_Init+0x50>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_USART3_UART_Init+0x4c>)
 80007b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_USART3_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_USART3_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_USART3_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_USART3_UART_Init+0x4c>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_USART3_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_USART3_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_USART3_UART_Init+0x4c>)
 80007e0:	f002 fc0a 	bl	8002ff8 <HAL_UART_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007ea:	f000 f9b1 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20003fd4 	.word	0x20003fd4
 80007f8:	40004800 	.word	0x40004800

080007fc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000802:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000806:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080a:	2204      	movs	r2, #4
 800080c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000810:	2202      	movs	r2, #2
 8000812:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081c:	2202      	movs	r2, #2
 800081e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000822:	2201      	movs	r2, #1
 8000824:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000834:	2201      	movs	r2, #1
 8000836:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000840:	f001 fb69 	bl	8001f16 <HAL_PCD_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800084a:	f000 f981 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20004018 	.word	0x20004018

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	; 0x30
 800085c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
 8000872:	4b4c      	ldr	r3, [pc, #304]	; (80009a4 <MX_GPIO_Init+0x14c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a4b      	ldr	r2, [pc, #300]	; (80009a4 <MX_GPIO_Init+0x14c>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b49      	ldr	r3, [pc, #292]	; (80009a4 <MX_GPIO_Init+0x14c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	4b45      	ldr	r3, [pc, #276]	; (80009a4 <MX_GPIO_Init+0x14c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a44      	ldr	r2, [pc, #272]	; (80009a4 <MX_GPIO_Init+0x14c>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b42      	ldr	r3, [pc, #264]	; (80009a4 <MX_GPIO_Init+0x14c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	4b3e      	ldr	r3, [pc, #248]	; (80009a4 <MX_GPIO_Init+0x14c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a3d      	ldr	r2, [pc, #244]	; (80009a4 <MX_GPIO_Init+0x14c>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b3b      	ldr	r3, [pc, #236]	; (80009a4 <MX_GPIO_Init+0x14c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b37      	ldr	r3, [pc, #220]	; (80009a4 <MX_GPIO_Init+0x14c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a36      	ldr	r2, [pc, #216]	; (80009a4 <MX_GPIO_Init+0x14c>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b34      	ldr	r3, [pc, #208]	; (80009a4 <MX_GPIO_Init+0x14c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	4b30      	ldr	r3, [pc, #192]	; (80009a4 <MX_GPIO_Init+0x14c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a2f      	ldr	r2, [pc, #188]	; (80009a4 <MX_GPIO_Init+0x14c>)
 80008e8:	f043 0308 	orr.w	r3, r3, #8
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <MX_GPIO_Init+0x14c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0308 	and.w	r3, r3, #8
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <MX_GPIO_Init+0x14c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a28      	ldr	r2, [pc, #160]	; (80009a4 <MX_GPIO_Init+0x14c>)
 8000904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <MX_GPIO_Init+0x14c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f244 0181 	movw	r1, #16513	; 0x4081
 800091c:	4822      	ldr	r0, [pc, #136]	; (80009a8 <MX_GPIO_Init+0x150>)
 800091e:	f001 fac7 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2140      	movs	r1, #64	; 0x40
 8000926:	4821      	ldr	r0, [pc, #132]	; (80009ac <MX_GPIO_Init+0x154>)
 8000928:	f001 fac2 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800092c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000932:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	481b      	ldr	r0, [pc, #108]	; (80009b0 <MX_GPIO_Init+0x158>)
 8000944:	f001 f908 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000948:	f244 0381 	movw	r3, #16513	; 0x4081
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4811      	ldr	r0, [pc, #68]	; (80009a8 <MX_GPIO_Init+0x150>)
 8000962:	f001 f8f9 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000966:	2340      	movs	r3, #64	; 0x40
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	480b      	ldr	r0, [pc, #44]	; (80009ac <MX_GPIO_Init+0x154>)
 800097e:	f001 f8eb 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_GPIO_Init+0x154>)
 8000996:	f001 f8df 	bl	8001b58 <HAL_GPIO_Init>

}
 800099a:	bf00      	nop
 800099c:	3730      	adds	r7, #48	; 0x30
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020400 	.word	0x40020400
 80009ac:	40021800 	.word	0x40021800
 80009b0:	40020800 	.word	0x40020800

080009b4 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void const * argument)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 80009bc:	2180      	movs	r1, #128	; 0x80
 80009be:	4816      	ldr	r0, [pc, #88]	; (8000a18 <StartTask1+0x64>)
 80009c0:	f001 fa8f 	bl	8001ee2 <HAL_GPIO_TogglePin>
	  		  HAL_Delay(1000);
 80009c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c8:	f000 fb54 	bl	8001074 <HAL_Delay>
	  		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 80009cc:	2180      	movs	r1, #128	; 0x80
 80009ce:	4812      	ldr	r0, [pc, #72]	; (8000a18 <StartTask1+0x64>)
 80009d0:	f001 fa87 	bl	8001ee2 <HAL_GPIO_TogglePin>
	  		  HAL_Delay(1000);
 80009d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d8:	f000 fb4c 	bl	8001074 <HAL_Delay>
	  		 HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	480e      	ldr	r0, [pc, #56]	; (8000a18 <StartTask1+0x64>)
 80009e0:	f001 fa7f 	bl	8001ee2 <HAL_GPIO_TogglePin>
	  			  		  HAL_Delay(1000);
 80009e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e8:	f000 fb44 	bl	8001074 <HAL_Delay>
	  			  		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 80009ec:	2180      	movs	r1, #128	; 0x80
 80009ee:	480a      	ldr	r0, [pc, #40]	; (8000a18 <StartTask1+0x64>)
 80009f0:	f001 fa77 	bl	8001ee2 <HAL_GPIO_TogglePin>
	  			  		  HAL_Delay(1000);
 80009f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f8:	f000 fb3c 	bl	8001074 <HAL_Delay>
	  	      osSemaphoreRelease(myBinarySem02Handle);
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <StartTask1+0x68>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f003 f8ed 	bl	8003be0 <osSemaphoreRelease>
	  	      osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <StartTask1+0x6c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f04f 31ff 	mov.w	r1, #4294967295
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f003 f898 	bl	8003b44 <osSemaphoreWait>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 8000a14:	e7d2      	b.n	80009bc <StartTask1+0x8>
 8000a16:	bf00      	nop
 8000a18:	40020400 	.word	0x40020400
 8000a1c:	20004428 	.word	0x20004428
 8000a20:	20004430 	.word	0x20004430

08000a24 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(myBinarySem02Handle, osWaitForever);
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <StartTask02+0x84>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f04f 31ff 	mov.w	r1, #4294967295
 8000a34:	4618      	mov	r0, r3
 8000a36:	f003 f885 	bl	8003b44 <osSemaphoreWait>

	 		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	481b      	ldr	r0, [pc, #108]	; (8000aac <StartTask02+0x88>)
 8000a3e:	f001 fa50 	bl	8001ee2 <HAL_GPIO_TogglePin>
	 		  HAL_Delay(1000);
 8000a42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a46:	f000 fb15 	bl	8001074 <HAL_Delay>
	 		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	4817      	ldr	r0, [pc, #92]	; (8000aac <StartTask02+0x88>)
 8000a4e:	f001 fa48 	bl	8001ee2 <HAL_GPIO_TogglePin>
	 		  HAL_Delay(1000);
 8000a52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a56:	f000 fb0d 	bl	8001074 <HAL_Delay>

	 		 HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	4813      	ldr	r0, [pc, #76]	; (8000aac <StartTask02+0x88>)
 8000a5e:	f001 fa40 	bl	8001ee2 <HAL_GPIO_TogglePin>
	 			 		  HAL_Delay(1000);
 8000a62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a66:	f000 fb05 	bl	8001074 <HAL_Delay>
	 			 		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	480f      	ldr	r0, [pc, #60]	; (8000aac <StartTask02+0x88>)
 8000a6e:	f001 fa38 	bl	8001ee2 <HAL_GPIO_TogglePin>
	 			 		  HAL_Delay(1000);
 8000a72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a76:	f000 fafd 	bl	8001074 <HAL_Delay>

	 			 		 HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	480b      	ldr	r0, [pc, #44]	; (8000aac <StartTask02+0x88>)
 8000a7e:	f001 fa30 	bl	8001ee2 <HAL_GPIO_TogglePin>
	 			 			 		  HAL_Delay(1000);
 8000a82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a86:	f000 faf5 	bl	8001074 <HAL_Delay>
	 			 			 		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	4807      	ldr	r0, [pc, #28]	; (8000aac <StartTask02+0x88>)
 8000a8e:	f001 fa28 	bl	8001ee2 <HAL_GPIO_TogglePin>
	 			 			 		  HAL_Delay(1000);
 8000a92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a96:	f000 faed 	bl	8001074 <HAL_Delay>
	 		  osSemaphoreRelease(myBinarySem03Handle);
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <StartTask02+0x8c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f003 f89e 	bl	8003be0 <osSemaphoreRelease>
	  osSemaphoreWait(myBinarySem02Handle, osWaitForever);
 8000aa4:	e7c2      	b.n	8000a2c <StartTask02+0x8>
 8000aa6:	bf00      	nop
 8000aa8:	20004428 	.word	0x20004428
 8000aac:	40020400 	.word	0x40020400
 8000ab0:	20004424 	.word	0x20004424

08000ab4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(myBinarySem03Handle, osWaitForever);
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <StartTask03+0x6c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f003 f83d 	bl	8003b44 <osSemaphoreWait>

	 		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000aca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ace:	4815      	ldr	r0, [pc, #84]	; (8000b24 <StartTask03+0x70>)
 8000ad0:	f001 fa07 	bl	8001ee2 <HAL_GPIO_TogglePin>
	 		  HAL_Delay(1000);
 8000ad4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad8:	f000 facc 	bl	8001074 <HAL_Delay>
	 		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000adc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae0:	4810      	ldr	r0, [pc, #64]	; (8000b24 <StartTask03+0x70>)
 8000ae2:	f001 f9fe 	bl	8001ee2 <HAL_GPIO_TogglePin>
	 		  HAL_Delay(1000);
 8000ae6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aea:	f000 fac3 	bl	8001074 <HAL_Delay>

	 		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000aee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000af2:	480c      	ldr	r0, [pc, #48]	; (8000b24 <StartTask03+0x70>)
 8000af4:	f001 f9f5 	bl	8001ee2 <HAL_GPIO_TogglePin>
	 		  HAL_Delay(1000);
 8000af8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000afc:	f000 faba 	bl	8001074 <HAL_Delay>
	 		  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000b00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b04:	4807      	ldr	r0, [pc, #28]	; (8000b24 <StartTask03+0x70>)
 8000b06:	f001 f9ec 	bl	8001ee2 <HAL_GPIO_TogglePin>
	 		  HAL_Delay(1000);
 8000b0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b0e:	f000 fab1 	bl	8001074 <HAL_Delay>
	 		  osSemaphoreRelease(myBinarySem01Handle);
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <StartTask03+0x74>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 f862 	bl	8003be0 <osSemaphoreRelease>
	  osSemaphoreWait(myBinarySem03Handle, osWaitForever);
 8000b1c:	e7ce      	b.n	8000abc <StartTask03+0x8>
 8000b1e:	bf00      	nop
 8000b20:	20004424 	.word	0x20004424
 8000b24:	40020400 	.word	0x40020400
 8000b28:	20004430 	.word	0x20004430

08000b2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d101      	bne.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b3e:	f000 fa79 	bl	8001034 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40010000 	.word	0x40010000

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <Error_Handler+0x8>
	...

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_MspInit+0x54>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a11      	ldr	r2, [pc, #68]	; (8000bb0 <HAL_MspInit+0x54>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_MspInit+0x54>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_MspInit+0x54>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <HAL_MspInit+0x54>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_MspInit+0x54>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	210f      	movs	r1, #15
 8000b9e:	f06f 0001 	mvn.w	r0, #1
 8000ba2:	f000 fb43 	bl	800122c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	; 0x38
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a55      	ldr	r2, [pc, #340]	; (8000d28 <HAL_ETH_MspInit+0x174>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	f040 80a4 	bne.w	8000d20 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
 8000bdc:	4b53      	ldr	r3, [pc, #332]	; (8000d2c <HAL_ETH_MspInit+0x178>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	4a52      	ldr	r2, [pc, #328]	; (8000d2c <HAL_ETH_MspInit+0x178>)
 8000be2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
 8000be8:	4b50      	ldr	r3, [pc, #320]	; (8000d2c <HAL_ETH_MspInit+0x178>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf0:	623b      	str	r3, [r7, #32]
 8000bf2:	6a3b      	ldr	r3, [r7, #32]
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
 8000bf8:	4b4c      	ldr	r3, [pc, #304]	; (8000d2c <HAL_ETH_MspInit+0x178>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	4a4b      	ldr	r2, [pc, #300]	; (8000d2c <HAL_ETH_MspInit+0x178>)
 8000bfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c02:	6313      	str	r3, [r2, #48]	; 0x30
 8000c04:	4b49      	ldr	r3, [pc, #292]	; (8000d2c <HAL_ETH_MspInit+0x178>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c0c:	61fb      	str	r3, [r7, #28]
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	2300      	movs	r3, #0
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	4b45      	ldr	r3, [pc, #276]	; (8000d2c <HAL_ETH_MspInit+0x178>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	4a44      	ldr	r2, [pc, #272]	; (8000d2c <HAL_ETH_MspInit+0x178>)
 8000c1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c20:	4b42      	ldr	r3, [pc, #264]	; (8000d2c <HAL_ETH_MspInit+0x178>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	4b3e      	ldr	r3, [pc, #248]	; (8000d2c <HAL_ETH_MspInit+0x178>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	4a3d      	ldr	r2, [pc, #244]	; (8000d2c <HAL_ETH_MspInit+0x178>)
 8000c36:	f043 0304 	orr.w	r3, r3, #4
 8000c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3c:	4b3b      	ldr	r3, [pc, #236]	; (8000d2c <HAL_ETH_MspInit+0x178>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	f003 0304 	and.w	r3, r3, #4
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	4b37      	ldr	r3, [pc, #220]	; (8000d2c <HAL_ETH_MspInit+0x178>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	4a36      	ldr	r2, [pc, #216]	; (8000d2c <HAL_ETH_MspInit+0x178>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	6313      	str	r3, [r2, #48]	; 0x30
 8000c58:	4b34      	ldr	r3, [pc, #208]	; (8000d2c <HAL_ETH_MspInit+0x178>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <HAL_ETH_MspInit+0x178>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	4a2f      	ldr	r2, [pc, #188]	; (8000d2c <HAL_ETH_MspInit+0x178>)
 8000c6e:	f043 0302 	orr.w	r3, r3, #2
 8000c72:	6313      	str	r3, [r2, #48]	; 0x30
 8000c74:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <HAL_ETH_MspInit+0x178>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	4b29      	ldr	r3, [pc, #164]	; (8000d2c <HAL_ETH_MspInit+0x178>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c88:	4a28      	ldr	r2, [pc, #160]	; (8000d2c <HAL_ETH_MspInit+0x178>)
 8000c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c90:	4b26      	ldr	r3, [pc, #152]	; (8000d2c <HAL_ETH_MspInit+0x178>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c9c:	2332      	movs	r3, #50	; 0x32
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cac:	230b      	movs	r3, #11
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	481e      	ldr	r0, [pc, #120]	; (8000d30 <HAL_ETH_MspInit+0x17c>)
 8000cb8:	f000 ff4e 	bl	8001b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cbc:	2386      	movs	r3, #134	; 0x86
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ccc:	230b      	movs	r3, #11
 8000cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4817      	ldr	r0, [pc, #92]	; (8000d34 <HAL_ETH_MspInit+0x180>)
 8000cd8:	f000 ff3e 	bl	8001b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cee:	230b      	movs	r3, #11
 8000cf0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	480f      	ldr	r0, [pc, #60]	; (8000d38 <HAL_ETH_MspInit+0x184>)
 8000cfa:	f000 ff2d 	bl	8001b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cfe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d10:	230b      	movs	r3, #11
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4808      	ldr	r0, [pc, #32]	; (8000d3c <HAL_ETH_MspInit+0x188>)
 8000d1c:	f000 ff1c 	bl	8001b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d20:	bf00      	nop
 8000d22:	3738      	adds	r7, #56	; 0x38
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40028000 	.word	0x40028000
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020800 	.word	0x40020800
 8000d34:	40020000 	.word	0x40020000
 8000d38:	40020400 	.word	0x40020400
 8000d3c:	40021800 	.word	0x40021800

08000d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <HAL_UART_MspInit+0x84>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d12c      	bne.n	8000dbc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d70:	6413      	str	r3, [r2, #64]	; 0x40
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d88:	f043 0308 	orr.w	r3, r3, #8
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_UART_MspInit+0x88>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dac:	2307      	movs	r3, #7
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <HAL_UART_MspInit+0x8c>)
 8000db8:	f000 fece 	bl	8001b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3728      	adds	r7, #40	; 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40004800 	.word	0x40004800
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020c00 	.word	0x40020c00

08000dd0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000df0:	d13f      	bne.n	8000e72 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <HAL_PCD_MspInit+0xac>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <HAL_PCD_MspInit+0xac>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <HAL_PCD_MspInit+0xac>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e0e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e20:	230a      	movs	r3, #10
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4815      	ldr	r0, [pc, #84]	; (8000e80 <HAL_PCD_MspInit+0xb0>)
 8000e2c:	f000 fe94 	bl	8001b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	480e      	ldr	r0, [pc, #56]	; (8000e80 <HAL_PCD_MspInit+0xb0>)
 8000e46:	f000 fe87 	bl	8001b58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_PCD_MspInit+0xac>)
 8000e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <HAL_PCD_MspInit+0xac>)
 8000e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e54:	6353      	str	r3, [r2, #52]	; 0x34
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_PCD_MspInit+0xac>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_PCD_MspInit+0xac>)
 8000e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e64:	6453      	str	r3, [r2, #68]	; 0x44
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_PCD_MspInit+0xac>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	; 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020000 	.word	0x40020000

08000e84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08c      	sub	sp, #48	; 0x30
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	2019      	movs	r0, #25
 8000e9a:	f000 f9c7 	bl	800122c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e9e:	2019      	movs	r0, #25
 8000ea0:	f000 f9e0 	bl	8001264 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <HAL_InitTick+0xa4>)
 8000eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eac:	4a1e      	ldr	r2, [pc, #120]	; (8000f28 <HAL_InitTick+0xa4>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <HAL_InitTick+0xa4>)
 8000eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ec0:	f107 0210 	add.w	r2, r7, #16
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f001 fdb4 	bl	8002a38 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ed0:	f001 fd9e 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000edc:	4a13      	ldr	r2, [pc, #76]	; (8000f2c <HAL_InitTick+0xa8>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	0c9b      	lsrs	r3, r3, #18
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_InitTick+0xac>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <HAL_InitTick+0xb0>)
 8000eec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <HAL_InitTick+0xac>)
 8000ef0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ef4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <HAL_InitTick+0xac>)
 8000ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_InitTick+0xac>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_InitTick+0xac>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <HAL_InitTick+0xac>)
 8000f0a:	f001 fdc7 	bl	8002a9c <HAL_TIM_Base_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d104      	bne.n	8000f1e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f14:	4806      	ldr	r0, [pc, #24]	; (8000f30 <HAL_InitTick+0xac>)
 8000f16:	f001 fe1b 	bl	8002b50 <HAL_TIM_Base_Start_IT>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	e000      	b.n	8000f20 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3730      	adds	r7, #48	; 0x30
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	431bde83 	.word	0x431bde83
 8000f30:	20004480 	.word	0x20004480
 8000f34:	40010000 	.word	0x40010000

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <NMI_Handler+0x4>

08000f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <BusFault_Handler+0x4>

08000f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <UsageFault_Handler+0x4>

08000f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f6a:	f001 fe61 	bl	8002c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20004480 	.word	0x20004480

08000f78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <SystemInit+0x20>)
 8000f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <SystemInit+0x20>)
 8000f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fa2:	490e      	ldr	r1, [pc, #56]	; (8000fdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fb8:	4c0b      	ldr	r4, [pc, #44]	; (8000fe8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fc6:	f7ff ffd7 	bl	8000f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fca:	f005 f857 	bl	800607c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fce:	f7ff faa5 	bl	800051c <main>
  bx  lr    
 8000fd2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000fd4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fdc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000fe0:	080061a4 	.word	0x080061a4
  ldr r2, =_sbss
 8000fe4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000fe8:	200044cc 	.word	0x200044cc

08000fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC_IRQHandler>
	...

08000ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <HAL_Init+0x40>)
 8000ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <HAL_Init+0x40>)
 8001006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <HAL_Init+0x40>)
 8001012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001018:	2003      	movs	r0, #3
 800101a:	f000 f8fc 	bl	8001216 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101e:	2000      	movs	r0, #0
 8001020:	f7ff ff30 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001024:	f7ff fd9a 	bl	8000b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023c00 	.word	0x40023c00

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008
 8001058:	200044c8 	.word	0x200044c8

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	200044c8 	.word	0x200044c8

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff ffee 	bl	800105c <HAL_GetTick>
 8001080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d005      	beq.n	800109a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_Delay+0x44>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109a:	bf00      	nop
 800109c:	f7ff ffde 	bl	800105c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d8f7      	bhi.n	800109c <HAL_Delay+0x28>
  {
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000008 	.word	0x20000008

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	db0b      	blt.n	800114a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f003 021f 	and.w	r2, r3, #31
 8001138:	4907      	ldr	r1, [pc, #28]	; (8001158 <__NVIC_EnableIRQ+0x38>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	2001      	movs	r0, #1
 8001142:	fa00 f202 	lsl.w	r2, r0, r2
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ff4c 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800123e:	f7ff ff61 	bl	8001104 <__NVIC_GetPriorityGrouping>
 8001242:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	68b9      	ldr	r1, [r7, #8]
 8001248:	6978      	ldr	r0, [r7, #20]
 800124a:	f7ff ffb1 	bl	80011b0 <NVIC_EncodePriority>
 800124e:	4602      	mov	r2, r0
 8001250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff80 	bl	800115c <__NVIC_SetPriority>
}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff54 	bl	8001120 <__NVIC_EnableIRQ>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001290:	4baa      	ldr	r3, [pc, #680]	; (800153c <HAL_ETH_Init+0x2bc>)
 8001292:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001298:	2300      	movs	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e183      	b.n	80015ae <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d106      	bne.n	80012c0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fc7a 	bl	8000bb4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	4b9e      	ldr	r3, [pc, #632]	; (8001540 <HAL_ETH_Init+0x2c0>)
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	4a9d      	ldr	r2, [pc, #628]	; (8001540 <HAL_ETH_Init+0x2c0>)
 80012ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ce:	6453      	str	r3, [r2, #68]	; 0x44
 80012d0:	4b9b      	ldr	r3, [pc, #620]	; (8001540 <HAL_ETH_Init+0x2c0>)
 80012d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012dc:	4b99      	ldr	r3, [pc, #612]	; (8001544 <HAL_ETH_Init+0x2c4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	4a98      	ldr	r2, [pc, #608]	; (8001544 <HAL_ETH_Init+0x2c4>)
 80012e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012e6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012e8:	4b96      	ldr	r3, [pc, #600]	; (8001544 <HAL_ETH_Init+0x2c4>)
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	4994      	ldr	r1, [pc, #592]	; (8001544 <HAL_ETH_Init+0x2c4>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f042 0201 	orr.w	r2, r2, #1
 8001308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800130c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800130e:	f7ff fea5 	bl	800105c <HAL_GetTick>
 8001312:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001314:	e011      	b.n	800133a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001316:	f7ff fea1 	bl	800105c <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001324:	d909      	bls.n	800133a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2203      	movs	r2, #3
 800132a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e139      	b.n	80015ae <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1e4      	bne.n	8001316 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f023 031c 	bic.w	r3, r3, #28
 800135a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800135c:	f001 fb38 	bl	80029d0 <HAL_RCC_GetHCLKFreq>
 8001360:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	4a78      	ldr	r2, [pc, #480]	; (8001548 <HAL_ETH_Init+0x2c8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d908      	bls.n	800137c <HAL_ETH_Init+0xfc>
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	4a77      	ldr	r2, [pc, #476]	; (800154c <HAL_ETH_Init+0x2cc>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d804      	bhi.n	800137c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	f043 0308 	orr.w	r3, r3, #8
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	e027      	b.n	80013cc <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	4a73      	ldr	r2, [pc, #460]	; (800154c <HAL_ETH_Init+0x2cc>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d908      	bls.n	8001396 <HAL_ETH_Init+0x116>
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	4a6d      	ldr	r2, [pc, #436]	; (800153c <HAL_ETH_Init+0x2bc>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d204      	bcs.n	8001396 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f043 030c 	orr.w	r3, r3, #12
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	e01a      	b.n	80013cc <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	4a68      	ldr	r2, [pc, #416]	; (800153c <HAL_ETH_Init+0x2bc>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d303      	bcc.n	80013a6 <HAL_ETH_Init+0x126>
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	4a6b      	ldr	r2, [pc, #428]	; (8001550 <HAL_ETH_Init+0x2d0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d911      	bls.n	80013ca <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	4a69      	ldr	r2, [pc, #420]	; (8001550 <HAL_ETH_Init+0x2d0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d908      	bls.n	80013c0 <HAL_ETH_Init+0x140>
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	4a68      	ldr	r2, [pc, #416]	; (8001554 <HAL_ETH_Init+0x2d4>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d804      	bhi.n	80013c0 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	61fb      	str	r3, [r7, #28]
 80013be:	e005      	b.n	80013cc <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f043 0310 	orr.w	r3, r3, #16
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	e000      	b.n	80013cc <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80013ca:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	69fa      	ldr	r2, [r7, #28]
 80013d2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80013d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013d8:	2100      	movs	r1, #0
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f954 	bl	8001688 <HAL_ETH_WritePHYRegister>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80013ea:	6939      	ldr	r1, [r7, #16]
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f9b1 	bl	8001754 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e0d7      	b.n	80015ae <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80013fe:	20ff      	movs	r0, #255	; 0xff
 8001400:	f7ff fe38 	bl	8001074 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80a5 	beq.w	8001558 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800140e:	f7ff fe25 	bl	800105c <HAL_GetTick>
 8001412:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	461a      	mov	r2, r3
 800141a:	2101      	movs	r1, #1
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f8cb 	bl	80015b8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001422:	f7ff fe1b 	bl	800105c <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001430:	4293      	cmp	r3, r2
 8001432:	d90f      	bls.n	8001454 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001438:	6939      	ldr	r1, [r7, #16]
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f98a 	bl	8001754 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e0ac      	b.n	80015ae <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0da      	beq.n	8001414 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800145e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001462:	2100      	movs	r1, #0
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 f90f 	bl	8001688 <HAL_ETH_WritePHYRegister>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00b      	beq.n	8001488 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001474:	6939      	ldr	r1, [r7, #16]
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f96c 	bl	8001754 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001484:	2301      	movs	r3, #1
 8001486:	e092      	b.n	80015ae <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001488:	f7ff fde8 	bl	800105c <HAL_GetTick>
 800148c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	461a      	mov	r2, r3
 8001494:	2101      	movs	r1, #1
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 f88e 	bl	80015b8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800149c:	f7ff fdde 	bl	800105c <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d90f      	bls.n	80014ce <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80014b2:	6939      	ldr	r1, [r7, #16]
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f94d 	bl	8001754 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e06f      	b.n	80015ae <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f003 0320 	and.w	r3, r3, #32
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0da      	beq.n	800148e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	461a      	mov	r2, r3
 80014de:	2110      	movs	r1, #16
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 f869 	bl	80015b8 <HAL_ETH_ReadPHYRegister>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00b      	beq.n	8001504 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014f0:	6939      	ldr	r1, [r7, #16]
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f92e 	bl	8001754 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001500:	2301      	movs	r3, #1
 8001502:	e054      	b.n	80015ae <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	2b00      	cmp	r3, #0
 800150c:	d004      	beq.n	8001518 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	e002      	b.n	800151e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	e035      	b.n	800159c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	e030      	b.n	800159c <HAL_ETH_Init+0x31c>
 800153a:	bf00      	nop
 800153c:	03938700 	.word	0x03938700
 8001540:	40023800 	.word	0x40023800
 8001544:	40013800 	.word	0x40013800
 8001548:	01312cff 	.word	0x01312cff
 800154c:	02160ebf 	.word	0x02160ebf
 8001550:	05f5e0ff 	.word	0x05f5e0ff
 8001554:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	08db      	lsrs	r3, r3, #3
 800155e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	085b      	lsrs	r3, r3, #1
 8001566:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001568:	4313      	orrs	r3, r2
 800156a:	b29b      	uxth	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	2100      	movs	r1, #0
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f889 	bl	8001688 <HAL_ETH_WritePHYRegister>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00b      	beq.n	8001594 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001580:	6939      	ldr	r1, [r7, #16]
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f8e6 	bl	8001754 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e00c      	b.n	80015ae <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001594:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001598:	f7ff fd6c 	bl	8001074 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800159c:	6939      	ldr	r1, [r7, #16]
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f8d8 	bl	8001754 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3720      	adds	r7, #32
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop

080015b8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	460b      	mov	r3, r1
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b82      	cmp	r3, #130	; 0x82
 80015d8:	d101      	bne.n	80015de <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80015da:	2302      	movs	r3, #2
 80015dc:	e050      	b.n	8001680 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2282      	movs	r2, #130	; 0x82
 80015e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f003 031c 	and.w	r3, r3, #28
 80015f4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	8a1b      	ldrh	r3, [r3, #16]
 80015fa:	02db      	lsls	r3, r3, #11
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4313      	orrs	r3, r2
 8001602:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001604:	897b      	ldrh	r3, [r7, #10]
 8001606:	019b      	lsls	r3, r3, #6
 8001608:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	4313      	orrs	r3, r2
 8001610:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f023 0302 	bic.w	r3, r3, #2
 8001618:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800162a:	f7ff fd17 	bl	800105c <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001630:	e015      	b.n	800165e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001632:	f7ff fd13 	bl	800105c <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001640:	d309      	bcc.n	8001656 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e014      	b.n	8001680 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1e4      	bne.n	8001632 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	b29b      	uxth	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	460b      	mov	r3, r1
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b42      	cmp	r3, #66	; 0x42
 80016a8:	d101      	bne.n	80016ae <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80016aa:	2302      	movs	r3, #2
 80016ac:	e04e      	b.n	800174c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2242      	movs	r2, #66	; 0x42
 80016b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f003 031c 	and.w	r3, r3, #28
 80016c4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8a1b      	ldrh	r3, [r3, #16]
 80016ca:	02db      	lsls	r3, r3, #11
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80016d4:	897b      	ldrh	r3, [r7, #10]
 80016d6:	019b      	lsls	r3, r3, #6
 80016d8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	4313      	orrs	r3, r2
 80016e0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001704:	f7ff fcaa 	bl	800105c <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800170a:	e015      	b.n	8001738 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800170c:	f7ff fca6 	bl	800105c <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171a:	d309      	bcc.n	8001730 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e00d      	b.n	800174c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1e4      	bne.n	800170c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b0b0      	sub	sp, #192	; 0xc0
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d007      	beq.n	800177a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001770:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001778:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001782:	2300      	movs	r3, #0
 8001784:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d103      	bne.n	80017a2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800179a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800179e:	663b      	str	r3, [r7, #96]	; 0x60
 80017a0:	e001      	b.n	80017a6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80017a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017aa:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017b0:	2300      	movs	r3, #0
 80017b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80017c0:	2340      	movs	r3, #64	; 0x40
 80017c2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80017dc:	2300      	movs	r3, #0
 80017de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001818:	2300      	movs	r3, #0
 800181a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001828:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800182c:	4bac      	ldr	r3, [pc, #688]	; (8001ae0 <ETH_MACDMAConfig+0x38c>)
 800182e:	4013      	ands	r3, r2
 8001830:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001834:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001838:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800183a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800183c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800183e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001840:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001846:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001848:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800184a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800184c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800184e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001854:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001858:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800185a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800185c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800185e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001860:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001864:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001866:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001868:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800186a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800186e:	4313      	orrs	r3, r2
 8001870:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800187c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001888:	2001      	movs	r0, #1
 800188a:	f7ff fbf3 	bl	8001074 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001896:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001898:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800189a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800189c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800189e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80018a0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80018a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80018a6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80018a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80018ac:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80018ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80018b2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80018b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80018b8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80018bc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80018c4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80018c6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f7ff fbce 	bl	8001074 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018e0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80018ea:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80018f4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001900:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001904:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001908:	4013      	ands	r3, r2
 800190a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800190e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001912:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001914:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001918:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800191a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800191e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001920:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001924:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800192a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800192c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001930:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001932:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001936:	4313      	orrs	r3, r2
 8001938:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001944:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001950:	2001      	movs	r0, #1
 8001952:	f7ff fb8f 	bl	8001074 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800195e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001960:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001964:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800197a:	2001      	movs	r0, #1
 800197c:	f7ff fb7a 	bl	8001074 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001988:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800198e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001992:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001998:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800199c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80019ae:	2304      	movs	r3, #4
 80019b0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80019b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80019b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019bc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80019be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80019c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80019d2:	2300      	movs	r3, #0
 80019d4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019de:	3318      	adds	r3, #24
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80019e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019ea:	4b3e      	ldr	r3, [pc, #248]	; (8001ae4 <ETH_MACDMAConfig+0x390>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80019f2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80019f4:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80019f6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80019f8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80019fa:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80019fc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80019fe:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001a00:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001a02:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001a04:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001a06:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001a08:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001a0a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001a0e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001a12:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001a14:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a26:	3318      	adds	r3, #24
 8001a28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a2c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a36:	3318      	adds	r3, #24
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a3e:	2001      	movs	r0, #1
 8001a40:	f7ff fb18 	bl	8001074 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a4c:	3318      	adds	r3, #24
 8001a4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a52:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001a58:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001a5c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001a60:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001a64:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a68:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001a6a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001a6e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f7ff faf1 	bl	8001074 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a9e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d10f      	bne.n	8001ac8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab0:	331c      	adds	r3, #28
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001abc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac4:	331c      	adds	r3, #28
 8001ac6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	461a      	mov	r2, r3
 8001ace:	2100      	movs	r1, #0
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f809 	bl	8001ae8 <ETH_MACAddressConfig>
}
 8001ad6:	bf00      	nop
 8001ad8:	37c0      	adds	r7, #192	; 0xc0
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	ff20810f 	.word	0xff20810f
 8001ae4:	f8de3f23 	.word	0xf8de3f23

08001ae8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3305      	adds	r3, #5
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	3204      	adds	r2, #4
 8001b00:	7812      	ldrb	r2, [r2, #0]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <ETH_MACAddressConfig+0x68>)
 8001b0a:	4413      	add	r3, r2
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3303      	adds	r3, #3
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	061a      	lsls	r2, r3, #24
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	041b      	lsls	r3, r3, #16
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3301      	adds	r3, #1
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	7812      	ldrb	r2, [r2, #0]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <ETH_MACAddressConfig+0x6c>)
 8001b3a:	4413      	add	r3, r2
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	6013      	str	r3, [r2, #0]
}
 8001b42:	bf00      	nop
 8001b44:	371c      	adds	r7, #28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40028040 	.word	0x40028040
 8001b54:	40028044 	.word	0x40028044

08001b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
 8001b72:	e177      	b.n	8001e64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b74:	2201      	movs	r2, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	4013      	ands	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	f040 8166 	bne.w	8001e5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d005      	beq.n	8001baa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d130      	bne.n	8001c0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be0:	2201      	movs	r2, #1
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	f003 0201 	and.w	r2, r3, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d017      	beq.n	8001c48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	2203      	movs	r2, #3
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d123      	bne.n	8001c9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	08da      	lsrs	r2, r3, #3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3208      	adds	r2, #8
 8001c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	220f      	movs	r2, #15
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	691a      	ldr	r2, [r3, #16]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	08da      	lsrs	r2, r3, #3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3208      	adds	r2, #8
 8001c96:	69b9      	ldr	r1, [r7, #24]
 8001c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0203 	and.w	r2, r3, #3
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 80c0 	beq.w	8001e5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	4b66      	ldr	r3, [pc, #408]	; (8001e7c <HAL_GPIO_Init+0x324>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	4a65      	ldr	r2, [pc, #404]	; (8001e7c <HAL_GPIO_Init+0x324>)
 8001ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cec:	6453      	str	r3, [r2, #68]	; 0x44
 8001cee:	4b63      	ldr	r3, [pc, #396]	; (8001e7c <HAL_GPIO_Init+0x324>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cfa:	4a61      	ldr	r2, [pc, #388]	; (8001e80 <HAL_GPIO_Init+0x328>)
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	089b      	lsrs	r3, r3, #2
 8001d00:	3302      	adds	r3, #2
 8001d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	220f      	movs	r2, #15
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a58      	ldr	r2, [pc, #352]	; (8001e84 <HAL_GPIO_Init+0x32c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d037      	beq.n	8001d96 <HAL_GPIO_Init+0x23e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a57      	ldr	r2, [pc, #348]	; (8001e88 <HAL_GPIO_Init+0x330>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d031      	beq.n	8001d92 <HAL_GPIO_Init+0x23a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a56      	ldr	r2, [pc, #344]	; (8001e8c <HAL_GPIO_Init+0x334>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d02b      	beq.n	8001d8e <HAL_GPIO_Init+0x236>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a55      	ldr	r2, [pc, #340]	; (8001e90 <HAL_GPIO_Init+0x338>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d025      	beq.n	8001d8a <HAL_GPIO_Init+0x232>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a54      	ldr	r2, [pc, #336]	; (8001e94 <HAL_GPIO_Init+0x33c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d01f      	beq.n	8001d86 <HAL_GPIO_Init+0x22e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a53      	ldr	r2, [pc, #332]	; (8001e98 <HAL_GPIO_Init+0x340>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d019      	beq.n	8001d82 <HAL_GPIO_Init+0x22a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a52      	ldr	r2, [pc, #328]	; (8001e9c <HAL_GPIO_Init+0x344>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d013      	beq.n	8001d7e <HAL_GPIO_Init+0x226>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a51      	ldr	r2, [pc, #324]	; (8001ea0 <HAL_GPIO_Init+0x348>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00d      	beq.n	8001d7a <HAL_GPIO_Init+0x222>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a50      	ldr	r2, [pc, #320]	; (8001ea4 <HAL_GPIO_Init+0x34c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d007      	beq.n	8001d76 <HAL_GPIO_Init+0x21e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4f      	ldr	r2, [pc, #316]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <HAL_GPIO_Init+0x21a>
 8001d6e:	2309      	movs	r3, #9
 8001d70:	e012      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d72:	230a      	movs	r3, #10
 8001d74:	e010      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d76:	2308      	movs	r3, #8
 8001d78:	e00e      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d7a:	2307      	movs	r3, #7
 8001d7c:	e00c      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d7e:	2306      	movs	r3, #6
 8001d80:	e00a      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d82:	2305      	movs	r3, #5
 8001d84:	e008      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d86:	2304      	movs	r3, #4
 8001d88:	e006      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e004      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e002      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <HAL_GPIO_Init+0x240>
 8001d96:	2300      	movs	r3, #0
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	f002 0203 	and.w	r2, r2, #3
 8001d9e:	0092      	lsls	r2, r2, #2
 8001da0:	4093      	lsls	r3, r2
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da8:	4935      	ldr	r1, [pc, #212]	; (8001e80 <HAL_GPIO_Init+0x328>)
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	089b      	lsrs	r3, r3, #2
 8001dae:	3302      	adds	r3, #2
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db6:	4b3d      	ldr	r3, [pc, #244]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dda:	4a34      	ldr	r2, [pc, #208]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001de0:	4b32      	ldr	r3, [pc, #200]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e04:	4a29      	ldr	r2, [pc, #164]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e0a:	4b28      	ldr	r3, [pc, #160]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e2e:	4a1f      	ldr	r2, [pc, #124]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e34:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e58:	4a14      	ldr	r2, [pc, #80]	; (8001eac <HAL_GPIO_Init+0x354>)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3301      	adds	r3, #1
 8001e62:	61fb      	str	r3, [r7, #28]
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	2b0f      	cmp	r3, #15
 8001e68:	f67f ae84 	bls.w	8001b74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3724      	adds	r7, #36	; 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40013800 	.word	0x40013800
 8001e84:	40020000 	.word	0x40020000
 8001e88:	40020400 	.word	0x40020400
 8001e8c:	40020800 	.word	0x40020800
 8001e90:	40020c00 	.word	0x40020c00
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40021400 	.word	0x40021400
 8001e9c:	40021800 	.word	0x40021800
 8001ea0:	40021c00 	.word	0x40021c00
 8001ea4:	40022000 	.word	0x40022000
 8001ea8:	40022400 	.word	0x40022400
 8001eac:	40013c00 	.word	0x40013c00

08001eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec0:	787b      	ldrb	r3, [r7, #1]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ecc:	e003      	b.n	8001ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ece:	887b      	ldrh	r3, [r7, #2]
 8001ed0:	041a      	lsls	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	619a      	str	r2, [r3, #24]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	460b      	mov	r3, r1
 8001eec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ef4:	887a      	ldrh	r2, [r7, #2]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	041a      	lsls	r2, r3, #16
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	43d9      	mvns	r1, r3
 8001f00:	887b      	ldrh	r3, [r7, #2]
 8001f02:	400b      	ands	r3, r1
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	619a      	str	r2, [r3, #24]
}
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f18:	b08f      	sub	sp, #60	; 0x3c
 8001f1a:	af0a      	add	r7, sp, #40	; 0x28
 8001f1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e10f      	b.n	8002148 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d106      	bne.n	8001f48 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7fe ff44 	bl	8000dd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d102      	bne.n	8001f62 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f001 fabd 	bl	80034e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	687e      	ldr	r6, [r7, #4]
 8001f74:	466d      	mov	r5, sp
 8001f76:	f106 0410 	add.w	r4, r6, #16
 8001f7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f86:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f8a:	1d33      	adds	r3, r6, #4
 8001f8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f8e:	6838      	ldr	r0, [r7, #0]
 8001f90:	f001 fa48 	bl	8003424 <USB_CoreInit>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0d0      	b.n	8002148 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f001 faab 	bl	8003508 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73fb      	strb	r3, [r7, #15]
 8001fb6:	e04a      	b.n	800204e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	333d      	adds	r3, #61	; 0x3d
 8001fc8:	2201      	movs	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fcc:	7bfa      	ldrb	r2, [r7, #15]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	333c      	adds	r3, #60	; 0x3c
 8001fdc:	7bfa      	ldrb	r2, [r7, #15]
 8001fde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	b298      	uxth	r0, r3
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	3342      	adds	r3, #66	; 0x42
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ff8:	7bfa      	ldrb	r2, [r7, #15]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	333f      	adds	r3, #63	; 0x3f
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800200c:	7bfa      	ldrb	r2, [r7, #15]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	3344      	adds	r3, #68	; 0x44
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	3348      	adds	r3, #72	; 0x48
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	3350      	adds	r3, #80	; 0x50
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	3301      	adds	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	d3af      	bcc.n	8001fb8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	e044      	b.n	80020e8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	1a9b      	subs	r3, r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002074:	7bfa      	ldrb	r2, [r7, #15]
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	1a9b      	subs	r3, r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800208a:	7bfa      	ldrb	r2, [r7, #15]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	1a9b      	subs	r3, r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	3301      	adds	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d3b5      	bcc.n	800205e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	687e      	ldr	r6, [r7, #4]
 80020fa:	466d      	mov	r5, sp
 80020fc:	f106 0410 	add.w	r4, r6, #16
 8002100:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002102:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002108:	e894 0003 	ldmia.w	r4, {r0, r1}
 800210c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002110:	1d33      	adds	r3, r6, #4
 8002112:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002114:	6838      	ldr	r0, [r7, #0]
 8002116:	f001 fa43 	bl	80035a0 <USB_DevInit>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e00d      	b.n	8002148 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f001 fbee 	bl	8003922 <USB_DevDisconnect>

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002150 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e264      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d075      	beq.n	800225a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800216e:	4ba3      	ldr	r3, [pc, #652]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b04      	cmp	r3, #4
 8002178:	d00c      	beq.n	8002194 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800217a:	4ba0      	ldr	r3, [pc, #640]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002182:	2b08      	cmp	r3, #8
 8002184:	d112      	bne.n	80021ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002186:	4b9d      	ldr	r3, [pc, #628]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002192:	d10b      	bne.n	80021ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	4b99      	ldr	r3, [pc, #612]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d05b      	beq.n	8002258 <HAL_RCC_OscConfig+0x108>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d157      	bne.n	8002258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e23f      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b4:	d106      	bne.n	80021c4 <HAL_RCC_OscConfig+0x74>
 80021b6:	4b91      	ldr	r3, [pc, #580]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a90      	ldr	r2, [pc, #576]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e01d      	b.n	8002200 <HAL_RCC_OscConfig+0xb0>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x98>
 80021ce:	4b8b      	ldr	r3, [pc, #556]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a8a      	ldr	r2, [pc, #552]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b88      	ldr	r3, [pc, #544]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a87      	ldr	r2, [pc, #540]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0xb0>
 80021e8:	4b84      	ldr	r3, [pc, #528]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a83      	ldr	r2, [pc, #524]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b81      	ldr	r3, [pc, #516]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a80      	ldr	r2, [pc, #512]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7fe ff28 	bl	800105c <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002210:	f7fe ff24 	bl	800105c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	; 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e204      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b76      	ldr	r3, [pc, #472]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0xc0>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7fe ff14 	bl	800105c <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002238:	f7fe ff10 	bl	800105c <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	; 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e1f0      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	4b6c      	ldr	r3, [pc, #432]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0xe8>
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d063      	beq.n	800232e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002266:	4b65      	ldr	r3, [pc, #404]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002272:	4b62      	ldr	r3, [pc, #392]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800227a:	2b08      	cmp	r3, #8
 800227c:	d11c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800227e:	4b5f      	ldr	r3, [pc, #380]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d116      	bne.n	80022b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	4b5c      	ldr	r3, [pc, #368]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_RCC_OscConfig+0x152>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e1c4      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4b56      	ldr	r3, [pc, #344]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4952      	ldr	r1, [pc, #328]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	e03a      	b.n	800232e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d020      	beq.n	8002302 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c0:	4b4f      	ldr	r3, [pc, #316]	; (8002400 <HAL_RCC_OscConfig+0x2b0>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7fe fec9 	bl	800105c <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ce:	f7fe fec5 	bl	800105c <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1a5      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	4b46      	ldr	r3, [pc, #280]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ec:	4b43      	ldr	r3, [pc, #268]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4940      	ldr	r1, [pc, #256]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
 8002300:	e015      	b.n	800232e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002302:	4b3f      	ldr	r3, [pc, #252]	; (8002400 <HAL_RCC_OscConfig+0x2b0>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7fe fea8 	bl	800105c <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002310:	f7fe fea4 	bl	800105c <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e184      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	4b36      	ldr	r3, [pc, #216]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d030      	beq.n	800239c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d016      	beq.n	8002370 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002342:	4b30      	ldr	r3, [pc, #192]	; (8002404 <HAL_RCC_OscConfig+0x2b4>)
 8002344:	2201      	movs	r2, #1
 8002346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002348:	f7fe fe88 	bl	800105c <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002350:	f7fe fe84 	bl	800105c <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e164      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	4b26      	ldr	r3, [pc, #152]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x200>
 800236e:	e015      	b.n	800239c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002370:	4b24      	ldr	r3, [pc, #144]	; (8002404 <HAL_RCC_OscConfig+0x2b4>)
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002376:	f7fe fe71 	bl	800105c <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237e:	f7fe fe6d 	bl	800105c <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e14d      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002390:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f0      	bne.n	800237e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80a0 	beq.w	80024ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ae:	4b13      	ldr	r3, [pc, #76]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10f      	bne.n	80023da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	4a0e      	ldr	r2, [pc, #56]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ca:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d6:	2301      	movs	r3, #1
 80023d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <HAL_RCC_OscConfig+0x2b8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d121      	bne.n	800242a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <HAL_RCC_OscConfig+0x2b8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a07      	ldr	r2, [pc, #28]	; (8002408 <HAL_RCC_OscConfig+0x2b8>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f2:	f7fe fe33 	bl	800105c <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	e011      	b.n	800241e <HAL_RCC_OscConfig+0x2ce>
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	42470000 	.word	0x42470000
 8002404:	42470e80 	.word	0x42470e80
 8002408:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240c:	f7fe fe26 	bl	800105c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e106      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241e:	4b85      	ldr	r3, [pc, #532]	; (8002634 <HAL_RCC_OscConfig+0x4e4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d106      	bne.n	8002440 <HAL_RCC_OscConfig+0x2f0>
 8002432:	4b81      	ldr	r3, [pc, #516]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 8002434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002436:	4a80      	ldr	r2, [pc, #512]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	6713      	str	r3, [r2, #112]	; 0x70
 800243e:	e01c      	b.n	800247a <HAL_RCC_OscConfig+0x32a>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b05      	cmp	r3, #5
 8002446:	d10c      	bne.n	8002462 <HAL_RCC_OscConfig+0x312>
 8002448:	4b7b      	ldr	r3, [pc, #492]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 800244a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244c:	4a7a      	ldr	r2, [pc, #488]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 800244e:	f043 0304 	orr.w	r3, r3, #4
 8002452:	6713      	str	r3, [r2, #112]	; 0x70
 8002454:	4b78      	ldr	r3, [pc, #480]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002458:	4a77      	ldr	r2, [pc, #476]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6713      	str	r3, [r2, #112]	; 0x70
 8002460:	e00b      	b.n	800247a <HAL_RCC_OscConfig+0x32a>
 8002462:	4b75      	ldr	r3, [pc, #468]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 8002464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002466:	4a74      	ldr	r2, [pc, #464]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 8002468:	f023 0301 	bic.w	r3, r3, #1
 800246c:	6713      	str	r3, [r2, #112]	; 0x70
 800246e:	4b72      	ldr	r3, [pc, #456]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002472:	4a71      	ldr	r2, [pc, #452]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 8002474:	f023 0304 	bic.w	r3, r3, #4
 8002478:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d015      	beq.n	80024ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002482:	f7fe fdeb 	bl	800105c <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7fe fde7 	bl	800105c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	; 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e0c5      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a0:	4b65      	ldr	r3, [pc, #404]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0ee      	beq.n	800248a <HAL_RCC_OscConfig+0x33a>
 80024ac:	e014      	b.n	80024d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ae:	f7fe fdd5 	bl	800105c <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7fe fdd1 	bl	800105c <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e0af      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024cc:	4b5a      	ldr	r3, [pc, #360]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1ee      	bne.n	80024b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024d8:	7dfb      	ldrb	r3, [r7, #23]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d105      	bne.n	80024ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024de:	4b56      	ldr	r3, [pc, #344]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4a55      	ldr	r2, [pc, #340]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 80024e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 809b 	beq.w	800262a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024f4:	4b50      	ldr	r3, [pc, #320]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d05c      	beq.n	80025ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d141      	bne.n	800258c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002508:	4b4c      	ldr	r3, [pc, #304]	; (800263c <HAL_RCC_OscConfig+0x4ec>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7fe fda5 	bl	800105c <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002516:	f7fe fda1 	bl	800105c <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e081      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002528:	4b43      	ldr	r3, [pc, #268]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69da      	ldr	r2, [r3, #28]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	019b      	lsls	r3, r3, #6
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	085b      	lsrs	r3, r3, #1
 800254c:	3b01      	subs	r3, #1
 800254e:	041b      	lsls	r3, r3, #16
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	061b      	lsls	r3, r3, #24
 8002558:	4937      	ldr	r1, [pc, #220]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800255e:	4b37      	ldr	r3, [pc, #220]	; (800263c <HAL_RCC_OscConfig+0x4ec>)
 8002560:	2201      	movs	r2, #1
 8002562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002564:	f7fe fd7a 	bl	800105c <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe fd76 	bl	800105c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e056      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257e:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x41c>
 800258a:	e04e      	b.n	800262a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258c:	4b2b      	ldr	r3, [pc, #172]	; (800263c <HAL_RCC_OscConfig+0x4ec>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7fe fd63 	bl	800105c <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259a:	f7fe fd5f 	bl	800105c <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e03f      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ac:	4b22      	ldr	r3, [pc, #136]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x44a>
 80025b8:	e037      	b.n	800262a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e032      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025c6:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <HAL_RCC_OscConfig+0x4e8>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d028      	beq.n	8002626 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d121      	bne.n	8002626 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d11a      	bne.n	8002626 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025f6:	4013      	ands	r3, r2
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025fe:	4293      	cmp	r3, r2
 8002600:	d111      	bne.n	8002626 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260c:	085b      	lsrs	r3, r3, #1
 800260e:	3b01      	subs	r3, #1
 8002610:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002612:	429a      	cmp	r2, r3
 8002614:	d107      	bne.n	8002626 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d001      	beq.n	800262a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40007000 	.word	0x40007000
 8002638:	40023800 	.word	0x40023800
 800263c:	42470060 	.word	0x42470060

08002640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0cc      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002654:	4b68      	ldr	r3, [pc, #416]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d90c      	bls.n	800267c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b65      	ldr	r3, [pc, #404]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b63      	ldr	r3, [pc, #396]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0b8      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d020      	beq.n	80026ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002694:	4b59      	ldr	r3, [pc, #356]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4a58      	ldr	r2, [pc, #352]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800269e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026ac:	4b53      	ldr	r3, [pc, #332]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4a52      	ldr	r2, [pc, #328]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b8:	4b50      	ldr	r3, [pc, #320]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	494d      	ldr	r1, [pc, #308]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d044      	beq.n	8002760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	4b47      	ldr	r3, [pc, #284]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d119      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e07f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d003      	beq.n	80026fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fe:	4b3f      	ldr	r3, [pc, #252]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d109      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e06f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270e:	4b3b      	ldr	r3, [pc, #236]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e067      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800271e:	4b37      	ldr	r3, [pc, #220]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f023 0203 	bic.w	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	4934      	ldr	r1, [pc, #208]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	4313      	orrs	r3, r2
 800272e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002730:	f7fe fc94 	bl	800105c <HAL_GetTick>
 8002734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	e00a      	b.n	800274e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002738:	f7fe fc90 	bl	800105c <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	; 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e04f      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 020c 	and.w	r2, r3, #12
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	429a      	cmp	r2, r3
 800275e:	d1eb      	bne.n	8002738 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002760:	4b25      	ldr	r3, [pc, #148]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d20c      	bcs.n	8002788 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e032      	b.n	80027ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002794:	4b19      	ldr	r3, [pc, #100]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4916      	ldr	r1, [pc, #88]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027b2:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	490e      	ldr	r1, [pc, #56]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027c6:	f000 f821 	bl	800280c <HAL_RCC_GetSysClockFreq>
 80027ca:	4602      	mov	r2, r0
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	490a      	ldr	r1, [pc, #40]	; (8002800 <HAL_RCC_ClockConfig+0x1c0>)
 80027d8:	5ccb      	ldrb	r3, [r1, r3]
 80027da:	fa22 f303 	lsr.w	r3, r2, r3
 80027de:	4a09      	ldr	r2, [pc, #36]	; (8002804 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027e2:	4b09      	ldr	r3, [pc, #36]	; (8002808 <HAL_RCC_ClockConfig+0x1c8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe fb4c 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40023c00 	.word	0x40023c00
 80027fc:	40023800 	.word	0x40023800
 8002800:	0800617c 	.word	0x0800617c
 8002804:	20000000 	.word	0x20000000
 8002808:	20000004 	.word	0x20000004

0800280c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800280c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	2300      	movs	r3, #0
 800281e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002824:	4b67      	ldr	r3, [pc, #412]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	d00d      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x40>
 8002830:	2b08      	cmp	r3, #8
 8002832:	f200 80bd 	bhi.w	80029b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x34>
 800283a:	2b04      	cmp	r3, #4
 800283c:	d003      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x3a>
 800283e:	e0b7      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002840:	4b61      	ldr	r3, [pc, #388]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002842:	60bb      	str	r3, [r7, #8]
       break;
 8002844:	e0b7      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002846:	4b61      	ldr	r3, [pc, #388]	; (80029cc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002848:	60bb      	str	r3, [r7, #8]
      break;
 800284a:	e0b4      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800284c:	4b5d      	ldr	r3, [pc, #372]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002854:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002856:	4b5b      	ldr	r3, [pc, #364]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d04d      	beq.n	80028fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002862:	4b58      	ldr	r3, [pc, #352]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	099b      	lsrs	r3, r3, #6
 8002868:	461a      	mov	r2, r3
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002872:	f04f 0100 	mov.w	r1, #0
 8002876:	ea02 0800 	and.w	r8, r2, r0
 800287a:	ea03 0901 	and.w	r9, r3, r1
 800287e:	4640      	mov	r0, r8
 8002880:	4649      	mov	r1, r9
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	014b      	lsls	r3, r1, #5
 800288c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002890:	0142      	lsls	r2, r0, #5
 8002892:	4610      	mov	r0, r2
 8002894:	4619      	mov	r1, r3
 8002896:	ebb0 0008 	subs.w	r0, r0, r8
 800289a:	eb61 0109 	sbc.w	r1, r1, r9
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	018b      	lsls	r3, r1, #6
 80028a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028ac:	0182      	lsls	r2, r0, #6
 80028ae:	1a12      	subs	r2, r2, r0
 80028b0:	eb63 0301 	sbc.w	r3, r3, r1
 80028b4:	f04f 0000 	mov.w	r0, #0
 80028b8:	f04f 0100 	mov.w	r1, #0
 80028bc:	00d9      	lsls	r1, r3, #3
 80028be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028c2:	00d0      	lsls	r0, r2, #3
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	eb12 0208 	adds.w	r2, r2, r8
 80028cc:	eb43 0309 	adc.w	r3, r3, r9
 80028d0:	f04f 0000 	mov.w	r0, #0
 80028d4:	f04f 0100 	mov.w	r1, #0
 80028d8:	0259      	lsls	r1, r3, #9
 80028da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80028de:	0250      	lsls	r0, r2, #9
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	461a      	mov	r2, r3
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	f7fd fc7e 	bl	80001f0 <__aeabi_uldivmod>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4613      	mov	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	e04a      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fe:	4b31      	ldr	r3, [pc, #196]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	099b      	lsrs	r3, r3, #6
 8002904:	461a      	mov	r2, r3
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800290e:	f04f 0100 	mov.w	r1, #0
 8002912:	ea02 0400 	and.w	r4, r2, r0
 8002916:	ea03 0501 	and.w	r5, r3, r1
 800291a:	4620      	mov	r0, r4
 800291c:	4629      	mov	r1, r5
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	014b      	lsls	r3, r1, #5
 8002928:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800292c:	0142      	lsls	r2, r0, #5
 800292e:	4610      	mov	r0, r2
 8002930:	4619      	mov	r1, r3
 8002932:	1b00      	subs	r0, r0, r4
 8002934:	eb61 0105 	sbc.w	r1, r1, r5
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	018b      	lsls	r3, r1, #6
 8002942:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002946:	0182      	lsls	r2, r0, #6
 8002948:	1a12      	subs	r2, r2, r0
 800294a:	eb63 0301 	sbc.w	r3, r3, r1
 800294e:	f04f 0000 	mov.w	r0, #0
 8002952:	f04f 0100 	mov.w	r1, #0
 8002956:	00d9      	lsls	r1, r3, #3
 8002958:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800295c:	00d0      	lsls	r0, r2, #3
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	1912      	adds	r2, r2, r4
 8002964:	eb45 0303 	adc.w	r3, r5, r3
 8002968:	f04f 0000 	mov.w	r0, #0
 800296c:	f04f 0100 	mov.w	r1, #0
 8002970:	0299      	lsls	r1, r3, #10
 8002972:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002976:	0290      	lsls	r0, r2, #10
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4610      	mov	r0, r2
 800297e:	4619      	mov	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	461a      	mov	r2, r3
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	f7fd fc32 	bl	80001f0 <__aeabi_uldivmod>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4613      	mov	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	3301      	adds	r3, #1
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ac:	60bb      	str	r3, [r7, #8]
      break;
 80029ae:	e002      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029b2:	60bb      	str	r3, [r7, #8]
      break;
 80029b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029b6:	68bb      	ldr	r3, [r7, #8]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800
 80029c8:	00f42400 	.word	0x00f42400
 80029cc:	007a1200 	.word	0x007a1200

080029d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029d6:	681b      	ldr	r3, [r3, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000000 	.word	0x20000000

080029e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029ec:	f7ff fff0 	bl	80029d0 <HAL_RCC_GetHCLKFreq>
 80029f0:	4602      	mov	r2, r0
 80029f2:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	0a9b      	lsrs	r3, r3, #10
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	4903      	ldr	r1, [pc, #12]	; (8002a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	0800618c 	.word	0x0800618c

08002a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a14:	f7ff ffdc 	bl	80029d0 <HAL_RCC_GetHCLKFreq>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	0b5b      	lsrs	r3, r3, #13
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	4903      	ldr	r1, [pc, #12]	; (8002a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a26:	5ccb      	ldrb	r3, [r1, r3]
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40023800 	.word	0x40023800
 8002a34:	0800618c 	.word	0x0800618c

08002a38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	220f      	movs	r2, #15
 8002a46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a48:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <HAL_RCC_GetClockConfig+0x5c>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0203 	and.w	r2, r3, #3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a54:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <HAL_RCC_GetClockConfig+0x5c>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <HAL_RCC_GetClockConfig+0x5c>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a6c:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <HAL_RCC_GetClockConfig+0x5c>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	08db      	lsrs	r3, r3, #3
 8002a72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <HAL_RCC_GetClockConfig+0x60>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 020f 	and.w	r2, r3, #15
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	601a      	str	r2, [r3, #0]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800
 8002a98:	40023c00 	.word	0x40023c00

08002a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e041      	b.n	8002b32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f839 	bl	8002b3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4610      	mov	r0, r2
 8002adc:	f000 f9d8 	bl	8002e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d001      	beq.n	8002b68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e04e      	b.n	8002c06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a23      	ldr	r2, [pc, #140]	; (8002c14 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d022      	beq.n	8002bd0 <HAL_TIM_Base_Start_IT+0x80>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b92:	d01d      	beq.n	8002bd0 <HAL_TIM_Base_Start_IT+0x80>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a1f      	ldr	r2, [pc, #124]	; (8002c18 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d018      	beq.n	8002bd0 <HAL_TIM_Base_Start_IT+0x80>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a1e      	ldr	r2, [pc, #120]	; (8002c1c <HAL_TIM_Base_Start_IT+0xcc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d013      	beq.n	8002bd0 <HAL_TIM_Base_Start_IT+0x80>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a1c      	ldr	r2, [pc, #112]	; (8002c20 <HAL_TIM_Base_Start_IT+0xd0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d00e      	beq.n	8002bd0 <HAL_TIM_Base_Start_IT+0x80>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a1b      	ldr	r2, [pc, #108]	; (8002c24 <HAL_TIM_Base_Start_IT+0xd4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d009      	beq.n	8002bd0 <HAL_TIM_Base_Start_IT+0x80>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a19      	ldr	r2, [pc, #100]	; (8002c28 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d004      	beq.n	8002bd0 <HAL_TIM_Base_Start_IT+0x80>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a18      	ldr	r2, [pc, #96]	; (8002c2c <HAL_TIM_Base_Start_IT+0xdc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d111      	bne.n	8002bf4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b06      	cmp	r3, #6
 8002be0:	d010      	beq.n	8002c04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f042 0201 	orr.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf2:	e007      	b.n	8002c04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40010000 	.word	0x40010000
 8002c18:	40000400 	.word	0x40000400
 8002c1c:	40000800 	.word	0x40000800
 8002c20:	40000c00 	.word	0x40000c00
 8002c24:	40010400 	.word	0x40010400
 8002c28:	40014000 	.word	0x40014000
 8002c2c:	40001800 	.word	0x40001800

08002c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d122      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d11b      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0202 	mvn.w	r2, #2
 8002c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f8ee 	bl	8002e54 <HAL_TIM_IC_CaptureCallback>
 8002c78:	e005      	b.n	8002c86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f8e0 	bl	8002e40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f8f1 	bl	8002e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d122      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d11b      	bne.n	8002ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0204 	mvn.w	r2, #4
 8002cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f8c4 	bl	8002e54 <HAL_TIM_IC_CaptureCallback>
 8002ccc:	e005      	b.n	8002cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f8b6 	bl	8002e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f8c7 	bl	8002e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d122      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d11b      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 0208 	mvn.w	r2, #8
 8002d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2204      	movs	r2, #4
 8002d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f89a 	bl	8002e54 <HAL_TIM_IC_CaptureCallback>
 8002d20:	e005      	b.n	8002d2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f88c 	bl	8002e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f89d 	bl	8002e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	2b10      	cmp	r3, #16
 8002d40:	d122      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	d11b      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0210 	mvn.w	r2, #16
 8002d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f870 	bl	8002e54 <HAL_TIM_IC_CaptureCallback>
 8002d74:	e005      	b.n	8002d82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f862 	bl	8002e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f873 	bl	8002e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d10e      	bne.n	8002db4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d107      	bne.n	8002db4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0201 	mvn.w	r2, #1
 8002dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fd febc 	bl	8000b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbe:	2b80      	cmp	r3, #128	; 0x80
 8002dc0:	d10e      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dcc:	2b80      	cmp	r3, #128	; 0x80
 8002dce:	d107      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f902 	bl	8002fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b40      	cmp	r3, #64	; 0x40
 8002dec:	d10e      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d107      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f838 	bl	8002e7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	d10e      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d107      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0220 	mvn.w	r2, #32
 8002e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f8cc 	bl	8002fd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a40      	ldr	r2, [pc, #256]	; (8002fa4 <TIM_Base_SetConfig+0x114>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d013      	beq.n	8002ed0 <TIM_Base_SetConfig+0x40>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eae:	d00f      	beq.n	8002ed0 <TIM_Base_SetConfig+0x40>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a3d      	ldr	r2, [pc, #244]	; (8002fa8 <TIM_Base_SetConfig+0x118>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00b      	beq.n	8002ed0 <TIM_Base_SetConfig+0x40>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a3c      	ldr	r2, [pc, #240]	; (8002fac <TIM_Base_SetConfig+0x11c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d007      	beq.n	8002ed0 <TIM_Base_SetConfig+0x40>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a3b      	ldr	r2, [pc, #236]	; (8002fb0 <TIM_Base_SetConfig+0x120>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d003      	beq.n	8002ed0 <TIM_Base_SetConfig+0x40>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a3a      	ldr	r2, [pc, #232]	; (8002fb4 <TIM_Base_SetConfig+0x124>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d108      	bne.n	8002ee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a2f      	ldr	r2, [pc, #188]	; (8002fa4 <TIM_Base_SetConfig+0x114>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d02b      	beq.n	8002f42 <TIM_Base_SetConfig+0xb2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef0:	d027      	beq.n	8002f42 <TIM_Base_SetConfig+0xb2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a2c      	ldr	r2, [pc, #176]	; (8002fa8 <TIM_Base_SetConfig+0x118>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d023      	beq.n	8002f42 <TIM_Base_SetConfig+0xb2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a2b      	ldr	r2, [pc, #172]	; (8002fac <TIM_Base_SetConfig+0x11c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01f      	beq.n	8002f42 <TIM_Base_SetConfig+0xb2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a2a      	ldr	r2, [pc, #168]	; (8002fb0 <TIM_Base_SetConfig+0x120>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d01b      	beq.n	8002f42 <TIM_Base_SetConfig+0xb2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a29      	ldr	r2, [pc, #164]	; (8002fb4 <TIM_Base_SetConfig+0x124>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d017      	beq.n	8002f42 <TIM_Base_SetConfig+0xb2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a28      	ldr	r2, [pc, #160]	; (8002fb8 <TIM_Base_SetConfig+0x128>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d013      	beq.n	8002f42 <TIM_Base_SetConfig+0xb2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a27      	ldr	r2, [pc, #156]	; (8002fbc <TIM_Base_SetConfig+0x12c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00f      	beq.n	8002f42 <TIM_Base_SetConfig+0xb2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a26      	ldr	r2, [pc, #152]	; (8002fc0 <TIM_Base_SetConfig+0x130>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00b      	beq.n	8002f42 <TIM_Base_SetConfig+0xb2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a25      	ldr	r2, [pc, #148]	; (8002fc4 <TIM_Base_SetConfig+0x134>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d007      	beq.n	8002f42 <TIM_Base_SetConfig+0xb2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a24      	ldr	r2, [pc, #144]	; (8002fc8 <TIM_Base_SetConfig+0x138>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d003      	beq.n	8002f42 <TIM_Base_SetConfig+0xb2>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a23      	ldr	r2, [pc, #140]	; (8002fcc <TIM_Base_SetConfig+0x13c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d108      	bne.n	8002f54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <TIM_Base_SetConfig+0x114>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d003      	beq.n	8002f88 <TIM_Base_SetConfig+0xf8>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a0c      	ldr	r2, [pc, #48]	; (8002fb4 <TIM_Base_SetConfig+0x124>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d103      	bne.n	8002f90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	615a      	str	r2, [r3, #20]
}
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40010000 	.word	0x40010000
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40000800 	.word	0x40000800
 8002fb0:	40000c00 	.word	0x40000c00
 8002fb4:	40010400 	.word	0x40010400
 8002fb8:	40014000 	.word	0x40014000
 8002fbc:	40014400 	.word	0x40014400
 8002fc0:	40014800 	.word	0x40014800
 8002fc4:	40001800 	.word	0x40001800
 8002fc8:	40001c00 	.word	0x40001c00
 8002fcc:	40002000 	.word	0x40002000

08002fd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e03f      	b.n	800308a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fd fe8e 	bl	8000d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2224      	movs	r2, #36	; 0x24
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800303a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f829 	bl	8003094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003098:	b09f      	sub	sp, #124	; 0x7c
 800309a:	af00      	add	r7, sp, #0
 800309c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800309e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030aa:	68d9      	ldr	r1, [r3, #12]
 80030ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	ea40 0301 	orr.w	r3, r0, r1
 80030b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	431a      	orrs	r2, r3
 80030c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	431a      	orrs	r2, r3
 80030c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80030ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030d8:	f021 010c 	bic.w	r1, r1, #12
 80030dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030e2:	430b      	orrs	r3, r1
 80030e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f2:	6999      	ldr	r1, [r3, #24]
 80030f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	ea40 0301 	orr.w	r3, r0, r1
 80030fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	4bc5      	ldr	r3, [pc, #788]	; (8003418 <UART_SetConfig+0x384>)
 8003104:	429a      	cmp	r2, r3
 8003106:	d004      	beq.n	8003112 <UART_SetConfig+0x7e>
 8003108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4bc3      	ldr	r3, [pc, #780]	; (800341c <UART_SetConfig+0x388>)
 800310e:	429a      	cmp	r2, r3
 8003110:	d103      	bne.n	800311a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003112:	f7ff fc7d 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
 8003116:	6778      	str	r0, [r7, #116]	; 0x74
 8003118:	e002      	b.n	8003120 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800311a:	f7ff fc65 	bl	80029e8 <HAL_RCC_GetPCLK1Freq>
 800311e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003128:	f040 80b6 	bne.w	8003298 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800312c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800312e:	461c      	mov	r4, r3
 8003130:	f04f 0500 	mov.w	r5, #0
 8003134:	4622      	mov	r2, r4
 8003136:	462b      	mov	r3, r5
 8003138:	1891      	adds	r1, r2, r2
 800313a:	6439      	str	r1, [r7, #64]	; 0x40
 800313c:	415b      	adcs	r3, r3
 800313e:	647b      	str	r3, [r7, #68]	; 0x44
 8003140:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003144:	1912      	adds	r2, r2, r4
 8003146:	eb45 0303 	adc.w	r3, r5, r3
 800314a:	f04f 0000 	mov.w	r0, #0
 800314e:	f04f 0100 	mov.w	r1, #0
 8003152:	00d9      	lsls	r1, r3, #3
 8003154:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003158:	00d0      	lsls	r0, r2, #3
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	1911      	adds	r1, r2, r4
 8003160:	6639      	str	r1, [r7, #96]	; 0x60
 8003162:	416b      	adcs	r3, r5
 8003164:	667b      	str	r3, [r7, #100]	; 0x64
 8003166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	461a      	mov	r2, r3
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	1891      	adds	r1, r2, r2
 8003172:	63b9      	str	r1, [r7, #56]	; 0x38
 8003174:	415b      	adcs	r3, r3
 8003176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800317c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003180:	f7fd f836 	bl	80001f0 <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4ba5      	ldr	r3, [pc, #660]	; (8003420 <UART_SetConfig+0x38c>)
 800318a:	fba3 2302 	umull	r2, r3, r3, r2
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	011e      	lsls	r6, r3, #4
 8003192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003194:	461c      	mov	r4, r3
 8003196:	f04f 0500 	mov.w	r5, #0
 800319a:	4622      	mov	r2, r4
 800319c:	462b      	mov	r3, r5
 800319e:	1891      	adds	r1, r2, r2
 80031a0:	6339      	str	r1, [r7, #48]	; 0x30
 80031a2:	415b      	adcs	r3, r3
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
 80031a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80031aa:	1912      	adds	r2, r2, r4
 80031ac:	eb45 0303 	adc.w	r3, r5, r3
 80031b0:	f04f 0000 	mov.w	r0, #0
 80031b4:	f04f 0100 	mov.w	r1, #0
 80031b8:	00d9      	lsls	r1, r3, #3
 80031ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031be:	00d0      	lsls	r0, r2, #3
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	1911      	adds	r1, r2, r4
 80031c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80031c8:	416b      	adcs	r3, r5
 80031ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	461a      	mov	r2, r3
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	1891      	adds	r1, r2, r2
 80031d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80031da:	415b      	adcs	r3, r3
 80031dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80031e6:	f7fd f803 	bl	80001f0 <__aeabi_uldivmod>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4b8c      	ldr	r3, [pc, #560]	; (8003420 <UART_SetConfig+0x38c>)
 80031f0:	fba3 1302 	umull	r1, r3, r3, r2
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	2164      	movs	r1, #100	; 0x64
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	3332      	adds	r3, #50	; 0x32
 8003202:	4a87      	ldr	r2, [pc, #540]	; (8003420 <UART_SetConfig+0x38c>)
 8003204:	fba2 2303 	umull	r2, r3, r2, r3
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003210:	441e      	add	r6, r3
 8003212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003214:	4618      	mov	r0, r3
 8003216:	f04f 0100 	mov.w	r1, #0
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	1894      	adds	r4, r2, r2
 8003220:	623c      	str	r4, [r7, #32]
 8003222:	415b      	adcs	r3, r3
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
 8003226:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800322a:	1812      	adds	r2, r2, r0
 800322c:	eb41 0303 	adc.w	r3, r1, r3
 8003230:	f04f 0400 	mov.w	r4, #0
 8003234:	f04f 0500 	mov.w	r5, #0
 8003238:	00dd      	lsls	r5, r3, #3
 800323a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800323e:	00d4      	lsls	r4, r2, #3
 8003240:	4622      	mov	r2, r4
 8003242:	462b      	mov	r3, r5
 8003244:	1814      	adds	r4, r2, r0
 8003246:	653c      	str	r4, [r7, #80]	; 0x50
 8003248:	414b      	adcs	r3, r1
 800324a:	657b      	str	r3, [r7, #84]	; 0x54
 800324c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	461a      	mov	r2, r3
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	1891      	adds	r1, r2, r2
 8003258:	61b9      	str	r1, [r7, #24]
 800325a:	415b      	adcs	r3, r3
 800325c:	61fb      	str	r3, [r7, #28]
 800325e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003262:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003266:	f7fc ffc3 	bl	80001f0 <__aeabi_uldivmod>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4b6c      	ldr	r3, [pc, #432]	; (8003420 <UART_SetConfig+0x38c>)
 8003270:	fba3 1302 	umull	r1, r3, r3, r2
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	2164      	movs	r1, #100	; 0x64
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	3332      	adds	r3, #50	; 0x32
 8003282:	4a67      	ldr	r2, [pc, #412]	; (8003420 <UART_SetConfig+0x38c>)
 8003284:	fba2 2303 	umull	r2, r3, r2, r3
 8003288:	095b      	lsrs	r3, r3, #5
 800328a:	f003 0207 	and.w	r2, r3, #7
 800328e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4432      	add	r2, r6
 8003294:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003296:	e0b9      	b.n	800340c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800329a:	461c      	mov	r4, r3
 800329c:	f04f 0500 	mov.w	r5, #0
 80032a0:	4622      	mov	r2, r4
 80032a2:	462b      	mov	r3, r5
 80032a4:	1891      	adds	r1, r2, r2
 80032a6:	6139      	str	r1, [r7, #16]
 80032a8:	415b      	adcs	r3, r3
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80032b0:	1912      	adds	r2, r2, r4
 80032b2:	eb45 0303 	adc.w	r3, r5, r3
 80032b6:	f04f 0000 	mov.w	r0, #0
 80032ba:	f04f 0100 	mov.w	r1, #0
 80032be:	00d9      	lsls	r1, r3, #3
 80032c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032c4:	00d0      	lsls	r0, r2, #3
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	eb12 0804 	adds.w	r8, r2, r4
 80032ce:	eb43 0905 	adc.w	r9, r3, r5
 80032d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f04f 0100 	mov.w	r1, #0
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	008b      	lsls	r3, r1, #2
 80032e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032ea:	0082      	lsls	r2, r0, #2
 80032ec:	4640      	mov	r0, r8
 80032ee:	4649      	mov	r1, r9
 80032f0:	f7fc ff7e 	bl	80001f0 <__aeabi_uldivmod>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4b49      	ldr	r3, [pc, #292]	; (8003420 <UART_SetConfig+0x38c>)
 80032fa:	fba3 2302 	umull	r2, r3, r3, r2
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	011e      	lsls	r6, r3, #4
 8003302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003304:	4618      	mov	r0, r3
 8003306:	f04f 0100 	mov.w	r1, #0
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	1894      	adds	r4, r2, r2
 8003310:	60bc      	str	r4, [r7, #8]
 8003312:	415b      	adcs	r3, r3
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800331a:	1812      	adds	r2, r2, r0
 800331c:	eb41 0303 	adc.w	r3, r1, r3
 8003320:	f04f 0400 	mov.w	r4, #0
 8003324:	f04f 0500 	mov.w	r5, #0
 8003328:	00dd      	lsls	r5, r3, #3
 800332a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800332e:	00d4      	lsls	r4, r2, #3
 8003330:	4622      	mov	r2, r4
 8003332:	462b      	mov	r3, r5
 8003334:	1814      	adds	r4, r2, r0
 8003336:	64bc      	str	r4, [r7, #72]	; 0x48
 8003338:	414b      	adcs	r3, r1
 800333a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800333c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4618      	mov	r0, r3
 8003342:	f04f 0100 	mov.w	r1, #0
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	008b      	lsls	r3, r1, #2
 8003350:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003354:	0082      	lsls	r2, r0, #2
 8003356:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800335a:	f7fc ff49 	bl	80001f0 <__aeabi_uldivmod>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4b2f      	ldr	r3, [pc, #188]	; (8003420 <UART_SetConfig+0x38c>)
 8003364:	fba3 1302 	umull	r1, r3, r3, r2
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	2164      	movs	r1, #100	; 0x64
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	3332      	adds	r3, #50	; 0x32
 8003376:	4a2a      	ldr	r2, [pc, #168]	; (8003420 <UART_SetConfig+0x38c>)
 8003378:	fba2 2303 	umull	r2, r3, r2, r3
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003382:	441e      	add	r6, r3
 8003384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003386:	4618      	mov	r0, r3
 8003388:	f04f 0100 	mov.w	r1, #0
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	1894      	adds	r4, r2, r2
 8003392:	603c      	str	r4, [r7, #0]
 8003394:	415b      	adcs	r3, r3
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800339c:	1812      	adds	r2, r2, r0
 800339e:	eb41 0303 	adc.w	r3, r1, r3
 80033a2:	f04f 0400 	mov.w	r4, #0
 80033a6:	f04f 0500 	mov.w	r5, #0
 80033aa:	00dd      	lsls	r5, r3, #3
 80033ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80033b0:	00d4      	lsls	r4, r2, #3
 80033b2:	4622      	mov	r2, r4
 80033b4:	462b      	mov	r3, r5
 80033b6:	eb12 0a00 	adds.w	sl, r2, r0
 80033ba:	eb43 0b01 	adc.w	fp, r3, r1
 80033be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f04f 0100 	mov.w	r1, #0
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	008b      	lsls	r3, r1, #2
 80033d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033d6:	0082      	lsls	r2, r0, #2
 80033d8:	4650      	mov	r0, sl
 80033da:	4659      	mov	r1, fp
 80033dc:	f7fc ff08 	bl	80001f0 <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <UART_SetConfig+0x38c>)
 80033e6:	fba3 1302 	umull	r1, r3, r3, r2
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	2164      	movs	r1, #100	; 0x64
 80033ee:	fb01 f303 	mul.w	r3, r1, r3
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	3332      	adds	r3, #50	; 0x32
 80033f8:	4a09      	ldr	r2, [pc, #36]	; (8003420 <UART_SetConfig+0x38c>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	f003 020f 	and.w	r2, r3, #15
 8003404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4432      	add	r2, r6
 800340a:	609a      	str	r2, [r3, #8]
}
 800340c:	bf00      	nop
 800340e:	377c      	adds	r7, #124	; 0x7c
 8003410:	46bd      	mov	sp, r7
 8003412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003416:	bf00      	nop
 8003418:	40011000 	.word	0x40011000
 800341c:	40011400 	.word	0x40011400
 8003420:	51eb851f 	.word	0x51eb851f

08003424 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003424:	b084      	sub	sp, #16
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	f107 001c 	add.w	r0, r7, #28
 8003432:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	2b01      	cmp	r3, #1
 800343a:	d122      	bne.n	8003482 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003466:	2b01      	cmp	r3, #1
 8003468:	d105      	bne.n	8003476 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fa82 	bl	8003980 <USB_CoreReset>
 800347c:	4603      	mov	r3, r0
 800347e:	73fb      	strb	r3, [r7, #15]
 8003480:	e01a      	b.n	80034b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fa76 	bl	8003980 <USB_CoreReset>
 8003494:	4603      	mov	r3, r0
 8003496:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38
 80034aa:	e005      	b.n	80034b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80034b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d10b      	bne.n	80034d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f043 0206 	orr.w	r2, r3, #6
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f043 0220 	orr.w	r2, r3, #32
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034e2:	b004      	add	sp, #16
 80034e4:	4770      	bx	lr

080034e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f023 0201 	bic.w	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d115      	bne.n	8003556 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003536:	2001      	movs	r0, #1
 8003538:	f7fd fd9c 	bl	8001074 <HAL_Delay>
      ms++;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3301      	adds	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fa0e 	bl	8003964 <USB_GetMode>
 8003548:	4603      	mov	r3, r0
 800354a:	2b01      	cmp	r3, #1
 800354c:	d01e      	beq.n	800358c <USB_SetCurrentMode+0x84>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b31      	cmp	r3, #49	; 0x31
 8003552:	d9f0      	bls.n	8003536 <USB_SetCurrentMode+0x2e>
 8003554:	e01a      	b.n	800358c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d115      	bne.n	8003588 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003568:	2001      	movs	r0, #1
 800356a:	f7fd fd83 	bl	8001074 <HAL_Delay>
      ms++;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	3301      	adds	r3, #1
 8003572:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f9f5 	bl	8003964 <USB_GetMode>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <USB_SetCurrentMode+0x84>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b31      	cmp	r3, #49	; 0x31
 8003584:	d9f0      	bls.n	8003568 <USB_SetCurrentMode+0x60>
 8003586:	e001      	b.n	800358c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e005      	b.n	8003598 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b32      	cmp	r3, #50	; 0x32
 8003590:	d101      	bne.n	8003596 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035a0:	b084      	sub	sp, #16
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b086      	sub	sp, #24
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80035ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	e009      	b.n	80035d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	3340      	adds	r3, #64	; 0x40
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	2200      	movs	r2, #0
 80035cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	3301      	adds	r3, #1
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	2b0e      	cmp	r3, #14
 80035d8:	d9f2      	bls.n	80035c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80035da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d11c      	bne.n	800361a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ee:	f043 0302 	orr.w	r3, r3, #2
 80035f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
 8003618:	e00b      	b.n	8003632 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003638:	461a      	mov	r2, r3
 800363a:	2300      	movs	r3, #0
 800363c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003644:	4619      	mov	r1, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800364c:	461a      	mov	r2, r3
 800364e:	680b      	ldr	r3, [r1, #0]
 8003650:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	2b01      	cmp	r3, #1
 8003656:	d10c      	bne.n	8003672 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d104      	bne.n	8003668 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800365e:	2100      	movs	r1, #0
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f945 	bl	80038f0 <USB_SetDevSpeed>
 8003666:	e008      	b.n	800367a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003668:	2101      	movs	r1, #1
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f940 	bl	80038f0 <USB_SetDevSpeed>
 8003670:	e003      	b.n	800367a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003672:	2103      	movs	r1, #3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f93b 	bl	80038f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800367a:	2110      	movs	r1, #16
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f8f3 	bl	8003868 <USB_FlushTxFifo>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f90f 	bl	80038b0 <USB_FlushRxFifo>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a2:	461a      	mov	r2, r3
 80036a4:	2300      	movs	r3, #0
 80036a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ae:	461a      	mov	r2, r3
 80036b0:	2300      	movs	r3, #0
 80036b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ba:	461a      	mov	r2, r3
 80036bc:	2300      	movs	r3, #0
 80036be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	e043      	b.n	800374e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036dc:	d118      	bne.n	8003710 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f0:	461a      	mov	r2, r3
 80036f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	e013      	b.n	8003722 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003706:	461a      	mov	r2, r3
 8003708:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	e008      	b.n	8003722 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4413      	add	r3, r2
 8003718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371c:	461a      	mov	r2, r3
 800371e:	2300      	movs	r3, #0
 8003720:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800372e:	461a      	mov	r2, r3
 8003730:	2300      	movs	r3, #0
 8003732:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4413      	add	r3, r2
 800373c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003740:	461a      	mov	r2, r3
 8003742:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003746:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	3301      	adds	r3, #1
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	429a      	cmp	r2, r3
 8003754:	d3b7      	bcc.n	80036c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003756:	2300      	movs	r3, #0
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	e043      	b.n	80037e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4413      	add	r3, r2
 8003764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800376e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003772:	d118      	bne.n	80037a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10a      	bne.n	8003790 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4413      	add	r3, r2
 8003782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003786:	461a      	mov	r2, r3
 8003788:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	e013      	b.n	80037b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379c:	461a      	mov	r2, r3
 800379e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	e008      	b.n	80037b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b2:	461a      	mov	r2, r3
 80037b4:	2300      	movs	r3, #0
 80037b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c4:	461a      	mov	r2, r3
 80037c6:	2300      	movs	r3, #0
 80037c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d6:	461a      	mov	r2, r3
 80037d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	3301      	adds	r3, #1
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d3b7      	bcc.n	800375c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800380c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	2b00      	cmp	r3, #0
 8003812:	d105      	bne.n	8003820 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f043 0210 	orr.w	r2, r3, #16
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699a      	ldr	r2, [r3, #24]
 8003824:	4b0f      	ldr	r3, [pc, #60]	; (8003864 <USB_DevInit+0x2c4>)
 8003826:	4313      	orrs	r3, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800382c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	f043 0208 	orr.w	r2, r3, #8
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800383e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003840:	2b01      	cmp	r3, #1
 8003842:	d107      	bne.n	8003854 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800384c:	f043 0304 	orr.w	r3, r3, #4
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003854:	7dfb      	ldrb	r3, [r7, #23]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003860:	b004      	add	sp, #16
 8003862:	4770      	bx	lr
 8003864:	803c3800 	.word	0x803c3800

08003868 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	019b      	lsls	r3, r3, #6
 800387a:	f043 0220 	orr.w	r2, r3, #32
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3301      	adds	r3, #1
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	4a08      	ldr	r2, [pc, #32]	; (80038ac <USB_FlushTxFifo+0x44>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e006      	b.n	80038a0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0320 	and.w	r3, r3, #32
 800389a:	2b20      	cmp	r3, #32
 800389c:	d0f1      	beq.n	8003882 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	00030d40 	.word	0x00030d40

080038b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2210      	movs	r2, #16
 80038c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	3301      	adds	r3, #1
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	4a08      	ldr	r2, [pc, #32]	; (80038ec <USB_FlushRxFifo+0x3c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e006      	b.n	80038e0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0310 	and.w	r3, r3, #16
 80038da:	2b10      	cmp	r3, #16
 80038dc:	d0f1      	beq.n	80038c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	00030d40 	.word	0x00030d40

080038f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	68f9      	ldr	r1, [r7, #12]
 800390c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003910:	4313      	orrs	r3, r2
 8003912:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003922:	b480      	push	{r7}
 8003924:	b085      	sub	sp, #20
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800393c:	f023 0303 	bic.w	r3, r3, #3
 8003940:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003950:	f043 0302 	orr.w	r3, r3, #2
 8003954:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	f003 0301 	and.w	r3, r3, #1
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3301      	adds	r3, #1
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	4a13      	ldr	r2, [pc, #76]	; (80039e0 <USB_CoreReset+0x60>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d901      	bls.n	800399c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e01a      	b.n	80039d2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	daf3      	bge.n	800398c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f043 0201 	orr.w	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	3301      	adds	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	4a09      	ldr	r2, [pc, #36]	; (80039e0 <USB_CoreReset+0x60>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d901      	bls.n	80039c4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e006      	b.n	80039d2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d0f1      	beq.n	80039b4 <USB_CoreReset+0x34>

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	00030d40 	.word	0x00030d40

080039e4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80039f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039f6:	2b84      	cmp	r3, #132	; 0x84
 80039f8:	d005      	beq.n	8003a06 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80039fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4413      	add	r3, r2
 8003a02:	3303      	adds	r3, #3
 8003a04:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a06:	68fb      	ldr	r3, [r7, #12]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a1a:	f3ef 8305 	mrs	r3, IPSR
 8003a1e:	607b      	str	r3, [r7, #4]
  return(result);
 8003a20:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	bf14      	ite	ne
 8003a26:	2301      	movne	r3, #1
 8003a28:	2300      	moveq	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a3c:	f001 f8c8 	bl	8004bd0 <vTaskStartScheduler>
  
  return osOK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a48:	b089      	sub	sp, #36	; 0x24
 8003a4a:	af04      	add	r7, sp, #16
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d020      	beq.n	8003a9a <osThreadCreate+0x54>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d01c      	beq.n	8003a9a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685c      	ldr	r4, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681d      	ldr	r5, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691e      	ldr	r6, [r3, #16]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff ffb6 	bl	80039e4 <makeFreeRtosPriority>
 8003a78:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a82:	9202      	str	r2, [sp, #8]
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	9100      	str	r1, [sp, #0]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	4632      	mov	r2, r6
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f000 ff0a 	bl	80048a8 <xTaskCreateStatic>
 8003a94:	4603      	mov	r3, r0
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	e01c      	b.n	8003ad4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685c      	ldr	r4, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003aa6:	b29e      	uxth	r6, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff ff98 	bl	80039e4 <makeFreeRtosPriority>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	f107 030c 	add.w	r3, r7, #12
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	9200      	str	r2, [sp, #0]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	4632      	mov	r2, r6
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	f000 ff4c 	bl	8004962 <xTaskCreate>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d001      	beq.n	8003ad4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e000      	b.n	8003ad6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ade <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b086      	sub	sp, #24
 8003ae2:	af02      	add	r7, sp, #8
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00f      	beq.n	8003b10 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d10a      	bne.n	8003b0c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2203      	movs	r2, #3
 8003afc:	9200      	str	r2, [sp, #0]
 8003afe:	2200      	movs	r2, #0
 8003b00:	2100      	movs	r1, #0
 8003b02:	2001      	movs	r0, #1
 8003b04:	f000 f9be 	bl	8003e84 <xQueueGenericCreateStatic>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	e016      	b.n	8003b3a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e014      	b.n	8003b3a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d110      	bne.n	8003b38 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8003b16:	2203      	movs	r2, #3
 8003b18:	2100      	movs	r1, #0
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	f000 fa2a 	bl	8003f74 <xQueueGenericCreate>
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <osSemaphoreCreate+0x56>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 fa7a 	bl	8004028 <xQueueGenericSend>
      return sema;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	e000      	b.n	8003b3a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003b38:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003b58:	2380      	movs	r3, #128	; 0x80
 8003b5a:	e03a      	b.n	8003bd2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d103      	bne.n	8003b70 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003b68:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	e009      	b.n	8003b84 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d006      	beq.n	8003b84 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <osSemaphoreWait+0x40>
      ticks = 1;
 8003b80:	2301      	movs	r3, #1
 8003b82:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003b84:	f7ff ff46 	bl	8003a14 <inHandlerMode>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d017      	beq.n	8003bbe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003b8e:	f107 0308 	add.w	r3, r7, #8
 8003b92:	461a      	mov	r2, r3
 8003b94:	2100      	movs	r1, #0
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fcde 	bl	8004558 <xQueueReceiveFromISR>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d001      	beq.n	8003ba6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8003ba2:	23ff      	movs	r3, #255	; 0xff
 8003ba4:	e015      	b.n	8003bd2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d011      	beq.n	8003bd0 <osSemaphoreWait+0x8c>
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <osSemaphoreWait+0x98>)
 8003bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	e008      	b.n	8003bd0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003bbe:	68f9      	ldr	r1, [r7, #12]
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fbbd 	bl	8004340 <xQueueSemaphoreTake>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d001      	beq.n	8003bd0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003bcc:	23ff      	movs	r3, #255	; 0xff
 8003bce:	e000      	b.n	8003bd2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	e000ed04 	.word	0xe000ed04

08003be0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003bec:	2300      	movs	r3, #0
 8003bee:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003bf0:	f7ff ff10 	bl	8003a14 <inHandlerMode>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d016      	beq.n	8003c28 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003bfa:	f107 0308 	add.w	r3, r7, #8
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 fb0f 	bl	8004224 <xQueueGiveFromISR>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d001      	beq.n	8003c10 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003c0c:	23ff      	movs	r3, #255	; 0xff
 8003c0e:	e017      	b.n	8003c40 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d013      	beq.n	8003c3e <osSemaphoreRelease+0x5e>
 8003c16:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <osSemaphoreRelease+0x68>)
 8003c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	f3bf 8f4f 	dsb	sy
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	e00a      	b.n	8003c3e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003c28:	2300      	movs	r3, #0
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f9fa 	bl	8004028 <xQueueGenericSend>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d001      	beq.n	8003c3e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003c3a:	23ff      	movs	r3, #255	; 0xff
 8003c3c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	e000ed04 	.word	0xe000ed04

08003c4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f103 0208 	add.w	r2, r3, #8
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f04f 32ff 	mov.w	r2, #4294967295
 8003c64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f103 0208 	add.w	r2, r3, #8
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f103 0208 	add.w	r2, r3, #8
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b085      	sub	sp, #20
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	601a      	str	r2, [r3, #0]
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d04:	d103      	bne.n	8003d0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	e00c      	b.n	8003d28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3308      	adds	r3, #8
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	e002      	b.n	8003d1c <vListInsert+0x2e>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d2f6      	bcs.n	8003d16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	601a      	str	r2, [r3, #0]
}
 8003d54:	bf00      	nop
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6892      	ldr	r2, [r2, #8]
 8003d76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6852      	ldr	r2, [r2, #4]
 8003d80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d103      	bne.n	8003d94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	1e5a      	subs	r2, r3, #1
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10a      	bne.n	8003dde <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003dda:	bf00      	nop
 8003ddc:	e7fe      	b.n	8003ddc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003dde:	f001 fe41 	bl	8005a64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dea:	68f9      	ldr	r1, [r7, #12]
 8003dec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	441a      	add	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	68f9      	ldr	r1, [r7, #12]
 8003e12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	441a      	add	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	22ff      	movs	r2, #255	; 0xff
 8003e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	22ff      	movs	r2, #255	; 0xff
 8003e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d114      	bne.n	8003e5e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01a      	beq.n	8003e72 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3310      	adds	r3, #16
 8003e40:	4618      	mov	r0, r3
 8003e42:	f001 f907 	bl	8005054 <xTaskRemoveFromEventList>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d012      	beq.n	8003e72 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e4c:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <xQueueGenericReset+0xcc>)
 8003e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	e009      	b.n	8003e72 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	3310      	adds	r3, #16
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff fef2 	bl	8003c4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	3324      	adds	r3, #36	; 0x24
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff feed 	bl	8003c4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e72:	f001 fe27 	bl	8005ac4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e76:	2301      	movs	r3, #1
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	e000ed04 	.word	0xe000ed04

08003e84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08e      	sub	sp, #56	; 0x38
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10a      	bne.n	8003eae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003eaa:	bf00      	nop
 8003eac:	e7fe      	b.n	8003eac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <xQueueGenericCreateStatic+0x52>
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <xQueueGenericCreateStatic+0x56>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <xQueueGenericCreateStatic+0x58>
 8003eda:	2300      	movs	r3, #0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10a      	bne.n	8003ef6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	623b      	str	r3, [r7, #32]
}
 8003ef2:	bf00      	nop
 8003ef4:	e7fe      	b.n	8003ef4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d102      	bne.n	8003f02 <xQueueGenericCreateStatic+0x7e>
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <xQueueGenericCreateStatic+0x82>
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <xQueueGenericCreateStatic+0x84>
 8003f06:	2300      	movs	r3, #0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10a      	bne.n	8003f22 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f10:	f383 8811 	msr	BASEPRI, r3
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	61fb      	str	r3, [r7, #28]
}
 8003f1e:	bf00      	nop
 8003f20:	e7fe      	b.n	8003f20 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f22:	2348      	movs	r3, #72	; 0x48
 8003f24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2b48      	cmp	r3, #72	; 0x48
 8003f2a:	d00a      	beq.n	8003f42 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	61bb      	str	r3, [r7, #24]
}
 8003f3e:	bf00      	nop
 8003f40:	e7fe      	b.n	8003f40 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f42:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00d      	beq.n	8003f6a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f83f 	bl	8003fe8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3730      	adds	r7, #48	; 0x30
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08a      	sub	sp, #40	; 0x28
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <xQueueGenericCreate+0x2a>
	__asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	613b      	str	r3, [r7, #16]
}
 8003f9a:	bf00      	nop
 8003f9c:	e7fe      	b.n	8003f9c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	fb02 f303 	mul.w	r3, r2, r3
 8003fa6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	3348      	adds	r3, #72	; 0x48
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 fe7b 	bl	8005ca8 <pvPortMalloc>
 8003fb2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d011      	beq.n	8003fde <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	3348      	adds	r3, #72	; 0x48
 8003fc2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003fcc:	79fa      	ldrb	r2, [r7, #7]
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f805 	bl	8003fe8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003fde:	69bb      	ldr	r3, [r7, #24]
	}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3720      	adds	r7, #32
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d103      	bne.n	8004004 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e002      	b.n	800400a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004016:	2101      	movs	r1, #1
 8004018:	69b8      	ldr	r0, [r7, #24]
 800401a:	f7ff fecb 	bl	8003db4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08e      	sub	sp, #56	; 0x38
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004036:	2300      	movs	r3, #0
 8004038:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10a      	bne.n	800405a <xQueueGenericSend+0x32>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004056:	bf00      	nop
 8004058:	e7fe      	b.n	8004058 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <xQueueGenericSend+0x40>
 8004060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <xQueueGenericSend+0x44>
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <xQueueGenericSend+0x46>
 800406c:	2300      	movs	r3, #0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10a      	bne.n	8004088 <xQueueGenericSend+0x60>
	__asm volatile
 8004072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004084:	bf00      	nop
 8004086:	e7fe      	b.n	8004086 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d103      	bne.n	8004096 <xQueueGenericSend+0x6e>
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <xQueueGenericSend+0x72>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <xQueueGenericSend+0x74>
 800409a:	2300      	movs	r3, #0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10a      	bne.n	80040b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	623b      	str	r3, [r7, #32]
}
 80040b2:	bf00      	nop
 80040b4:	e7fe      	b.n	80040b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040b6:	f001 f989 	bl	80053cc <xTaskGetSchedulerState>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d102      	bne.n	80040c6 <xQueueGenericSend+0x9e>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <xQueueGenericSend+0xa2>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <xQueueGenericSend+0xa4>
 80040ca:	2300      	movs	r3, #0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	61fb      	str	r3, [r7, #28]
}
 80040e2:	bf00      	nop
 80040e4:	e7fe      	b.n	80040e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040e6:	f001 fcbd 	bl	8005a64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d302      	bcc.n	80040fc <xQueueGenericSend+0xd4>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d129      	bne.n	8004150 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004102:	f000 fac1 	bl	8004688 <prvCopyDataToQueue>
 8004106:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	2b00      	cmp	r3, #0
 800410e:	d010      	beq.n	8004132 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	3324      	adds	r3, #36	; 0x24
 8004114:	4618      	mov	r0, r3
 8004116:	f000 ff9d 	bl	8005054 <xTaskRemoveFromEventList>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d013      	beq.n	8004148 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004120:	4b3f      	ldr	r3, [pc, #252]	; (8004220 <xQueueGenericSend+0x1f8>)
 8004122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	e00a      	b.n	8004148 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004138:	4b39      	ldr	r3, [pc, #228]	; (8004220 <xQueueGenericSend+0x1f8>)
 800413a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004148:	f001 fcbc 	bl	8005ac4 <vPortExitCritical>
				return pdPASS;
 800414c:	2301      	movs	r3, #1
 800414e:	e063      	b.n	8004218 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d103      	bne.n	800415e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004156:	f001 fcb5 	bl	8005ac4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800415a:	2300      	movs	r3, #0
 800415c:	e05c      	b.n	8004218 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800415e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004160:	2b00      	cmp	r3, #0
 8004162:	d106      	bne.n	8004172 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004164:	f107 0314 	add.w	r3, r7, #20
 8004168:	4618      	mov	r0, r3
 800416a:	f000 ffd5 	bl	8005118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800416e:	2301      	movs	r3, #1
 8004170:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004172:	f001 fca7 	bl	8005ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004176:	f000 fd8b 	bl	8004c90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800417a:	f001 fc73 	bl	8005a64 <vPortEnterCritical>
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004184:	b25b      	sxtb	r3, r3
 8004186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418a:	d103      	bne.n	8004194 <xQueueGenericSend+0x16c>
 800418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800419a:	b25b      	sxtb	r3, r3
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d103      	bne.n	80041aa <xQueueGenericSend+0x182>
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041aa:	f001 fc8b 	bl	8005ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041ae:	1d3a      	adds	r2, r7, #4
 80041b0:	f107 0314 	add.w	r3, r7, #20
 80041b4:	4611      	mov	r1, r2
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 ffc4 	bl	8005144 <xTaskCheckForTimeOut>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d124      	bne.n	800420c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80041c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041c4:	f000 fb58 	bl	8004878 <prvIsQueueFull>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d018      	beq.n	8004200 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d0:	3310      	adds	r3, #16
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	4611      	mov	r1, r2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 ff18 	bl	800500c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041de:	f000 fae3 	bl	80047a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041e2:	f000 fd63 	bl	8004cac <xTaskResumeAll>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f47f af7c 	bne.w	80040e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80041ee:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <xQueueGenericSend+0x1f8>)
 80041f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	e772      	b.n	80040e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004202:	f000 fad1 	bl	80047a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004206:	f000 fd51 	bl	8004cac <xTaskResumeAll>
 800420a:	e76c      	b.n	80040e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800420c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800420e:	f000 facb 	bl	80047a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004212:	f000 fd4b 	bl	8004cac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004216:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004218:	4618      	mov	r0, r3
 800421a:	3738      	adds	r7, #56	; 0x38
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	e000ed04 	.word	0xe000ed04

08004224 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08e      	sub	sp, #56	; 0x38
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	623b      	str	r3, [r7, #32]
}
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <xQueueGiveFromISR+0x48>
	__asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	61fb      	str	r3, [r7, #28]
}
 8004268:	bf00      	nop
 800426a:	e7fe      	b.n	800426a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d103      	bne.n	800427c <xQueueGiveFromISR+0x58>
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <xQueueGiveFromISR+0x5c>
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <xQueueGiveFromISR+0x5e>
 8004280:	2300      	movs	r3, #0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10a      	bne.n	800429c <xQueueGiveFromISR+0x78>
	__asm volatile
 8004286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	61bb      	str	r3, [r7, #24]
}
 8004298:	bf00      	nop
 800429a:	e7fe      	b.n	800429a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800429c:	f001 fcc4 	bl	8005c28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80042a0:	f3ef 8211 	mrs	r2, BASEPRI
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	617a      	str	r2, [r7, #20]
 80042b6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80042b8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d22b      	bcs.n	8004324 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80042de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80042e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e6:	d112      	bne.n	800430e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d016      	beq.n	800431e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f2:	3324      	adds	r3, #36	; 0x24
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fead 	bl	8005054 <xTaskRemoveFromEventList>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00e      	beq.n	800431e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00b      	beq.n	800431e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2201      	movs	r2, #1
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	e007      	b.n	800431e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800430e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004312:	3301      	adds	r3, #1
 8004314:	b2db      	uxtb	r3, r3
 8004316:	b25a      	sxtb	r2, r3
 8004318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800431e:	2301      	movs	r3, #1
 8004320:	637b      	str	r3, [r7, #52]	; 0x34
 8004322:	e001      	b.n	8004328 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004324:	2300      	movs	r3, #0
 8004326:	637b      	str	r3, [r7, #52]	; 0x34
 8004328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004332:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004336:	4618      	mov	r0, r3
 8004338:	3738      	adds	r7, #56	; 0x38
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08e      	sub	sp, #56	; 0x38
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800434a:	2300      	movs	r3, #0
 800434c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004352:	2300      	movs	r3, #0
 8004354:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800435c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	623b      	str	r3, [r7, #32]
}
 800436e:	bf00      	nop
 8004370:	e7fe      	b.n	8004370 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	61fb      	str	r3, [r7, #28]
}
 800438c:	bf00      	nop
 800438e:	e7fe      	b.n	800438e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004390:	f001 f81c 	bl	80053cc <xTaskGetSchedulerState>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d102      	bne.n	80043a0 <xQueueSemaphoreTake+0x60>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <xQueueSemaphoreTake+0x64>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <xQueueSemaphoreTake+0x66>
 80043a4:	2300      	movs	r3, #0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	61bb      	str	r3, [r7, #24]
}
 80043bc:	bf00      	nop
 80043be:	e7fe      	b.n	80043be <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043c0:	f001 fb50 	bl	8005a64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d024      	beq.n	800441a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	1e5a      	subs	r2, r3, #1
 80043d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d104      	bne.n	80043ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80043e0:	f001 f99c 	bl	800571c <pvTaskIncrementMutexHeldCount>
 80043e4:	4602      	mov	r2, r0
 80043e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00f      	beq.n	8004412 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f4:	3310      	adds	r3, #16
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fe2c 	bl	8005054 <xTaskRemoveFromEventList>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d007      	beq.n	8004412 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004402:	4b54      	ldr	r3, [pc, #336]	; (8004554 <xQueueSemaphoreTake+0x214>)
 8004404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004412:	f001 fb57 	bl	8005ac4 <vPortExitCritical>
				return pdPASS;
 8004416:	2301      	movs	r3, #1
 8004418:	e097      	b.n	800454a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d111      	bne.n	8004444 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	617b      	str	r3, [r7, #20]
}
 8004438:	bf00      	nop
 800443a:	e7fe      	b.n	800443a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800443c:	f001 fb42 	bl	8005ac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004440:	2300      	movs	r3, #0
 8004442:	e082      	b.n	800454a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800444a:	f107 030c 	add.w	r3, r7, #12
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fe62 	bl	8005118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004454:	2301      	movs	r3, #1
 8004456:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004458:	f001 fb34 	bl	8005ac4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800445c:	f000 fc18 	bl	8004c90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004460:	f001 fb00 	bl	8005a64 <vPortEnterCritical>
 8004464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004466:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800446a:	b25b      	sxtb	r3, r3
 800446c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004470:	d103      	bne.n	800447a <xQueueSemaphoreTake+0x13a>
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004480:	b25b      	sxtb	r3, r3
 8004482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004486:	d103      	bne.n	8004490 <xQueueSemaphoreTake+0x150>
 8004488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004490:	f001 fb18 	bl	8005ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004494:	463a      	mov	r2, r7
 8004496:	f107 030c 	add.w	r3, r7, #12
 800449a:	4611      	mov	r1, r2
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fe51 	bl	8005144 <xTaskCheckForTimeOut>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d132      	bne.n	800450e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044aa:	f000 f9cf 	bl	800484c <prvIsQueueEmpty>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d026      	beq.n	8004502 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d109      	bne.n	80044d0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80044bc:	f001 fad2 	bl	8005a64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80044c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 ff9f 	bl	8005408 <xTaskPriorityInherit>
 80044ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80044cc:	f001 fafa 	bl	8005ac4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d2:	3324      	adds	r3, #36	; 0x24
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	4611      	mov	r1, r2
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fd97 	bl	800500c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044e0:	f000 f962 	bl	80047a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044e4:	f000 fbe2 	bl	8004cac <xTaskResumeAll>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f47f af68 	bne.w	80043c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80044f0:	4b18      	ldr	r3, [pc, #96]	; (8004554 <xQueueSemaphoreTake+0x214>)
 80044f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	e75e      	b.n	80043c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004504:	f000 f950 	bl	80047a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004508:	f000 fbd0 	bl	8004cac <xTaskResumeAll>
 800450c:	e758      	b.n	80043c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800450e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004510:	f000 f94a 	bl	80047a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004514:	f000 fbca 	bl	8004cac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800451a:	f000 f997 	bl	800484c <prvIsQueueEmpty>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	f43f af4d 	beq.w	80043c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00d      	beq.n	8004548 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800452c:	f001 fa9a 	bl	8005a64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004532:	f000 f891 	bl	8004658 <prvGetDisinheritPriorityAfterTimeout>
 8004536:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800453e:	4618      	mov	r0, r3
 8004540:	f001 f85e 	bl	8005600 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004544:	f001 fabe 	bl	8005ac4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004548:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800454a:	4618      	mov	r0, r3
 800454c:	3738      	adds	r7, #56	; 0x38
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	e000ed04 	.word	0xe000ed04

08004558 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08e      	sub	sp, #56	; 0x38
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	623b      	str	r3, [r7, #32]
}
 8004580:	bf00      	nop
 8004582:	e7fe      	b.n	8004582 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d103      	bne.n	8004592 <xQueueReceiveFromISR+0x3a>
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <xQueueReceiveFromISR+0x3e>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <xQueueReceiveFromISR+0x40>
 8004596:	2300      	movs	r3, #0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	61fb      	str	r3, [r7, #28]
}
 80045ae:	bf00      	nop
 80045b0:	e7fe      	b.n	80045b0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045b2:	f001 fb39 	bl	8005c28 <vPortValidateInterruptPriority>
	__asm volatile
 80045b6:	f3ef 8211 	mrs	r2, BASEPRI
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	61ba      	str	r2, [r7, #24]
 80045cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80045ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d02f      	beq.n	800463e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045e8:	68b9      	ldr	r1, [r7, #8]
 80045ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ec:	f000 f8b6 	bl	800475c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	1e5a      	subs	r2, r3, #1
 80045f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80045f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004600:	d112      	bne.n	8004628 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d016      	beq.n	8004638 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	3310      	adds	r3, #16
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fd20 	bl	8005054 <xTaskRemoveFromEventList>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00e      	beq.n	8004638 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00b      	beq.n	8004638 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	e007      	b.n	8004638 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800462c:	3301      	adds	r3, #1
 800462e:	b2db      	uxtb	r3, r3
 8004630:	b25a      	sxtb	r2, r3
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004638:	2301      	movs	r3, #1
 800463a:	637b      	str	r3, [r7, #52]	; 0x34
 800463c:	e001      	b.n	8004642 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800463e:	2300      	movs	r3, #0
 8004640:	637b      	str	r3, [r7, #52]	; 0x34
 8004642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004644:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f383 8811 	msr	BASEPRI, r3
}
 800464c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800464e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004650:	4618      	mov	r0, r3
 8004652:	3738      	adds	r7, #56	; 0x38
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	2b00      	cmp	r3, #0
 8004666:	d006      	beq.n	8004676 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f1c3 0307 	rsb	r3, r3, #7
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	e001      	b.n	800467a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800467a:	68fb      	ldr	r3, [r7, #12]
	}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10d      	bne.n	80046c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d14d      	bne.n	800474a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 ff1e 	bl	80054f4 <xTaskPriorityDisinherit>
 80046b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	e043      	b.n	800474a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d119      	bne.n	80046fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6858      	ldr	r0, [r3, #4]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	461a      	mov	r2, r3
 80046d2:	68b9      	ldr	r1, [r7, #8]
 80046d4:	f001 fcf6 	bl	80060c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	441a      	add	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d32b      	bcc.n	800474a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	605a      	str	r2, [r3, #4]
 80046fa:	e026      	b.n	800474a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	68d8      	ldr	r0, [r3, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	461a      	mov	r2, r3
 8004706:	68b9      	ldr	r1, [r7, #8]
 8004708:	f001 fcdc 	bl	80060c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	425b      	negs	r3, r3
 8004716:	441a      	add	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d207      	bcs.n	8004738 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	425b      	negs	r3, r3
 8004732:	441a      	add	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d105      	bne.n	800474a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	3b01      	subs	r3, #1
 8004748:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004752:	697b      	ldr	r3, [r7, #20]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d018      	beq.n	80047a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	441a      	add	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	429a      	cmp	r2, r3
 8004786:	d303      	bcc.n	8004790 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68d9      	ldr	r1, [r3, #12]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	461a      	mov	r2, r3
 800479a:	6838      	ldr	r0, [r7, #0]
 800479c:	f001 fc92 	bl	80060c4 <memcpy>
	}
}
 80047a0:	bf00      	nop
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80047b0:	f001 f958 	bl	8005a64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047bc:	e011      	b.n	80047e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d012      	beq.n	80047ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3324      	adds	r3, #36	; 0x24
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fc42 	bl	8005054 <xTaskRemoveFromEventList>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80047d6:	f000 fd17 	bl	8005208 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	3b01      	subs	r3, #1
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80047e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	dce9      	bgt.n	80047be <prvUnlockQueue+0x16>
 80047ea:	e000      	b.n	80047ee <prvUnlockQueue+0x46>
					break;
 80047ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	22ff      	movs	r2, #255	; 0xff
 80047f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80047f6:	f001 f965 	bl	8005ac4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80047fa:	f001 f933 	bl	8005a64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004804:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004806:	e011      	b.n	800482c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d012      	beq.n	8004836 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3310      	adds	r3, #16
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fc1d 	bl	8005054 <xTaskRemoveFromEventList>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004820:	f000 fcf2 	bl	8005208 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004824:	7bbb      	ldrb	r3, [r7, #14]
 8004826:	3b01      	subs	r3, #1
 8004828:	b2db      	uxtb	r3, r3
 800482a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800482c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004830:	2b00      	cmp	r3, #0
 8004832:	dce9      	bgt.n	8004808 <prvUnlockQueue+0x60>
 8004834:	e000      	b.n	8004838 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004836:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	22ff      	movs	r2, #255	; 0xff
 800483c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004840:	f001 f940 	bl	8005ac4 <vPortExitCritical>
}
 8004844:	bf00      	nop
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004854:	f001 f906 	bl	8005a64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	2b00      	cmp	r3, #0
 800485e:	d102      	bne.n	8004866 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004860:	2301      	movs	r3, #1
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	e001      	b.n	800486a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800486a:	f001 f92b 	bl	8005ac4 <vPortExitCritical>

	return xReturn;
 800486e:	68fb      	ldr	r3, [r7, #12]
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004880:	f001 f8f0 	bl	8005a64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488c:	429a      	cmp	r2, r3
 800488e:	d102      	bne.n	8004896 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004890:	2301      	movs	r3, #1
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	e001      	b.n	800489a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004896:	2300      	movs	r3, #0
 8004898:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800489a:	f001 f913 	bl	8005ac4 <vPortExitCritical>

	return xReturn;
 800489e:	68fb      	ldr	r3, [r7, #12]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08e      	sub	sp, #56	; 0x38
 80048ac:	af04      	add	r7, sp, #16
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10a      	bne.n	80048d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	623b      	str	r3, [r7, #32]
}
 80048ce:	bf00      	nop
 80048d0:	e7fe      	b.n	80048d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80048d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10a      	bne.n	80048ee <xTaskCreateStatic+0x46>
	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	61fb      	str	r3, [r7, #28]
}
 80048ea:	bf00      	nop
 80048ec:	e7fe      	b.n	80048ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80048ee:	2354      	movs	r3, #84	; 0x54
 80048f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b54      	cmp	r3, #84	; 0x54
 80048f6:	d00a      	beq.n	800490e <xTaskCreateStatic+0x66>
	__asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	61bb      	str	r3, [r7, #24]
}
 800490a:	bf00      	nop
 800490c:	e7fe      	b.n	800490c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800490e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004912:	2b00      	cmp	r3, #0
 8004914:	d01e      	beq.n	8004954 <xTaskCreateStatic+0xac>
 8004916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004918:	2b00      	cmp	r3, #0
 800491a:	d01b      	beq.n	8004954 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800491c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004924:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	2202      	movs	r2, #2
 800492a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800492e:	2300      	movs	r3, #0
 8004930:	9303      	str	r3, [sp, #12]
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	9302      	str	r3, [sp, #8]
 8004936:	f107 0314 	add.w	r3, r7, #20
 800493a:	9301      	str	r3, [sp, #4]
 800493c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	68b9      	ldr	r1, [r7, #8]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 f850 	bl	80049ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800494c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800494e:	f000 f8d5 	bl	8004afc <prvAddNewTaskToReadyList>
 8004952:	e001      	b.n	8004958 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004954:	2300      	movs	r3, #0
 8004956:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004958:	697b      	ldr	r3, [r7, #20]
	}
 800495a:	4618      	mov	r0, r3
 800495c:	3728      	adds	r7, #40	; 0x28
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004962:	b580      	push	{r7, lr}
 8004964:	b08c      	sub	sp, #48	; 0x30
 8004966:	af04      	add	r7, sp, #16
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	603b      	str	r3, [r7, #0]
 800496e:	4613      	mov	r3, r2
 8004970:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4618      	mov	r0, r3
 8004978:	f001 f996 	bl	8005ca8 <pvPortMalloc>
 800497c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00e      	beq.n	80049a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004984:	2054      	movs	r0, #84	; 0x54
 8004986:	f001 f98f 	bl	8005ca8 <pvPortMalloc>
 800498a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	631a      	str	r2, [r3, #48]	; 0x30
 8004998:	e005      	b.n	80049a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800499a:	6978      	ldr	r0, [r7, #20]
 800499c:	f001 fa50 	bl	8005e40 <vPortFree>
 80049a0:	e001      	b.n	80049a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d017      	beq.n	80049dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049b4:	88fa      	ldrh	r2, [r7, #6]
 80049b6:	2300      	movs	r3, #0
 80049b8:	9303      	str	r3, [sp, #12]
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	9302      	str	r3, [sp, #8]
 80049be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c0:	9301      	str	r3, [sp, #4]
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 f80e 	bl	80049ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049d0:	69f8      	ldr	r0, [r7, #28]
 80049d2:	f000 f893 	bl	8004afc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049d6:	2301      	movs	r3, #1
 80049d8:	61bb      	str	r3, [r7, #24]
 80049da:	e002      	b.n	80049e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049dc:	f04f 33ff 	mov.w	r3, #4294967295
 80049e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80049e2:	69bb      	ldr	r3, [r7, #24]
	}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3720      	adds	r7, #32
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b088      	sub	sp, #32
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80049fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a04:	3b01      	subs	r3, #1
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	f023 0307 	bic.w	r3, r3, #7
 8004a12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	617b      	str	r3, [r7, #20]
}
 8004a30:	bf00      	nop
 8004a32:	e7fe      	b.n	8004a32 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d01f      	beq.n	8004a7a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61fb      	str	r3, [r7, #28]
 8004a3e:	e012      	b.n	8004a66 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	4413      	add	r3, r2
 8004a46:	7819      	ldrb	r1, [r3, #0]
 8004a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3334      	adds	r3, #52	; 0x34
 8004a50:	460a      	mov	r2, r1
 8004a52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	4413      	add	r3, r2
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d006      	beq.n	8004a6e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	3301      	adds	r3, #1
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	2b0f      	cmp	r3, #15
 8004a6a:	d9e9      	bls.n	8004a40 <prvInitialiseNewTask+0x54>
 8004a6c:	e000      	b.n	8004a70 <prvInitialiseNewTask+0x84>
			{
				break;
 8004a6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a78:	e003      	b.n	8004a82 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	2b06      	cmp	r3, #6
 8004a86:	d901      	bls.n	8004a8c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a88:	2306      	movs	r3, #6
 8004a8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a96:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff f8f2 	bl	8003c8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	3318      	adds	r3, #24
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff f8ed 	bl	8003c8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	f1c3 0207 	rsb	r2, r3, #7
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	2200      	movs	r2, #0
 8004acc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	68f9      	ldr	r1, [r7, #12]
 8004ada:	69b8      	ldr	r0, [r7, #24]
 8004adc:	f000 fe98 	bl	8005810 <pxPortInitialiseStack>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004af0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004af2:	bf00      	nop
 8004af4:	3720      	adds	r7, #32
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b04:	f000 ffae 	bl	8005a64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b08:	4b2a      	ldr	r3, [pc, #168]	; (8004bb4 <prvAddNewTaskToReadyList+0xb8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	4a29      	ldr	r2, [pc, #164]	; (8004bb4 <prvAddNewTaskToReadyList+0xb8>)
 8004b10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b12:	4b29      	ldr	r3, [pc, #164]	; (8004bb8 <prvAddNewTaskToReadyList+0xbc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d109      	bne.n	8004b2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b1a:	4a27      	ldr	r2, [pc, #156]	; (8004bb8 <prvAddNewTaskToReadyList+0xbc>)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b20:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <prvAddNewTaskToReadyList+0xb8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d110      	bne.n	8004b4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b28:	f000 fb92 	bl	8005250 <prvInitialiseTaskLists>
 8004b2c:	e00d      	b.n	8004b4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b2e:	4b23      	ldr	r3, [pc, #140]	; (8004bbc <prvAddNewTaskToReadyList+0xc0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d109      	bne.n	8004b4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b36:	4b20      	ldr	r3, [pc, #128]	; (8004bb8 <prvAddNewTaskToReadyList+0xbc>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d802      	bhi.n	8004b4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b44:	4a1c      	ldr	r2, [pc, #112]	; (8004bb8 <prvAddNewTaskToReadyList+0xbc>)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b4a:	4b1d      	ldr	r3, [pc, #116]	; (8004bc0 <prvAddNewTaskToReadyList+0xc4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	4a1b      	ldr	r2, [pc, #108]	; (8004bc0 <prvAddNewTaskToReadyList+0xc4>)
 8004b52:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	2201      	movs	r2, #1
 8004b5a:	409a      	lsls	r2, r3
 8004b5c:	4b19      	ldr	r3, [pc, #100]	; (8004bc4 <prvAddNewTaskToReadyList+0xc8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	4a18      	ldr	r2, [pc, #96]	; (8004bc4 <prvAddNewTaskToReadyList+0xc8>)
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4a15      	ldr	r2, [pc, #84]	; (8004bc8 <prvAddNewTaskToReadyList+0xcc>)
 8004b74:	441a      	add	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	f7ff f892 	bl	8003ca6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b82:	f000 ff9f 	bl	8005ac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b86:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <prvAddNewTaskToReadyList+0xc0>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00e      	beq.n	8004bac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b8e:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <prvAddNewTaskToReadyList+0xbc>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d207      	bcs.n	8004bac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <prvAddNewTaskToReadyList+0xd0>)
 8004b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bac:	bf00      	nop
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20000380 	.word	0x20000380
 8004bb8:	20000280 	.word	0x20000280
 8004bbc:	2000038c 	.word	0x2000038c
 8004bc0:	2000039c 	.word	0x2000039c
 8004bc4:	20000388 	.word	0x20000388
 8004bc8:	20000284 	.word	0x20000284
 8004bcc:	e000ed04 	.word	0xe000ed04

08004bd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08a      	sub	sp, #40	; 0x28
 8004bd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004bde:	463a      	mov	r2, r7
 8004be0:	1d39      	adds	r1, r7, #4
 8004be2:	f107 0308 	add.w	r3, r7, #8
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fb fc7e 	bl	80004e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bec:	6839      	ldr	r1, [r7, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	9202      	str	r2, [sp, #8]
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	460a      	mov	r2, r1
 8004bfe:	491e      	ldr	r1, [pc, #120]	; (8004c78 <vTaskStartScheduler+0xa8>)
 8004c00:	481e      	ldr	r0, [pc, #120]	; (8004c7c <vTaskStartScheduler+0xac>)
 8004c02:	f7ff fe51 	bl	80048a8 <xTaskCreateStatic>
 8004c06:	4603      	mov	r3, r0
 8004c08:	4a1d      	ldr	r2, [pc, #116]	; (8004c80 <vTaskStartScheduler+0xb0>)
 8004c0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c0c:	4b1c      	ldr	r3, [pc, #112]	; (8004c80 <vTaskStartScheduler+0xb0>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c14:	2301      	movs	r3, #1
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	e001      	b.n	8004c1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d116      	bne.n	8004c52 <vTaskStartScheduler+0x82>
	__asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	613b      	str	r3, [r7, #16]
}
 8004c36:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c38:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <vTaskStartScheduler+0xb4>)
 8004c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c3e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c40:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <vTaskStartScheduler+0xb8>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c46:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <vTaskStartScheduler+0xbc>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c4c:	f000 fe68 	bl	8005920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c50:	e00e      	b.n	8004c70 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c58:	d10a      	bne.n	8004c70 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	60fb      	str	r3, [r7, #12]
}
 8004c6c:	bf00      	nop
 8004c6e:	e7fe      	b.n	8004c6e <vTaskStartScheduler+0x9e>
}
 8004c70:	bf00      	nop
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	08006174 	.word	0x08006174
 8004c7c:	08005221 	.word	0x08005221
 8004c80:	200003a4 	.word	0x200003a4
 8004c84:	200003a0 	.word	0x200003a0
 8004c88:	2000038c 	.word	0x2000038c
 8004c8c:	20000384 	.word	0x20000384

08004c90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c94:	4b04      	ldr	r3, [pc, #16]	; (8004ca8 <vTaskSuspendAll+0x18>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	4a03      	ldr	r2, [pc, #12]	; (8004ca8 <vTaskSuspendAll+0x18>)
 8004c9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c9e:	bf00      	nop
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	200003a8 	.word	0x200003a8

08004cac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cba:	4b41      	ldr	r3, [pc, #260]	; (8004dc0 <xTaskResumeAll+0x114>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	603b      	str	r3, [r7, #0]
}
 8004cd4:	bf00      	nop
 8004cd6:	e7fe      	b.n	8004cd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004cd8:	f000 fec4 	bl	8005a64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cdc:	4b38      	ldr	r3, [pc, #224]	; (8004dc0 <xTaskResumeAll+0x114>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	4a37      	ldr	r2, [pc, #220]	; (8004dc0 <xTaskResumeAll+0x114>)
 8004ce4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ce6:	4b36      	ldr	r3, [pc, #216]	; (8004dc0 <xTaskResumeAll+0x114>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d161      	bne.n	8004db2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cee:	4b35      	ldr	r3, [pc, #212]	; (8004dc4 <xTaskResumeAll+0x118>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d05d      	beq.n	8004db2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cf6:	e02e      	b.n	8004d56 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf8:	4b33      	ldr	r3, [pc, #204]	; (8004dc8 <xTaskResumeAll+0x11c>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3318      	adds	r3, #24
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff f82b 	bl	8003d60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff f826 	bl	8003d60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	2201      	movs	r2, #1
 8004d1a:	409a      	lsls	r2, r3
 8004d1c:	4b2b      	ldr	r3, [pc, #172]	; (8004dcc <xTaskResumeAll+0x120>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	4a2a      	ldr	r2, [pc, #168]	; (8004dcc <xTaskResumeAll+0x120>)
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4a27      	ldr	r2, [pc, #156]	; (8004dd0 <xTaskResumeAll+0x124>)
 8004d34:	441a      	add	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	3304      	adds	r3, #4
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	f7fe ffb2 	bl	8003ca6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d46:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <xTaskResumeAll+0x128>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d302      	bcc.n	8004d56 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004d50:	4b21      	ldr	r3, [pc, #132]	; (8004dd8 <xTaskResumeAll+0x12c>)
 8004d52:	2201      	movs	r2, #1
 8004d54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d56:	4b1c      	ldr	r3, [pc, #112]	; (8004dc8 <xTaskResumeAll+0x11c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1cc      	bne.n	8004cf8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d64:	f000 fb12 	bl	800538c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d68:	4b1c      	ldr	r3, [pc, #112]	; (8004ddc <xTaskResumeAll+0x130>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d010      	beq.n	8004d96 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d74:	f000 f836 	bl	8004de4 <xTaskIncrementTick>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004d7e:	4b16      	ldr	r3, [pc, #88]	; (8004dd8 <xTaskResumeAll+0x12c>)
 8004d80:	2201      	movs	r2, #1
 8004d82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1f1      	bne.n	8004d74 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004d90:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <xTaskResumeAll+0x130>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d96:	4b10      	ldr	r3, [pc, #64]	; (8004dd8 <xTaskResumeAll+0x12c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d009      	beq.n	8004db2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004da2:	4b0f      	ldr	r3, [pc, #60]	; (8004de0 <xTaskResumeAll+0x134>)
 8004da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004db2:	f000 fe87 	bl	8005ac4 <vPortExitCritical>

	return xAlreadyYielded;
 8004db6:	68bb      	ldr	r3, [r7, #8]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	200003a8 	.word	0x200003a8
 8004dc4:	20000380 	.word	0x20000380
 8004dc8:	20000340 	.word	0x20000340
 8004dcc:	20000388 	.word	0x20000388
 8004dd0:	20000284 	.word	0x20000284
 8004dd4:	20000280 	.word	0x20000280
 8004dd8:	20000394 	.word	0x20000394
 8004ddc:	20000390 	.word	0x20000390
 8004de0:	e000ed04 	.word	0xe000ed04

08004de4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dee:	4b4e      	ldr	r3, [pc, #312]	; (8004f28 <xTaskIncrementTick+0x144>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f040 808e 	bne.w	8004f14 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004df8:	4b4c      	ldr	r3, [pc, #304]	; (8004f2c <xTaskIncrementTick+0x148>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e00:	4a4a      	ldr	r2, [pc, #296]	; (8004f2c <xTaskIncrementTick+0x148>)
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d120      	bne.n	8004e4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e0c:	4b48      	ldr	r3, [pc, #288]	; (8004f30 <xTaskIncrementTick+0x14c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <xTaskIncrementTick+0x48>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	603b      	str	r3, [r7, #0]
}
 8004e28:	bf00      	nop
 8004e2a:	e7fe      	b.n	8004e2a <xTaskIncrementTick+0x46>
 8004e2c:	4b40      	ldr	r3, [pc, #256]	; (8004f30 <xTaskIncrementTick+0x14c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	4b40      	ldr	r3, [pc, #256]	; (8004f34 <xTaskIncrementTick+0x150>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a3e      	ldr	r2, [pc, #248]	; (8004f30 <xTaskIncrementTick+0x14c>)
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	4a3e      	ldr	r2, [pc, #248]	; (8004f34 <xTaskIncrementTick+0x150>)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6013      	str	r3, [r2, #0]
 8004e40:	4b3d      	ldr	r3, [pc, #244]	; (8004f38 <xTaskIncrementTick+0x154>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3301      	adds	r3, #1
 8004e46:	4a3c      	ldr	r2, [pc, #240]	; (8004f38 <xTaskIncrementTick+0x154>)
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	f000 fa9f 	bl	800538c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e4e:	4b3b      	ldr	r3, [pc, #236]	; (8004f3c <xTaskIncrementTick+0x158>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d348      	bcc.n	8004eea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e58:	4b35      	ldr	r3, [pc, #212]	; (8004f30 <xTaskIncrementTick+0x14c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d104      	bne.n	8004e6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e62:	4b36      	ldr	r3, [pc, #216]	; (8004f3c <xTaskIncrementTick+0x158>)
 8004e64:	f04f 32ff 	mov.w	r2, #4294967295
 8004e68:	601a      	str	r2, [r3, #0]
					break;
 8004e6a:	e03e      	b.n	8004eea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e6c:	4b30      	ldr	r3, [pc, #192]	; (8004f30 <xTaskIncrementTick+0x14c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d203      	bcs.n	8004e8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e84:	4a2d      	ldr	r2, [pc, #180]	; (8004f3c <xTaskIncrementTick+0x158>)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e8a:	e02e      	b.n	8004eea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fe ff65 	bl	8003d60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d004      	beq.n	8004ea8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	3318      	adds	r3, #24
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fe ff5c 	bl	8003d60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	2201      	movs	r2, #1
 8004eae:	409a      	lsls	r2, r3
 8004eb0:	4b23      	ldr	r3, [pc, #140]	; (8004f40 <xTaskIncrementTick+0x15c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	4a22      	ldr	r2, [pc, #136]	; (8004f40 <xTaskIncrementTick+0x15c>)
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4a1f      	ldr	r2, [pc, #124]	; (8004f44 <xTaskIncrementTick+0x160>)
 8004ec8:	441a      	add	r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	f7fe fee8 	bl	8003ca6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eda:	4b1b      	ldr	r3, [pc, #108]	; (8004f48 <xTaskIncrementTick+0x164>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d3b9      	bcc.n	8004e58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ee8:	e7b6      	b.n	8004e58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004eea:	4b17      	ldr	r3, [pc, #92]	; (8004f48 <xTaskIncrementTick+0x164>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef0:	4914      	ldr	r1, [pc, #80]	; (8004f44 <xTaskIncrementTick+0x160>)
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	440b      	add	r3, r1
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d901      	bls.n	8004f06 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004f02:	2301      	movs	r3, #1
 8004f04:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f06:	4b11      	ldr	r3, [pc, #68]	; (8004f4c <xTaskIncrementTick+0x168>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d007      	beq.n	8004f1e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	617b      	str	r3, [r7, #20]
 8004f12:	e004      	b.n	8004f1e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f14:	4b0e      	ldr	r3, [pc, #56]	; (8004f50 <xTaskIncrementTick+0x16c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	4a0d      	ldr	r2, [pc, #52]	; (8004f50 <xTaskIncrementTick+0x16c>)
 8004f1c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f1e:	697b      	ldr	r3, [r7, #20]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	200003a8 	.word	0x200003a8
 8004f2c:	20000384 	.word	0x20000384
 8004f30:	20000338 	.word	0x20000338
 8004f34:	2000033c 	.word	0x2000033c
 8004f38:	20000398 	.word	0x20000398
 8004f3c:	200003a0 	.word	0x200003a0
 8004f40:	20000388 	.word	0x20000388
 8004f44:	20000284 	.word	0x20000284
 8004f48:	20000280 	.word	0x20000280
 8004f4c:	20000394 	.word	0x20000394
 8004f50:	20000390 	.word	0x20000390

08004f54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f5a:	4b27      	ldr	r3, [pc, #156]	; (8004ff8 <vTaskSwitchContext+0xa4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f62:	4b26      	ldr	r3, [pc, #152]	; (8004ffc <vTaskSwitchContext+0xa8>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f68:	e03f      	b.n	8004fea <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004f6a:	4b24      	ldr	r3, [pc, #144]	; (8004ffc <vTaskSwitchContext+0xa8>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f70:	4b23      	ldr	r3, [pc, #140]	; (8005000 <vTaskSwitchContext+0xac>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	fab3 f383 	clz	r3, r3
 8004f7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004f7e:	7afb      	ldrb	r3, [r7, #11]
 8004f80:	f1c3 031f 	rsb	r3, r3, #31
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	491f      	ldr	r1, [pc, #124]	; (8005004 <vTaskSwitchContext+0xb0>)
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	440b      	add	r3, r1
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10a      	bne.n	8004fb0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	607b      	str	r3, [r7, #4]
}
 8004fac:	bf00      	nop
 8004fae:	e7fe      	b.n	8004fae <vTaskSwitchContext+0x5a>
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4a12      	ldr	r2, [pc, #72]	; (8005004 <vTaskSwitchContext+0xb0>)
 8004fbc:	4413      	add	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	605a      	str	r2, [r3, #4]
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	3308      	adds	r3, #8
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d104      	bne.n	8004fe0 <vTaskSwitchContext+0x8c>
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	605a      	str	r2, [r3, #4]
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	4a08      	ldr	r2, [pc, #32]	; (8005008 <vTaskSwitchContext+0xb4>)
 8004fe8:	6013      	str	r3, [r2, #0]
}
 8004fea:	bf00      	nop
 8004fec:	371c      	adds	r7, #28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	200003a8 	.word	0x200003a8
 8004ffc:	20000394 	.word	0x20000394
 8005000:	20000388 	.word	0x20000388
 8005004:	20000284 	.word	0x20000284
 8005008:	20000280 	.word	0x20000280

0800500c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10a      	bne.n	8005032 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	60fb      	str	r3, [r7, #12]
}
 800502e:	bf00      	nop
 8005030:	e7fe      	b.n	8005030 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005032:	4b07      	ldr	r3, [pc, #28]	; (8005050 <vTaskPlaceOnEventList+0x44>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3318      	adds	r3, #24
 8005038:	4619      	mov	r1, r3
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7fe fe57 	bl	8003cee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005040:	2101      	movs	r1, #1
 8005042:	6838      	ldr	r0, [r7, #0]
 8005044:	f000 fb7e 	bl	8005744 <prvAddCurrentTaskToDelayedList>
}
 8005048:	bf00      	nop
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	20000280 	.word	0x20000280

08005054 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10a      	bne.n	8005080 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800506a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	60fb      	str	r3, [r7, #12]
}
 800507c:	bf00      	nop
 800507e:	e7fe      	b.n	800507e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	3318      	adds	r3, #24
 8005084:	4618      	mov	r0, r3
 8005086:	f7fe fe6b 	bl	8003d60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800508a:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <xTaskRemoveFromEventList+0xac>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d11c      	bne.n	80050cc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	3304      	adds	r3, #4
 8005096:	4618      	mov	r0, r3
 8005098:	f7fe fe62 	bl	8003d60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	2201      	movs	r2, #1
 80050a2:	409a      	lsls	r2, r3
 80050a4:	4b17      	ldr	r3, [pc, #92]	; (8005104 <xTaskRemoveFromEventList+0xb0>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	4a16      	ldr	r2, [pc, #88]	; (8005104 <xTaskRemoveFromEventList+0xb0>)
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b2:	4613      	mov	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4a13      	ldr	r2, [pc, #76]	; (8005108 <xTaskRemoveFromEventList+0xb4>)
 80050bc:	441a      	add	r2, r3
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	3304      	adds	r3, #4
 80050c2:	4619      	mov	r1, r3
 80050c4:	4610      	mov	r0, r2
 80050c6:	f7fe fdee 	bl	8003ca6 <vListInsertEnd>
 80050ca:	e005      	b.n	80050d8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	3318      	adds	r3, #24
 80050d0:	4619      	mov	r1, r3
 80050d2:	480e      	ldr	r0, [pc, #56]	; (800510c <xTaskRemoveFromEventList+0xb8>)
 80050d4:	f7fe fde7 	bl	8003ca6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050dc:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <xTaskRemoveFromEventList+0xbc>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d905      	bls.n	80050f2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80050e6:	2301      	movs	r3, #1
 80050e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80050ea:	4b0a      	ldr	r3, [pc, #40]	; (8005114 <xTaskRemoveFromEventList+0xc0>)
 80050ec:	2201      	movs	r2, #1
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	e001      	b.n	80050f6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80050f2:	2300      	movs	r3, #0
 80050f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80050f6:	697b      	ldr	r3, [r7, #20]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	200003a8 	.word	0x200003a8
 8005104:	20000388 	.word	0x20000388
 8005108:	20000284 	.word	0x20000284
 800510c:	20000340 	.word	0x20000340
 8005110:	20000280 	.word	0x20000280
 8005114:	20000394 	.word	0x20000394

08005118 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005120:	4b06      	ldr	r3, [pc, #24]	; (800513c <vTaskInternalSetTimeOutState+0x24>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005128:	4b05      	ldr	r3, [pc, #20]	; (8005140 <vTaskInternalSetTimeOutState+0x28>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	605a      	str	r2, [r3, #4]
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	20000398 	.word	0x20000398
 8005140:	20000384 	.word	0x20000384

08005144 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	613b      	str	r3, [r7, #16]
}
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	60fb      	str	r3, [r7, #12]
}
 8005182:	bf00      	nop
 8005184:	e7fe      	b.n	8005184 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005186:	f000 fc6d 	bl	8005a64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800518a:	4b1d      	ldr	r3, [pc, #116]	; (8005200 <xTaskCheckForTimeOut+0xbc>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a2:	d102      	bne.n	80051aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61fb      	str	r3, [r7, #28]
 80051a8:	e023      	b.n	80051f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	4b15      	ldr	r3, [pc, #84]	; (8005204 <xTaskCheckForTimeOut+0xc0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d007      	beq.n	80051c6 <xTaskCheckForTimeOut+0x82>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d302      	bcc.n	80051c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80051c0:	2301      	movs	r3, #1
 80051c2:	61fb      	str	r3, [r7, #28]
 80051c4:	e015      	b.n	80051f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d20b      	bcs.n	80051e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	1ad2      	subs	r2, r2, r3
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff ff9b 	bl	8005118 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61fb      	str	r3, [r7, #28]
 80051e6:	e004      	b.n	80051f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80051ee:	2301      	movs	r3, #1
 80051f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80051f2:	f000 fc67 	bl	8005ac4 <vPortExitCritical>

	return xReturn;
 80051f6:	69fb      	ldr	r3, [r7, #28]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3720      	adds	r7, #32
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20000384 	.word	0x20000384
 8005204:	20000398 	.word	0x20000398

08005208 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800520c:	4b03      	ldr	r3, [pc, #12]	; (800521c <vTaskMissedYield+0x14>)
 800520e:	2201      	movs	r2, #1
 8005210:	601a      	str	r2, [r3, #0]
}
 8005212:	bf00      	nop
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	20000394 	.word	0x20000394

08005220 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005228:	f000 f852 	bl	80052d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800522c:	4b06      	ldr	r3, [pc, #24]	; (8005248 <prvIdleTask+0x28>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d9f9      	bls.n	8005228 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005234:	4b05      	ldr	r3, [pc, #20]	; (800524c <prvIdleTask+0x2c>)
 8005236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005244:	e7f0      	b.n	8005228 <prvIdleTask+0x8>
 8005246:	bf00      	nop
 8005248:	20000284 	.word	0x20000284
 800524c:	e000ed04 	.word	0xe000ed04

08005250 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005256:	2300      	movs	r3, #0
 8005258:	607b      	str	r3, [r7, #4]
 800525a:	e00c      	b.n	8005276 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4a12      	ldr	r2, [pc, #72]	; (80052b0 <prvInitialiseTaskLists+0x60>)
 8005268:	4413      	add	r3, r2
 800526a:	4618      	mov	r0, r3
 800526c:	f7fe fcee 	bl	8003c4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3301      	adds	r3, #1
 8005274:	607b      	str	r3, [r7, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b06      	cmp	r3, #6
 800527a:	d9ef      	bls.n	800525c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800527c:	480d      	ldr	r0, [pc, #52]	; (80052b4 <prvInitialiseTaskLists+0x64>)
 800527e:	f7fe fce5 	bl	8003c4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005282:	480d      	ldr	r0, [pc, #52]	; (80052b8 <prvInitialiseTaskLists+0x68>)
 8005284:	f7fe fce2 	bl	8003c4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005288:	480c      	ldr	r0, [pc, #48]	; (80052bc <prvInitialiseTaskLists+0x6c>)
 800528a:	f7fe fcdf 	bl	8003c4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800528e:	480c      	ldr	r0, [pc, #48]	; (80052c0 <prvInitialiseTaskLists+0x70>)
 8005290:	f7fe fcdc 	bl	8003c4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005294:	480b      	ldr	r0, [pc, #44]	; (80052c4 <prvInitialiseTaskLists+0x74>)
 8005296:	f7fe fcd9 	bl	8003c4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800529a:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <prvInitialiseTaskLists+0x78>)
 800529c:	4a05      	ldr	r2, [pc, #20]	; (80052b4 <prvInitialiseTaskLists+0x64>)
 800529e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052a0:	4b0a      	ldr	r3, [pc, #40]	; (80052cc <prvInitialiseTaskLists+0x7c>)
 80052a2:	4a05      	ldr	r2, [pc, #20]	; (80052b8 <prvInitialiseTaskLists+0x68>)
 80052a4:	601a      	str	r2, [r3, #0]
}
 80052a6:	bf00      	nop
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	20000284 	.word	0x20000284
 80052b4:	20000310 	.word	0x20000310
 80052b8:	20000324 	.word	0x20000324
 80052bc:	20000340 	.word	0x20000340
 80052c0:	20000354 	.word	0x20000354
 80052c4:	2000036c 	.word	0x2000036c
 80052c8:	20000338 	.word	0x20000338
 80052cc:	2000033c 	.word	0x2000033c

080052d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052d6:	e019      	b.n	800530c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80052d8:	f000 fbc4 	bl	8005a64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052dc:	4b10      	ldr	r3, [pc, #64]	; (8005320 <prvCheckTasksWaitingTermination+0x50>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3304      	adds	r3, #4
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fe fd39 	bl	8003d60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80052ee:	4b0d      	ldr	r3, [pc, #52]	; (8005324 <prvCheckTasksWaitingTermination+0x54>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	4a0b      	ldr	r2, [pc, #44]	; (8005324 <prvCheckTasksWaitingTermination+0x54>)
 80052f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80052f8:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <prvCheckTasksWaitingTermination+0x58>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	4a0a      	ldr	r2, [pc, #40]	; (8005328 <prvCheckTasksWaitingTermination+0x58>)
 8005300:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005302:	f000 fbdf 	bl	8005ac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f810 	bl	800532c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800530c:	4b06      	ldr	r3, [pc, #24]	; (8005328 <prvCheckTasksWaitingTermination+0x58>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1e1      	bne.n	80052d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005314:	bf00      	nop
 8005316:	bf00      	nop
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	20000354 	.word	0x20000354
 8005324:	20000380 	.word	0x20000380
 8005328:	20000368 	.word	0x20000368

0800532c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800533a:	2b00      	cmp	r3, #0
 800533c:	d108      	bne.n	8005350 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fd7c 	bl	8005e40 <vPortFree>
				vPortFree( pxTCB );
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fd79 	bl	8005e40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800534e:	e018      	b.n	8005382 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005356:	2b01      	cmp	r3, #1
 8005358:	d103      	bne.n	8005362 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fd70 	bl	8005e40 <vPortFree>
	}
 8005360:	e00f      	b.n	8005382 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005368:	2b02      	cmp	r3, #2
 800536a:	d00a      	beq.n	8005382 <prvDeleteTCB+0x56>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	60fb      	str	r3, [r7, #12]
}
 800537e:	bf00      	nop
 8005380:	e7fe      	b.n	8005380 <prvDeleteTCB+0x54>
	}
 8005382:	bf00      	nop
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005392:	4b0c      	ldr	r3, [pc, #48]	; (80053c4 <prvResetNextTaskUnblockTime+0x38>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d104      	bne.n	80053a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800539c:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <prvResetNextTaskUnblockTime+0x3c>)
 800539e:	f04f 32ff 	mov.w	r2, #4294967295
 80053a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80053a4:	e008      	b.n	80053b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053a6:	4b07      	ldr	r3, [pc, #28]	; (80053c4 <prvResetNextTaskUnblockTime+0x38>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	4a04      	ldr	r2, [pc, #16]	; (80053c8 <prvResetNextTaskUnblockTime+0x3c>)
 80053b6:	6013      	str	r3, [r2, #0]
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	20000338 	.word	0x20000338
 80053c8:	200003a0 	.word	0x200003a0

080053cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80053d2:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <xTaskGetSchedulerState+0x34>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d102      	bne.n	80053e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80053da:	2301      	movs	r3, #1
 80053dc:	607b      	str	r3, [r7, #4]
 80053de:	e008      	b.n	80053f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053e0:	4b08      	ldr	r3, [pc, #32]	; (8005404 <xTaskGetSchedulerState+0x38>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d102      	bne.n	80053ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80053e8:	2302      	movs	r3, #2
 80053ea:	607b      	str	r3, [r7, #4]
 80053ec:	e001      	b.n	80053f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80053ee:	2300      	movs	r3, #0
 80053f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80053f2:	687b      	ldr	r3, [r7, #4]
	}
 80053f4:	4618      	mov	r0, r3
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	2000038c 	.word	0x2000038c
 8005404:	200003a8 	.word	0x200003a8

08005408 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005414:	2300      	movs	r3, #0
 8005416:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d05e      	beq.n	80054dc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005422:	4b31      	ldr	r3, [pc, #196]	; (80054e8 <xTaskPriorityInherit+0xe0>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	429a      	cmp	r2, r3
 800542a:	d24e      	bcs.n	80054ca <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	2b00      	cmp	r3, #0
 8005432:	db06      	blt.n	8005442 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005434:	4b2c      	ldr	r3, [pc, #176]	; (80054e8 <xTaskPriorityInherit+0xe0>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	f1c3 0207 	rsb	r2, r3, #7
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	6959      	ldr	r1, [r3, #20]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544a:	4613      	mov	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4a26      	ldr	r2, [pc, #152]	; (80054ec <xTaskPriorityInherit+0xe4>)
 8005454:	4413      	add	r3, r2
 8005456:	4299      	cmp	r1, r3
 8005458:	d12f      	bne.n	80054ba <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	3304      	adds	r3, #4
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe fc7e 	bl	8003d60 <uxListRemove>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10a      	bne.n	8005480 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	2201      	movs	r2, #1
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	43da      	mvns	r2, r3
 8005476:	4b1e      	ldr	r3, [pc, #120]	; (80054f0 <xTaskPriorityInherit+0xe8>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4013      	ands	r3, r2
 800547c:	4a1c      	ldr	r2, [pc, #112]	; (80054f0 <xTaskPriorityInherit+0xe8>)
 800547e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005480:	4b19      	ldr	r3, [pc, #100]	; (80054e8 <xTaskPriorityInherit+0xe0>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548e:	2201      	movs	r2, #1
 8005490:	409a      	lsls	r2, r3
 8005492:	4b17      	ldr	r3, [pc, #92]	; (80054f0 <xTaskPriorityInherit+0xe8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4313      	orrs	r3, r2
 8005498:	4a15      	ldr	r2, [pc, #84]	; (80054f0 <xTaskPriorityInherit+0xe8>)
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4a10      	ldr	r2, [pc, #64]	; (80054ec <xTaskPriorityInherit+0xe4>)
 80054aa:	441a      	add	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	3304      	adds	r3, #4
 80054b0:	4619      	mov	r1, r3
 80054b2:	4610      	mov	r0, r2
 80054b4:	f7fe fbf7 	bl	8003ca6 <vListInsertEnd>
 80054b8:	e004      	b.n	80054c4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80054ba:	4b0b      	ldr	r3, [pc, #44]	; (80054e8 <xTaskPriorityInherit+0xe0>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80054c4:	2301      	movs	r3, #1
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	e008      	b.n	80054dc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ce:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <xTaskPriorityInherit+0xe0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d201      	bcs.n	80054dc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80054d8:	2301      	movs	r3, #1
 80054da:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80054dc:	68fb      	ldr	r3, [r7, #12]
	}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20000280 	.word	0x20000280
 80054ec:	20000284 	.word	0x20000284
 80054f0:	20000388 	.word	0x20000388

080054f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005500:	2300      	movs	r3, #0
 8005502:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d06e      	beq.n	80055e8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800550a:	4b3a      	ldr	r3, [pc, #232]	; (80055f4 <xTaskPriorityDisinherit+0x100>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	429a      	cmp	r2, r3
 8005512:	d00a      	beq.n	800552a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	60fb      	str	r3, [r7, #12]
}
 8005526:	bf00      	nop
 8005528:	e7fe      	b.n	8005528 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10a      	bne.n	8005548 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	60bb      	str	r3, [r7, #8]
}
 8005544:	bf00      	nop
 8005546:	e7fe      	b.n	8005546 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800554c:	1e5a      	subs	r2, r3, #1
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555a:	429a      	cmp	r2, r3
 800555c:	d044      	beq.n	80055e8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005562:	2b00      	cmp	r3, #0
 8005564:	d140      	bne.n	80055e8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	3304      	adds	r3, #4
 800556a:	4618      	mov	r0, r3
 800556c:	f7fe fbf8 	bl	8003d60 <uxListRemove>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d115      	bne.n	80055a2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557a:	491f      	ldr	r1, [pc, #124]	; (80055f8 <xTaskPriorityDisinherit+0x104>)
 800557c:	4613      	mov	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	440b      	add	r3, r1
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10a      	bne.n	80055a2 <xTaskPriorityDisinherit+0xae>
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005590:	2201      	movs	r2, #1
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	43da      	mvns	r2, r3
 8005598:	4b18      	ldr	r3, [pc, #96]	; (80055fc <xTaskPriorityDisinherit+0x108>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4013      	ands	r3, r2
 800559e:	4a17      	ldr	r2, [pc, #92]	; (80055fc <xTaskPriorityDisinherit+0x108>)
 80055a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ae:	f1c3 0207 	rsb	r2, r3, #7
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	2201      	movs	r2, #1
 80055bc:	409a      	lsls	r2, r3
 80055be:	4b0f      	ldr	r3, [pc, #60]	; (80055fc <xTaskPriorityDisinherit+0x108>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	4a0d      	ldr	r2, [pc, #52]	; (80055fc <xTaskPriorityDisinherit+0x108>)
 80055c6:	6013      	str	r3, [r2, #0]
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055cc:	4613      	mov	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4a08      	ldr	r2, [pc, #32]	; (80055f8 <xTaskPriorityDisinherit+0x104>)
 80055d6:	441a      	add	r2, r3
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	3304      	adds	r3, #4
 80055dc:	4619      	mov	r1, r3
 80055de:	4610      	mov	r0, r2
 80055e0:	f7fe fb61 	bl	8003ca6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80055e4:	2301      	movs	r3, #1
 80055e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80055e8:	697b      	ldr	r3, [r7, #20]
	}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20000280 	.word	0x20000280
 80055f8:	20000284 	.word	0x20000284
 80055fc:	20000388 	.word	0x20000388

08005600 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005600:	b580      	push	{r7, lr}
 8005602:	b088      	sub	sp, #32
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800560e:	2301      	movs	r3, #1
 8005610:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d077      	beq.n	8005708 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10a      	bne.n	8005636 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	60fb      	str	r3, [r7, #12]
}
 8005632:	bf00      	nop
 8005634:	e7fe      	b.n	8005634 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d902      	bls.n	8005646 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	61fb      	str	r3, [r7, #28]
 8005644:	e002      	b.n	800564c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	429a      	cmp	r2, r3
 8005654:	d058      	beq.n	8005708 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	429a      	cmp	r2, r3
 800565e:	d153      	bne.n	8005708 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005660:	4b2b      	ldr	r3, [pc, #172]	; (8005710 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	429a      	cmp	r2, r3
 8005668:	d10a      	bne.n	8005680 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566e:	f383 8811 	msr	BASEPRI, r3
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	60bb      	str	r3, [r7, #8]
}
 800567c:	bf00      	nop
 800567e:	e7fe      	b.n	800567e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	2b00      	cmp	r3, #0
 8005692:	db04      	blt.n	800569e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	f1c3 0207 	rsb	r2, r3, #7
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	6959      	ldr	r1, [r3, #20]
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4a19      	ldr	r2, [pc, #100]	; (8005714 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80056ae:	4413      	add	r3, r2
 80056b0:	4299      	cmp	r1, r3
 80056b2:	d129      	bne.n	8005708 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fe fb51 	bl	8003d60 <uxListRemove>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10a      	bne.n	80056da <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	2201      	movs	r2, #1
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	43da      	mvns	r2, r3
 80056d0:	4b11      	ldr	r3, [pc, #68]	; (8005718 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4013      	ands	r3, r2
 80056d6:	4a10      	ldr	r2, [pc, #64]	; (8005718 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80056d8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056de:	2201      	movs	r2, #1
 80056e0:	409a      	lsls	r2, r3
 80056e2:	4b0d      	ldr	r3, [pc, #52]	; (8005718 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	4a0b      	ldr	r2, [pc, #44]	; (8005718 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80056ea:	6013      	str	r3, [r2, #0]
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f0:	4613      	mov	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4a06      	ldr	r2, [pc, #24]	; (8005714 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80056fa:	441a      	add	r2, r3
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	3304      	adds	r3, #4
 8005700:	4619      	mov	r1, r3
 8005702:	4610      	mov	r0, r2
 8005704:	f7fe facf 	bl	8003ca6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005708:	bf00      	nop
 800570a:	3720      	adds	r7, #32
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	20000280 	.word	0x20000280
 8005714:	20000284 	.word	0x20000284
 8005718:	20000388 	.word	0x20000388

0800571c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005720:	4b07      	ldr	r3, [pc, #28]	; (8005740 <pvTaskIncrementMutexHeldCount+0x24>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d004      	beq.n	8005732 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005728:	4b05      	ldr	r3, [pc, #20]	; (8005740 <pvTaskIncrementMutexHeldCount+0x24>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800572e:	3201      	adds	r2, #1
 8005730:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005732:	4b03      	ldr	r3, [pc, #12]	; (8005740 <pvTaskIncrementMutexHeldCount+0x24>)
 8005734:	681b      	ldr	r3, [r3, #0]
	}
 8005736:	4618      	mov	r0, r3
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	20000280 	.word	0x20000280

08005744 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800574e:	4b29      	ldr	r3, [pc, #164]	; (80057f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005754:	4b28      	ldr	r3, [pc, #160]	; (80057f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3304      	adds	r3, #4
 800575a:	4618      	mov	r0, r3
 800575c:	f7fe fb00 	bl	8003d60 <uxListRemove>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10b      	bne.n	800577e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005766:	4b24      	ldr	r3, [pc, #144]	; (80057f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	2201      	movs	r2, #1
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	43da      	mvns	r2, r3
 8005774:	4b21      	ldr	r3, [pc, #132]	; (80057fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4013      	ands	r3, r2
 800577a:	4a20      	ldr	r2, [pc, #128]	; (80057fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800577c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005784:	d10a      	bne.n	800579c <prvAddCurrentTaskToDelayedList+0x58>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800578c:	4b1a      	ldr	r3, [pc, #104]	; (80057f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3304      	adds	r3, #4
 8005792:	4619      	mov	r1, r3
 8005794:	481a      	ldr	r0, [pc, #104]	; (8005800 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005796:	f7fe fa86 	bl	8003ca6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800579a:	e026      	b.n	80057ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4413      	add	r3, r2
 80057a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057a4:	4b14      	ldr	r3, [pc, #80]	; (80057f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d209      	bcs.n	80057c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057b4:	4b13      	ldr	r3, [pc, #76]	; (8005804 <prvAddCurrentTaskToDelayedList+0xc0>)
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	4b0f      	ldr	r3, [pc, #60]	; (80057f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3304      	adds	r3, #4
 80057be:	4619      	mov	r1, r3
 80057c0:	4610      	mov	r0, r2
 80057c2:	f7fe fa94 	bl	8003cee <vListInsert>
}
 80057c6:	e010      	b.n	80057ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057c8:	4b0f      	ldr	r3, [pc, #60]	; (8005808 <prvAddCurrentTaskToDelayedList+0xc4>)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3304      	adds	r3, #4
 80057d2:	4619      	mov	r1, r3
 80057d4:	4610      	mov	r0, r2
 80057d6:	f7fe fa8a 	bl	8003cee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057da:	4b0c      	ldr	r3, [pc, #48]	; (800580c <prvAddCurrentTaskToDelayedList+0xc8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d202      	bcs.n	80057ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80057e4:	4a09      	ldr	r2, [pc, #36]	; (800580c <prvAddCurrentTaskToDelayedList+0xc8>)
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	6013      	str	r3, [r2, #0]
}
 80057ea:	bf00      	nop
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	20000384 	.word	0x20000384
 80057f8:	20000280 	.word	0x20000280
 80057fc:	20000388 	.word	0x20000388
 8005800:	2000036c 	.word	0x2000036c
 8005804:	2000033c 	.word	0x2000033c
 8005808:	20000338 	.word	0x20000338
 800580c:	200003a0 	.word	0x200003a0

08005810 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3b04      	subs	r3, #4
 8005820:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	3b04      	subs	r3, #4
 800582e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f023 0201 	bic.w	r2, r3, #1
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	3b04      	subs	r3, #4
 800583e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005840:	4a0c      	ldr	r2, [pc, #48]	; (8005874 <pxPortInitialiseStack+0x64>)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3b14      	subs	r3, #20
 800584a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3b04      	subs	r3, #4
 8005856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f06f 0202 	mvn.w	r2, #2
 800585e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3b20      	subs	r3, #32
 8005864:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005866:	68fb      	ldr	r3, [r7, #12]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	08005879 	.word	0x08005879

08005878 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800587e:	2300      	movs	r3, #0
 8005880:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005882:	4b12      	ldr	r3, [pc, #72]	; (80058cc <prvTaskExitError+0x54>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588a:	d00a      	beq.n	80058a2 <prvTaskExitError+0x2a>
	__asm volatile
 800588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	60fb      	str	r3, [r7, #12]
}
 800589e:	bf00      	nop
 80058a0:	e7fe      	b.n	80058a0 <prvTaskExitError+0x28>
	__asm volatile
 80058a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	60bb      	str	r3, [r7, #8]
}
 80058b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80058b6:	bf00      	nop
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0fc      	beq.n	80058b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058be:	bf00      	nop
 80058c0:	bf00      	nop
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	2000000c 	.word	0x2000000c

080058d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80058d0:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <pxCurrentTCBConst2>)
 80058d2:	6819      	ldr	r1, [r3, #0]
 80058d4:	6808      	ldr	r0, [r1, #0]
 80058d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058da:	f380 8809 	msr	PSP, r0
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f04f 0000 	mov.w	r0, #0
 80058e6:	f380 8811 	msr	BASEPRI, r0
 80058ea:	4770      	bx	lr
 80058ec:	f3af 8000 	nop.w

080058f0 <pxCurrentTCBConst2>:
 80058f0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop

080058f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058f8:	4808      	ldr	r0, [pc, #32]	; (800591c <prvPortStartFirstTask+0x24>)
 80058fa:	6800      	ldr	r0, [r0, #0]
 80058fc:	6800      	ldr	r0, [r0, #0]
 80058fe:	f380 8808 	msr	MSP, r0
 8005902:	f04f 0000 	mov.w	r0, #0
 8005906:	f380 8814 	msr	CONTROL, r0
 800590a:	b662      	cpsie	i
 800590c:	b661      	cpsie	f
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	df00      	svc	0
 8005918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800591a:	bf00      	nop
 800591c:	e000ed08 	.word	0xe000ed08

08005920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005926:	4b46      	ldr	r3, [pc, #280]	; (8005a40 <xPortStartScheduler+0x120>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a46      	ldr	r2, [pc, #280]	; (8005a44 <xPortStartScheduler+0x124>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d10a      	bne.n	8005946 <xPortStartScheduler+0x26>
	__asm volatile
 8005930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	613b      	str	r3, [r7, #16]
}
 8005942:	bf00      	nop
 8005944:	e7fe      	b.n	8005944 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005946:	4b3e      	ldr	r3, [pc, #248]	; (8005a40 <xPortStartScheduler+0x120>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a3f      	ldr	r2, [pc, #252]	; (8005a48 <xPortStartScheduler+0x128>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d10a      	bne.n	8005966 <xPortStartScheduler+0x46>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	60fb      	str	r3, [r7, #12]
}
 8005962:	bf00      	nop
 8005964:	e7fe      	b.n	8005964 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005966:	4b39      	ldr	r3, [pc, #228]	; (8005a4c <xPortStartScheduler+0x12c>)
 8005968:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	b2db      	uxtb	r3, r3
 8005970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	22ff      	movs	r2, #255	; 0xff
 8005976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	b2db      	uxtb	r3, r3
 800597e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	b2db      	uxtb	r3, r3
 8005984:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005988:	b2da      	uxtb	r2, r3
 800598a:	4b31      	ldr	r3, [pc, #196]	; (8005a50 <xPortStartScheduler+0x130>)
 800598c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800598e:	4b31      	ldr	r3, [pc, #196]	; (8005a54 <xPortStartScheduler+0x134>)
 8005990:	2207      	movs	r2, #7
 8005992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005994:	e009      	b.n	80059aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005996:	4b2f      	ldr	r3, [pc, #188]	; (8005a54 <xPortStartScheduler+0x134>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3b01      	subs	r3, #1
 800599c:	4a2d      	ldr	r2, [pc, #180]	; (8005a54 <xPortStartScheduler+0x134>)
 800599e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b2:	2b80      	cmp	r3, #128	; 0x80
 80059b4:	d0ef      	beq.n	8005996 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059b6:	4b27      	ldr	r3, [pc, #156]	; (8005a54 <xPortStartScheduler+0x134>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f1c3 0307 	rsb	r3, r3, #7
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d00a      	beq.n	80059d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	60bb      	str	r3, [r7, #8]
}
 80059d4:	bf00      	nop
 80059d6:	e7fe      	b.n	80059d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059d8:	4b1e      	ldr	r3, [pc, #120]	; (8005a54 <xPortStartScheduler+0x134>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	021b      	lsls	r3, r3, #8
 80059de:	4a1d      	ldr	r2, [pc, #116]	; (8005a54 <xPortStartScheduler+0x134>)
 80059e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059e2:	4b1c      	ldr	r3, [pc, #112]	; (8005a54 <xPortStartScheduler+0x134>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059ea:	4a1a      	ldr	r2, [pc, #104]	; (8005a54 <xPortStartScheduler+0x134>)
 80059ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059f6:	4b18      	ldr	r3, [pc, #96]	; (8005a58 <xPortStartScheduler+0x138>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a17      	ldr	r2, [pc, #92]	; (8005a58 <xPortStartScheduler+0x138>)
 80059fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a02:	4b15      	ldr	r3, [pc, #84]	; (8005a58 <xPortStartScheduler+0x138>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a14      	ldr	r2, [pc, #80]	; (8005a58 <xPortStartScheduler+0x138>)
 8005a08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a0e:	f000 f8dd 	bl	8005bcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a12:	4b12      	ldr	r3, [pc, #72]	; (8005a5c <xPortStartScheduler+0x13c>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a18:	f000 f8fc 	bl	8005c14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a1c:	4b10      	ldr	r3, [pc, #64]	; (8005a60 <xPortStartScheduler+0x140>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a0f      	ldr	r2, [pc, #60]	; (8005a60 <xPortStartScheduler+0x140>)
 8005a22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a28:	f7ff ff66 	bl	80058f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a2c:	f7ff fa92 	bl	8004f54 <vTaskSwitchContext>
	prvTaskExitError();
 8005a30:	f7ff ff22 	bl	8005878 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	e000ed00 	.word	0xe000ed00
 8005a44:	410fc271 	.word	0x410fc271
 8005a48:	410fc270 	.word	0x410fc270
 8005a4c:	e000e400 	.word	0xe000e400
 8005a50:	200003ac 	.word	0x200003ac
 8005a54:	200003b0 	.word	0x200003b0
 8005a58:	e000ed20 	.word	0xe000ed20
 8005a5c:	2000000c 	.word	0x2000000c
 8005a60:	e000ef34 	.word	0xe000ef34

08005a64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
	__asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	607b      	str	r3, [r7, #4]
}
 8005a7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a7e:	4b0f      	ldr	r3, [pc, #60]	; (8005abc <vPortEnterCritical+0x58>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3301      	adds	r3, #1
 8005a84:	4a0d      	ldr	r2, [pc, #52]	; (8005abc <vPortEnterCritical+0x58>)
 8005a86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a88:	4b0c      	ldr	r3, [pc, #48]	; (8005abc <vPortEnterCritical+0x58>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d10f      	bne.n	8005ab0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a90:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <vPortEnterCritical+0x5c>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	603b      	str	r3, [r7, #0]
}
 8005aac:	bf00      	nop
 8005aae:	e7fe      	b.n	8005aae <vPortEnterCritical+0x4a>
	}
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	2000000c 	.word	0x2000000c
 8005ac0:	e000ed04 	.word	0xe000ed04

08005ac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005aca:	4b12      	ldr	r3, [pc, #72]	; (8005b14 <vPortExitCritical+0x50>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10a      	bne.n	8005ae8 <vPortExitCritical+0x24>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	607b      	str	r3, [r7, #4]
}
 8005ae4:	bf00      	nop
 8005ae6:	e7fe      	b.n	8005ae6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ae8:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <vPortExitCritical+0x50>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3b01      	subs	r3, #1
 8005aee:	4a09      	ldr	r2, [pc, #36]	; (8005b14 <vPortExitCritical+0x50>)
 8005af0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005af2:	4b08      	ldr	r3, [pc, #32]	; (8005b14 <vPortExitCritical+0x50>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d105      	bne.n	8005b06 <vPortExitCritical+0x42>
 8005afa:	2300      	movs	r3, #0
 8005afc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	f383 8811 	msr	BASEPRI, r3
}
 8005b04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	2000000c 	.word	0x2000000c
	...

08005b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b20:	f3ef 8009 	mrs	r0, PSP
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	4b15      	ldr	r3, [pc, #84]	; (8005b80 <pxCurrentTCBConst>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	f01e 0f10 	tst.w	lr, #16
 8005b30:	bf08      	it	eq
 8005b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3a:	6010      	str	r0, [r2, #0]
 8005b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b44:	f380 8811 	msr	BASEPRI, r0
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f7ff fa00 	bl	8004f54 <vTaskSwitchContext>
 8005b54:	f04f 0000 	mov.w	r0, #0
 8005b58:	f380 8811 	msr	BASEPRI, r0
 8005b5c:	bc09      	pop	{r0, r3}
 8005b5e:	6819      	ldr	r1, [r3, #0]
 8005b60:	6808      	ldr	r0, [r1, #0]
 8005b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b66:	f01e 0f10 	tst.w	lr, #16
 8005b6a:	bf08      	it	eq
 8005b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b70:	f380 8809 	msr	PSP, r0
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	f3af 8000 	nop.w

08005b80 <pxCurrentTCBConst>:
 8005b80:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b84:	bf00      	nop
 8005b86:	bf00      	nop

08005b88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	607b      	str	r3, [r7, #4]
}
 8005ba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ba2:	f7ff f91f 	bl	8004de4 <xTaskIncrementTick>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005bac:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <SysTick_Handler+0x40>)
 8005bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	f383 8811 	msr	BASEPRI, r3
}
 8005bbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005bc0:	bf00      	nop
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	e000ed04 	.word	0xe000ed04

08005bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005bd0:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <vPortSetupTimerInterrupt+0x34>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <vPortSetupTimerInterrupt+0x38>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bdc:	4b0a      	ldr	r3, [pc, #40]	; (8005c08 <vPortSetupTimerInterrupt+0x3c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a0a      	ldr	r2, [pc, #40]	; (8005c0c <vPortSetupTimerInterrupt+0x40>)
 8005be2:	fba2 2303 	umull	r2, r3, r2, r3
 8005be6:	099b      	lsrs	r3, r3, #6
 8005be8:	4a09      	ldr	r2, [pc, #36]	; (8005c10 <vPortSetupTimerInterrupt+0x44>)
 8005bea:	3b01      	subs	r3, #1
 8005bec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bee:	4b04      	ldr	r3, [pc, #16]	; (8005c00 <vPortSetupTimerInterrupt+0x34>)
 8005bf0:	2207      	movs	r2, #7
 8005bf2:	601a      	str	r2, [r3, #0]
}
 8005bf4:	bf00      	nop
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	e000e010 	.word	0xe000e010
 8005c04:	e000e018 	.word	0xe000e018
 8005c08:	20000000 	.word	0x20000000
 8005c0c:	10624dd3 	.word	0x10624dd3
 8005c10:	e000e014 	.word	0xe000e014

08005c14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c24 <vPortEnableVFP+0x10>
 8005c18:	6801      	ldr	r1, [r0, #0]
 8005c1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c1e:	6001      	str	r1, [r0, #0]
 8005c20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c22:	bf00      	nop
 8005c24:	e000ed88 	.word	0xe000ed88

08005c28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c2e:	f3ef 8305 	mrs	r3, IPSR
 8005c32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b0f      	cmp	r3, #15
 8005c38:	d914      	bls.n	8005c64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c3a:	4a17      	ldr	r2, [pc, #92]	; (8005c98 <vPortValidateInterruptPriority+0x70>)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c44:	4b15      	ldr	r3, [pc, #84]	; (8005c9c <vPortValidateInterruptPriority+0x74>)
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	7afa      	ldrb	r2, [r7, #11]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d20a      	bcs.n	8005c64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	607b      	str	r3, [r7, #4]
}
 8005c60:	bf00      	nop
 8005c62:	e7fe      	b.n	8005c62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c64:	4b0e      	ldr	r3, [pc, #56]	; (8005ca0 <vPortValidateInterruptPriority+0x78>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ca4 <vPortValidateInterruptPriority+0x7c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d90a      	bls.n	8005c8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	603b      	str	r3, [r7, #0]
}
 8005c86:	bf00      	nop
 8005c88:	e7fe      	b.n	8005c88 <vPortValidateInterruptPriority+0x60>
	}
 8005c8a:	bf00      	nop
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	e000e3f0 	.word	0xe000e3f0
 8005c9c:	200003ac 	.word	0x200003ac
 8005ca0:	e000ed0c 	.word	0xe000ed0c
 8005ca4:	200003b0 	.word	0x200003b0

08005ca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08a      	sub	sp, #40	; 0x28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005cb4:	f7fe ffec 	bl	8004c90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005cb8:	4b5b      	ldr	r3, [pc, #364]	; (8005e28 <pvPortMalloc+0x180>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005cc0:	f000 f920 	bl	8005f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005cc4:	4b59      	ldr	r3, [pc, #356]	; (8005e2c <pvPortMalloc+0x184>)
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f040 8093 	bne.w	8005df8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01d      	beq.n	8005d14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005cd8:	2208      	movs	r2, #8
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4413      	add	r3, r2
 8005cde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d014      	beq.n	8005d14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f023 0307 	bic.w	r3, r3, #7
 8005cf0:	3308      	adds	r3, #8
 8005cf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00a      	beq.n	8005d14 <pvPortMalloc+0x6c>
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	617b      	str	r3, [r7, #20]
}
 8005d10:	bf00      	nop
 8005d12:	e7fe      	b.n	8005d12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d06e      	beq.n	8005df8 <pvPortMalloc+0x150>
 8005d1a:	4b45      	ldr	r3, [pc, #276]	; (8005e30 <pvPortMalloc+0x188>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d869      	bhi.n	8005df8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d24:	4b43      	ldr	r3, [pc, #268]	; (8005e34 <pvPortMalloc+0x18c>)
 8005d26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d28:	4b42      	ldr	r3, [pc, #264]	; (8005e34 <pvPortMalloc+0x18c>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d2e:	e004      	b.n	8005d3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d903      	bls.n	8005d4c <pvPortMalloc+0xa4>
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1f1      	bne.n	8005d30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d4c:	4b36      	ldr	r3, [pc, #216]	; (8005e28 <pvPortMalloc+0x180>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d050      	beq.n	8005df8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2208      	movs	r2, #8
 8005d5c:	4413      	add	r3, r2
 8005d5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	1ad2      	subs	r2, r2, r3
 8005d70:	2308      	movs	r3, #8
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d91f      	bls.n	8005db8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <pvPortMalloc+0xf8>
	__asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	613b      	str	r3, [r7, #16]
}
 8005d9c:	bf00      	nop
 8005d9e:	e7fe      	b.n	8005d9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	1ad2      	subs	r2, r2, r3
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005db2:	69b8      	ldr	r0, [r7, #24]
 8005db4:	f000 f908 	bl	8005fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005db8:	4b1d      	ldr	r3, [pc, #116]	; (8005e30 <pvPortMalloc+0x188>)
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	4a1b      	ldr	r2, [pc, #108]	; (8005e30 <pvPortMalloc+0x188>)
 8005dc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005dc6:	4b1a      	ldr	r3, [pc, #104]	; (8005e30 <pvPortMalloc+0x188>)
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	4b1b      	ldr	r3, [pc, #108]	; (8005e38 <pvPortMalloc+0x190>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d203      	bcs.n	8005dda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005dd2:	4b17      	ldr	r3, [pc, #92]	; (8005e30 <pvPortMalloc+0x188>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a18      	ldr	r2, [pc, #96]	; (8005e38 <pvPortMalloc+0x190>)
 8005dd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	4b13      	ldr	r3, [pc, #76]	; (8005e2c <pvPortMalloc+0x184>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	431a      	orrs	r2, r3
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	2200      	movs	r2, #0
 8005dec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005dee:	4b13      	ldr	r3, [pc, #76]	; (8005e3c <pvPortMalloc+0x194>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3301      	adds	r3, #1
 8005df4:	4a11      	ldr	r2, [pc, #68]	; (8005e3c <pvPortMalloc+0x194>)
 8005df6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005df8:	f7fe ff58 	bl	8004cac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	f003 0307 	and.w	r3, r3, #7
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <pvPortMalloc+0x174>
	__asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	60fb      	str	r3, [r7, #12]
}
 8005e18:	bf00      	nop
 8005e1a:	e7fe      	b.n	8005e1a <pvPortMalloc+0x172>
	return pvReturn;
 8005e1c:	69fb      	ldr	r3, [r7, #28]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3728      	adds	r7, #40	; 0x28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20003fbc 	.word	0x20003fbc
 8005e2c:	20003fd0 	.word	0x20003fd0
 8005e30:	20003fc0 	.word	0x20003fc0
 8005e34:	20003fb4 	.word	0x20003fb4
 8005e38:	20003fc4 	.word	0x20003fc4
 8005e3c:	20003fc8 	.word	0x20003fc8

08005e40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d04d      	beq.n	8005eee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e52:	2308      	movs	r3, #8
 8005e54:	425b      	negs	r3, r3
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	4413      	add	r3, r2
 8005e5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	4b24      	ldr	r3, [pc, #144]	; (8005ef8 <vPortFree+0xb8>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10a      	bne.n	8005e84 <vPortFree+0x44>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	60fb      	str	r3, [r7, #12]
}
 8005e80:	bf00      	nop
 8005e82:	e7fe      	b.n	8005e82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <vPortFree+0x62>
	__asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	60bb      	str	r3, [r7, #8]
}
 8005e9e:	bf00      	nop
 8005ea0:	e7fe      	b.n	8005ea0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	4b14      	ldr	r3, [pc, #80]	; (8005ef8 <vPortFree+0xb8>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01e      	beq.n	8005eee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d11a      	bne.n	8005eee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	4b0e      	ldr	r3, [pc, #56]	; (8005ef8 <vPortFree+0xb8>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	43db      	mvns	r3, r3
 8005ec2:	401a      	ands	r2, r3
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ec8:	f7fe fee2 	bl	8004c90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <vPortFree+0xbc>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	4a09      	ldr	r2, [pc, #36]	; (8005efc <vPortFree+0xbc>)
 8005ed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005eda:	6938      	ldr	r0, [r7, #16]
 8005edc:	f000 f874 	bl	8005fc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ee0:	4b07      	ldr	r3, [pc, #28]	; (8005f00 <vPortFree+0xc0>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	4a06      	ldr	r2, [pc, #24]	; (8005f00 <vPortFree+0xc0>)
 8005ee8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005eea:	f7fe fedf 	bl	8004cac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005eee:	bf00      	nop
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20003fd0 	.word	0x20003fd0
 8005efc:	20003fc0 	.word	0x20003fc0
 8005f00:	20003fcc 	.word	0x20003fcc

08005f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f10:	4b27      	ldr	r3, [pc, #156]	; (8005fb0 <prvHeapInit+0xac>)
 8005f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00c      	beq.n	8005f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3307      	adds	r3, #7
 8005f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 0307 	bic.w	r3, r3, #7
 8005f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	4a1f      	ldr	r2, [pc, #124]	; (8005fb0 <prvHeapInit+0xac>)
 8005f34:	4413      	add	r3, r2
 8005f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f3c:	4a1d      	ldr	r2, [pc, #116]	; (8005fb4 <prvHeapInit+0xb0>)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f42:	4b1c      	ldr	r3, [pc, #112]	; (8005fb4 <prvHeapInit+0xb0>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f50:	2208      	movs	r2, #8
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	1a9b      	subs	r3, r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0307 	bic.w	r3, r3, #7
 8005f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4a15      	ldr	r2, [pc, #84]	; (8005fb8 <prvHeapInit+0xb4>)
 8005f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f66:	4b14      	ldr	r3, [pc, #80]	; (8005fb8 <prvHeapInit+0xb4>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f6e:	4b12      	ldr	r3, [pc, #72]	; (8005fb8 <prvHeapInit+0xb4>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	1ad2      	subs	r2, r2, r3
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f84:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <prvHeapInit+0xb4>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	4a0a      	ldr	r2, [pc, #40]	; (8005fbc <prvHeapInit+0xb8>)
 8005f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	4a09      	ldr	r2, [pc, #36]	; (8005fc0 <prvHeapInit+0xbc>)
 8005f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f9c:	4b09      	ldr	r3, [pc, #36]	; (8005fc4 <prvHeapInit+0xc0>)
 8005f9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005fa2:	601a      	str	r2, [r3, #0]
}
 8005fa4:	bf00      	nop
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	200003b4 	.word	0x200003b4
 8005fb4:	20003fb4 	.word	0x20003fb4
 8005fb8:	20003fbc 	.word	0x20003fbc
 8005fbc:	20003fc4 	.word	0x20003fc4
 8005fc0:	20003fc0 	.word	0x20003fc0
 8005fc4:	20003fd0 	.word	0x20003fd0

08005fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fd0:	4b28      	ldr	r3, [pc, #160]	; (8006074 <prvInsertBlockIntoFreeList+0xac>)
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	e002      	b.n	8005fdc <prvInsertBlockIntoFreeList+0x14>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d8f7      	bhi.n	8005fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d108      	bne.n	800600a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	441a      	add	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	441a      	add	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d118      	bne.n	8006050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	4b15      	ldr	r3, [pc, #84]	; (8006078 <prvInsertBlockIntoFreeList+0xb0>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d00d      	beq.n	8006046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	441a      	add	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	e008      	b.n	8006058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006046:	4b0c      	ldr	r3, [pc, #48]	; (8006078 <prvInsertBlockIntoFreeList+0xb0>)
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	e003      	b.n	8006058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	429a      	cmp	r2, r3
 800605e:	d002      	beq.n	8006066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006066:	bf00      	nop
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20003fb4 	.word	0x20003fb4
 8006078:	20003fbc 	.word	0x20003fbc

0800607c <__libc_init_array>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	4d0d      	ldr	r5, [pc, #52]	; (80060b4 <__libc_init_array+0x38>)
 8006080:	4c0d      	ldr	r4, [pc, #52]	; (80060b8 <__libc_init_array+0x3c>)
 8006082:	1b64      	subs	r4, r4, r5
 8006084:	10a4      	asrs	r4, r4, #2
 8006086:	2600      	movs	r6, #0
 8006088:	42a6      	cmp	r6, r4
 800608a:	d109      	bne.n	80060a0 <__libc_init_array+0x24>
 800608c:	4d0b      	ldr	r5, [pc, #44]	; (80060bc <__libc_init_array+0x40>)
 800608e:	4c0c      	ldr	r4, [pc, #48]	; (80060c0 <__libc_init_array+0x44>)
 8006090:	f000 f82e 	bl	80060f0 <_init>
 8006094:	1b64      	subs	r4, r4, r5
 8006096:	10a4      	asrs	r4, r4, #2
 8006098:	2600      	movs	r6, #0
 800609a:	42a6      	cmp	r6, r4
 800609c:	d105      	bne.n	80060aa <__libc_init_array+0x2e>
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a4:	4798      	blx	r3
 80060a6:	3601      	adds	r6, #1
 80060a8:	e7ee      	b.n	8006088 <__libc_init_array+0xc>
 80060aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ae:	4798      	blx	r3
 80060b0:	3601      	adds	r6, #1
 80060b2:	e7f2      	b.n	800609a <__libc_init_array+0x1e>
 80060b4:	0800619c 	.word	0x0800619c
 80060b8:	0800619c 	.word	0x0800619c
 80060bc:	0800619c 	.word	0x0800619c
 80060c0:	080061a0 	.word	0x080061a0

080060c4 <memcpy>:
 80060c4:	440a      	add	r2, r1
 80060c6:	4291      	cmp	r1, r2
 80060c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80060cc:	d100      	bne.n	80060d0 <memcpy+0xc>
 80060ce:	4770      	bx	lr
 80060d0:	b510      	push	{r4, lr}
 80060d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060da:	4291      	cmp	r1, r2
 80060dc:	d1f9      	bne.n	80060d2 <memcpy+0xe>
 80060de:	bd10      	pop	{r4, pc}

080060e0 <memset>:
 80060e0:	4402      	add	r2, r0
 80060e2:	4603      	mov	r3, r0
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d100      	bne.n	80060ea <memset+0xa>
 80060e8:	4770      	bx	lr
 80060ea:	f803 1b01 	strb.w	r1, [r3], #1
 80060ee:	e7f9      	b.n	80060e4 <memset+0x4>

080060f0 <_init>:
 80060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f2:	bf00      	nop
 80060f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f6:	bc08      	pop	{r3}
 80060f8:	469e      	mov	lr, r3
 80060fa:	4770      	bx	lr

080060fc <_fini>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	bf00      	nop
 8006100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006102:	bc08      	pop	{r3}
 8006104:	469e      	mov	lr, r3
 8006106:	4770      	bx	lr
