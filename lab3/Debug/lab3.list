
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005df8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005fa8  08005fa8  00015fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006050  08006050  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006050  08006050  00016050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006058  08006058  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006058  08006058  00016058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800605c  0800605c  0001605c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044b4  20000010  08006070  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044c4  08006070  000244c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bfa0  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ed  00000000  00000000  0003bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  0003f5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001440  00000000  00000000  00040b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f44  00000000  00000000  00041f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017f13  00000000  00000000  00067ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecc87  00000000  00000000  0007fddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016ca66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b4c  00000000  00000000  0016cabc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005f90 	.word	0x08005f90

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08005f90 	.word	0x08005f90

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96e 	b.w	80004e4 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468c      	mov	ip, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	f040 8083 	bne.w	8000336 <__udivmoddi4+0x116>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d947      	bls.n	80002c6 <__udivmoddi4+0xa6>
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	b142      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023c:	f1c2 0020 	rsb	r0, r2, #32
 8000240:	fa24 f000 	lsr.w	r0, r4, r0
 8000244:	4091      	lsls	r1, r2
 8000246:	4097      	lsls	r7, r2
 8000248:	ea40 0c01 	orr.w	ip, r0, r1
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbbc f6f8 	udiv	r6, ip, r8
 8000258:	fa1f fe87 	uxth.w	lr, r7
 800025c:	fb08 c116 	mls	r1, r8, r6, ip
 8000260:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000264:	fb06 f10e 	mul.w	r1, r6, lr
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 8119 	bcs.w	80004a8 <__udivmoddi4+0x288>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8116 	bls.w	80004a8 <__udivmoddi4+0x288>
 800027c:	3e02      	subs	r6, #2
 800027e:	443b      	add	r3, r7
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fe0e 	mul.w	lr, r0, lr
 8000294:	45a6      	cmp	lr, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	193c      	adds	r4, r7, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8105 	bcs.w	80004ac <__udivmoddi4+0x28c>
 80002a2:	45a6      	cmp	lr, r4
 80002a4:	f240 8102 	bls.w	80004ac <__udivmoddi4+0x28c>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b0:	eba4 040e 	sub.w	r4, r4, lr
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	b902      	cbnz	r2, 80002ca <__udivmoddi4+0xaa>
 80002c8:	deff      	udf	#255	; 0xff
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	2a00      	cmp	r2, #0
 80002d0:	d150      	bne.n	8000374 <__udivmoddi4+0x154>
 80002d2:	1bcb      	subs	r3, r1, r7
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f f887 	uxth.w	r8, r7
 80002dc:	2601      	movs	r6, #1
 80002de:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e2:	0c21      	lsrs	r1, r4, #16
 80002e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002ec:	fb08 f30c 	mul.w	r3, r8, ip
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0xe4>
 80002f4:	1879      	adds	r1, r7, r1
 80002f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0xe2>
 80002fc:	428b      	cmp	r3, r1
 80002fe:	f200 80e9 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 8000302:	4684      	mov	ip, r0
 8000304:	1ac9      	subs	r1, r1, r3
 8000306:	b2a3      	uxth	r3, r4
 8000308:	fbb1 f0fe 	udiv	r0, r1, lr
 800030c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000310:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000314:	fb08 f800 	mul.w	r8, r8, r0
 8000318:	45a0      	cmp	r8, r4
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x10c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x10a>
 8000324:	45a0      	cmp	r8, r4
 8000326:	f200 80d9 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 800032a:	4618      	mov	r0, r3
 800032c:	eba4 0408 	sub.w	r4, r4, r8
 8000330:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000334:	e7bf      	b.n	80002b6 <__udivmoddi4+0x96>
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x12e>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80b1 	beq.w	80004a2 <__udivmoddi4+0x282>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x1cc>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0x140>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80b8 	bhi.w	80004d0 <__udivmoddi4+0x2b0>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0103 	sbc.w	r1, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	468c      	mov	ip, r1
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0a8      	beq.n	80002c0 <__udivmoddi4+0xa0>
 800036e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000374:	f1c2 0320 	rsb	r3, r2, #32
 8000378:	fa20 f603 	lsr.w	r6, r0, r3
 800037c:	4097      	lsls	r7, r2
 800037e:	fa01 f002 	lsl.w	r0, r1, r2
 8000382:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000386:	40d9      	lsrs	r1, r3
 8000388:	4330      	orrs	r0, r6
 800038a:	0c03      	lsrs	r3, r0, #16
 800038c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000390:	fa1f f887 	uxth.w	r8, r7
 8000394:	fb0e 1116 	mls	r1, lr, r6, r1
 8000398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039c:	fb06 f108 	mul.w	r1, r6, r8
 80003a0:	4299      	cmp	r1, r3
 80003a2:	fa04 f402 	lsl.w	r4, r4, r2
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x19c>
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ae:	f080 808d 	bcs.w	80004cc <__udivmoddi4+0x2ac>
 80003b2:	4299      	cmp	r1, r3
 80003b4:	f240 808a 	bls.w	80004cc <__udivmoddi4+0x2ac>
 80003b8:	3e02      	subs	r6, #2
 80003ba:	443b      	add	r3, r7
 80003bc:	1a5b      	subs	r3, r3, r1
 80003be:	b281      	uxth	r1, r0
 80003c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb00 f308 	mul.w	r3, r0, r8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1c4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003da:	d273      	bcs.n	80004c4 <__udivmoddi4+0x2a4>
 80003dc:	428b      	cmp	r3, r1
 80003de:	d971      	bls.n	80004c4 <__udivmoddi4+0x2a4>
 80003e0:	3802      	subs	r0, #2
 80003e2:	4439      	add	r1, r7
 80003e4:	1acb      	subs	r3, r1, r3
 80003e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ea:	e778      	b.n	80002de <__udivmoddi4+0xbe>
 80003ec:	f1c6 0c20 	rsb	ip, r6, #32
 80003f0:	fa03 f406 	lsl.w	r4, r3, r6
 80003f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f8:	431c      	orrs	r4, r3
 80003fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000406:	fa21 f10c 	lsr.w	r1, r1, ip
 800040a:	431f      	orrs	r7, r3
 800040c:	0c3b      	lsrs	r3, r7, #16
 800040e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000412:	fa1f f884 	uxth.w	r8, r4
 8000416:	fb0e 1119 	mls	r1, lr, r9, r1
 800041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041e:	fb09 fa08 	mul.w	sl, r9, r8
 8000422:	458a      	cmp	sl, r1
 8000424:	fa02 f206 	lsl.w	r2, r2, r6
 8000428:	fa00 f306 	lsl.w	r3, r0, r6
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x220>
 800042e:	1861      	adds	r1, r4, r1
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	d248      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 8000436:	458a      	cmp	sl, r1
 8000438:	d946      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	4421      	add	r1, r4
 8000440:	eba1 010a 	sub.w	r1, r1, sl
 8000444:	b2bf      	uxth	r7, r7
 8000446:	fbb1 f0fe 	udiv	r0, r1, lr
 800044a:	fb0e 1110 	mls	r1, lr, r0, r1
 800044e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45b8      	cmp	r8, r7
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x24a>
 800045a:	19e7      	adds	r7, r4, r7
 800045c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000460:	d22e      	bcs.n	80004c0 <__udivmoddi4+0x2a0>
 8000462:	45b8      	cmp	r8, r7
 8000464:	d92c      	bls.n	80004c0 <__udivmoddi4+0x2a0>
 8000466:	3802      	subs	r0, #2
 8000468:	4427      	add	r7, r4
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba7 0708 	sub.w	r7, r7, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454f      	cmp	r7, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	4649      	mov	r1, r9
 800047c:	d31a      	bcc.n	80004b4 <__udivmoddi4+0x294>
 800047e:	d017      	beq.n	80004b0 <__udivmoddi4+0x290>
 8000480:	b15d      	cbz	r5, 800049a <__udivmoddi4+0x27a>
 8000482:	ebb3 020e 	subs.w	r2, r3, lr
 8000486:	eb67 0701 	sbc.w	r7, r7, r1
 800048a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048e:	40f2      	lsrs	r2, r6
 8000490:	ea4c 0202 	orr.w	r2, ip, r2
 8000494:	40f7      	lsrs	r7, r6
 8000496:	e9c5 2700 	strd	r2, r7, [r5]
 800049a:	2600      	movs	r6, #0
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e70b      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e9      	b.n	8000280 <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fd      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b0:	4543      	cmp	r3, r8
 80004b2:	d2e5      	bcs.n	8000480 <__udivmoddi4+0x260>
 80004b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b8:	eb69 0104 	sbc.w	r1, r9, r4
 80004bc:	3801      	subs	r0, #1
 80004be:	e7df      	b.n	8000480 <__udivmoddi4+0x260>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e7d2      	b.n	800046a <__udivmoddi4+0x24a>
 80004c4:	4660      	mov	r0, ip
 80004c6:	e78d      	b.n	80003e4 <__udivmoddi4+0x1c4>
 80004c8:	4681      	mov	r9, r0
 80004ca:	e7b9      	b.n	8000440 <__udivmoddi4+0x220>
 80004cc:	4666      	mov	r6, ip
 80004ce:	e775      	b.n	80003bc <__udivmoddi4+0x19c>
 80004d0:	4630      	mov	r0, r6
 80004d2:	e74a      	b.n	800036a <__udivmoddi4+0x14a>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	4439      	add	r1, r7
 80004da:	e713      	b.n	8000304 <__udivmoddi4+0xe4>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	e724      	b.n	800032c <__udivmoddi4+0x10c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	4a07      	ldr	r2, [pc, #28]	; (8000514 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	4a06      	ldr	r2, [pc, #24]	; (8000518 <vApplicationGetIdleTaskMemory+0x30>)
 80004fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2280      	movs	r2, #128	; 0x80
 8000504:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	2000002c 	.word	0x2000002c
 8000518:	20000080 	.word	0x20000080

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b5b0      	push	{r4, r5, r7, lr}
 800051e:	b09a      	sub	sp, #104	; 0x68
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 fddb 	bl	80010dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f861 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 f969 	bl	8000800 <MX_GPIO_Init>
  MX_ETH_Init();
 800052e:	f000 f8c7 	bl	80006c0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000532:	f000 f90d 	bl	8000750 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000536:	f000 f935 	bl	80007a4 <MX_USB_OTG_FS_PCD_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 32, 1);
 800053a:	4b24      	ldr	r3, [pc, #144]	; (80005cc <main+0xb0>)
 800053c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000540:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000542:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000546:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800054a:	2100      	movs	r1, #0
 800054c:	4618      	mov	r0, r3
 800054e:	f003 fb3c 	bl	8003bca <osMessageCreate>
 8000552:	4603      	mov	r3, r0
 8000554:	4a1e      	ldr	r2, [pc, #120]	; (80005d0 <main+0xb4>)
 8000556:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, mainTask_f, osPriorityHigh, 0, 128);
 8000558:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <main+0xb8>)
 800055a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800055e:	461d      	mov	r5, r3
 8000560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000564:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000568:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 800056c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f003 fadd 	bl	8003b32 <osThreadCreate>
 8000578:	4603      	mov	r3, r0
 800057a:	4a17      	ldr	r2, [pc, #92]	; (80005d8 <main+0xbc>)
 800057c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <main+0xc0>)
 8000580:	f107 0420 	add.w	r4, r7, #32
 8000584:	461d      	mov	r5, r3
 8000586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f003 faca 	bl	8003b32 <osThreadCreate>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a0f      	ldr	r2, [pc, #60]	; (80005e0 <main+0xc4>)
 80005a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <main+0xc8>)
 80005a6:	1d3c      	adds	r4, r7, #4
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 fab9 	bl	8003b32 <osThreadCreate>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a09      	ldr	r2, [pc, #36]	; (80005e8 <main+0xcc>)
 80005c4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005c6:	f003 faad 	bl	8003b24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <main+0xae>
 80005cc:	08005fcc 	.word	0x08005fcc
 80005d0:	2000442c 	.word	0x2000442c
 80005d4:	08005fdc 	.word	0x08005fdc
 80005d8:	20003fd4 	.word	0x20003fd4
 80005dc:	08005ff8 	.word	0x08005ff8
 80005e0:	20004424 	.word	0x20004424
 80005e4:	08006014 	.word	0x08006014
 80005e8:	20004428 	.word	0x20004428

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f005 fcc0 	bl	8005f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <SystemClock_Config+0xcc>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <SystemClock_Config+0xd0>)
 8000636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800064c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800065c:	2304      	movs	r3, #4
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000660:	23a8      	movs	r3, #168	; 0xa8
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000668:	2307      	movs	r3, #7
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fde3 	bl	800223c <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800067c:	f000 fade 	bl	8000c3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2105      	movs	r1, #5
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 f844 	bl	800272c <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006aa:	f000 fac7 	bl	8000c3c <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <MX_ETH_Init+0x88>)
 80006c6:	4a21      	ldr	r2, [pc, #132]	; (800074c <MX_ETH_Init+0x8c>)
 80006c8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <MX_ETH_Init+0x88>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_ETH_Init+0x88>)
 80006d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006d6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_ETH_Init+0x88>)
 80006da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006de:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_ETH_Init+0x88>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_ETH_Init+0x88>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_ETH_Init+0x88>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	3301      	adds	r3, #1
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_ETH_Init+0x88>)
 80006fa:	695b      	ldr	r3, [r3, #20]
 80006fc:	3302      	adds	r3, #2
 80006fe:	22e1      	movs	r2, #225	; 0xe1
 8000700:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_ETH_Init+0x88>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	3303      	adds	r3, #3
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_ETH_Init+0x88>)
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	3304      	adds	r3, #4
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_ETH_Init+0x88>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	3305      	adds	r3, #5
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_ETH_Init+0x88>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_ETH_Init+0x88>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_ETH_Init+0x88>)
 800072e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000732:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_ETH_Init+0x88>)
 8000736:	f000 fe19 	bl	800136c <HAL_ETH_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ETH_Init+0x84>
  {
    Error_Handler();
 8000740:	f000 fa7c 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20004430 	.word	0x20004430
 800074c:	40028000 	.word	0x40028000

08000750 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USART3_UART_Init+0x4c>)
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <MX_USART3_UART_Init+0x50>)
 8000758:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_USART3_UART_Init+0x4c>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USART3_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USART3_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USART3_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USART3_UART_Init+0x4c>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USART3_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USART3_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_USART3_UART_Init+0x4c>)
 8000788:	f002 fcac 	bl	80030e4 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000792:	f000 fa53 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20003fd8 	.word	0x20003fd8
 80007a0:	40004800 	.word	0x40004800

080007a4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b2:	2204      	movs	r2, #4
 80007b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b8:	2202      	movs	r2, #2
 80007ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007dc:	2201      	movs	r2, #1
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e8:	f001 fc0b 	bl	8002002 <HAL_PCD_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007f2:	f000 fa23 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000401c 	.word	0x2000401c

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	; 0x30
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
 800081a:	4b4c      	ldr	r3, [pc, #304]	; (800094c <MX_GPIO_Init+0x14c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a4b      	ldr	r2, [pc, #300]	; (800094c <MX_GPIO_Init+0x14c>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b49      	ldr	r3, [pc, #292]	; (800094c <MX_GPIO_Init+0x14c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	4b45      	ldr	r3, [pc, #276]	; (800094c <MX_GPIO_Init+0x14c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a44      	ldr	r2, [pc, #272]	; (800094c <MX_GPIO_Init+0x14c>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b42      	ldr	r3, [pc, #264]	; (800094c <MX_GPIO_Init+0x14c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b3e      	ldr	r3, [pc, #248]	; (800094c <MX_GPIO_Init+0x14c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a3d      	ldr	r2, [pc, #244]	; (800094c <MX_GPIO_Init+0x14c>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b3b      	ldr	r3, [pc, #236]	; (800094c <MX_GPIO_Init+0x14c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b37      	ldr	r3, [pc, #220]	; (800094c <MX_GPIO_Init+0x14c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a36      	ldr	r2, [pc, #216]	; (800094c <MX_GPIO_Init+0x14c>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b34      	ldr	r3, [pc, #208]	; (800094c <MX_GPIO_Init+0x14c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b30      	ldr	r3, [pc, #192]	; (800094c <MX_GPIO_Init+0x14c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a2f      	ldr	r2, [pc, #188]	; (800094c <MX_GPIO_Init+0x14c>)
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b2d      	ldr	r3, [pc, #180]	; (800094c <MX_GPIO_Init+0x14c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0308 	and.w	r3, r3, #8
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b29      	ldr	r3, [pc, #164]	; (800094c <MX_GPIO_Init+0x14c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a28      	ldr	r2, [pc, #160]	; (800094c <MX_GPIO_Init+0x14c>)
 80008ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b26      	ldr	r3, [pc, #152]	; (800094c <MX_GPIO_Init+0x14c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f244 0181 	movw	r1, #16513	; 0x4081
 80008c4:	4822      	ldr	r0, [pc, #136]	; (8000950 <MX_GPIO_Init+0x150>)
 80008c6:	f001 fb69 	bl	8001f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2140      	movs	r1, #64	; 0x40
 80008ce:	4821      	ldr	r0, [pc, #132]	; (8000954 <MX_GPIO_Init+0x154>)
 80008d0:	f001 fb64 	bl	8001f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	481b      	ldr	r0, [pc, #108]	; (8000958 <MX_GPIO_Init+0x158>)
 80008ec:	f001 f9aa 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008f0:	f244 0381 	movw	r3, #16513	; 0x4081
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4811      	ldr	r0, [pc, #68]	; (8000950 <MX_GPIO_Init+0x150>)
 800090a:	f001 f99b 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800090e:	2340      	movs	r3, #64	; 0x40
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	480b      	ldr	r0, [pc, #44]	; (8000954 <MX_GPIO_Init+0x154>)
 8000926:	f001 f98d 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800092a:	2380      	movs	r3, #128	; 0x80
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_GPIO_Init+0x154>)
 800093e:	f001 f981 	bl	8001c44 <HAL_GPIO_Init>

}
 8000942:	bf00      	nop
 8000944:	3730      	adds	r7, #48	; 0x30
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	40020400 	.word	0x40020400
 8000954:	40021800 	.word	0x40021800
 8000958:	40020800 	.word	0x40020800

0800095c <mainTask_f>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_mainTask_f */
void mainTask_f(void const * argument)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	int count_g = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
	int count_r = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	61bb      	str	r3, [r7, #24]
  for(;;)
  {

	  char buf = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	75fb      	strb	r3, [r7, #23]
	  osEvent event = osMessageGet(myQueue01Handle,osWaitForever);
 8000970:	4b94      	ldr	r3, [pc, #592]	; (8000bc4 <mainTask_f+0x268>)
 8000972:	6819      	ldr	r1, [r3, #0]
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	f04f 32ff 	mov.w	r2, #4294967295
 800097c:	4618      	mov	r0, r3
 800097e:	f003 f98d 	bl	8003c9c <osMessageGet>
	  if(event.status == osEventMessage){
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	2b10      	cmp	r3, #16
 8000986:	d1f1      	bne.n	800096c <mainTask_f+0x10>
		  buf = (char) event.value.v;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	75fb      	strb	r3, [r7, #23]
		  if(buf == 'g'){
 800098c:	7dfb      	ldrb	r3, [r7, #23]
 800098e:	2b67      	cmp	r3, #103	; 0x67
 8000990:	d167      	bne.n	8000a62 <mainTask_f+0x106>
			  if(count_g %4 ==0 || count_g %4 ==1){
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	f003 0303 	and.w	r3, r3, #3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d009      	beq.n	80009b0 <mainTask_f+0x54>
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	425a      	negs	r2, r3
 80009a0:	f003 0303 	and.w	r3, r3, #3
 80009a4:	f002 0203 	and.w	r2, r2, #3
 80009a8:	bf58      	it	pl
 80009aa:	4253      	negpl	r3, r2
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d110      	bne.n	80009d2 <mainTask_f+0x76>
				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 80009b0:	2101      	movs	r1, #1
 80009b2:	4885      	ldr	r0, [pc, #532]	; (8000bc8 <mainTask_f+0x26c>)
 80009b4:	f001 fb0b 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 80009b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009bc:	f000 fbd0 	bl	8001160 <HAL_Delay>
				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 80009c0:	2101      	movs	r1, #1
 80009c2:	4881      	ldr	r0, [pc, #516]	; (8000bc8 <mainTask_f+0x26c>)
 80009c4:	f001 fb03 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 80009c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009cc:	f000 fbc8 	bl	8001160 <HAL_Delay>
 80009d0:	e043      	b.n	8000a5a <mainTask_f+0xfe>
			  }
			  else if(count_g %4 == 2 || count_g %4 == 3){
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	425a      	negs	r2, r3
 80009d6:	f003 0303 	and.w	r3, r3, #3
 80009da:	f002 0203 	and.w	r2, r2, #3
 80009de:	bf58      	it	pl
 80009e0:	4253      	negpl	r3, r2
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d009      	beq.n	80009fa <mainTask_f+0x9e>
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	425a      	negs	r2, r3
 80009ea:	f003 0303 	and.w	r3, r3, #3
 80009ee:	f002 0203 	and.w	r2, r2, #3
 80009f2:	bf58      	it	pl
 80009f4:	4253      	negpl	r3, r2
 80009f6:	2b03      	cmp	r3, #3
 80009f8:	d12f      	bne.n	8000a5a <mainTask_f+0xfe>
				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 80009fa:	2101      	movs	r1, #1
 80009fc:	4872      	ldr	r0, [pc, #456]	; (8000bc8 <mainTask_f+0x26c>)
 80009fe:	f001 fae6 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000a02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a06:	f000 fbab 	bl	8001160 <HAL_Delay>
				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	486e      	ldr	r0, [pc, #440]	; (8000bc8 <mainTask_f+0x26c>)
 8000a0e:	f001 fade 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000a12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a16:	f000 fba3 	bl	8001160 <HAL_Delay>

				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	486a      	ldr	r0, [pc, #424]	; (8000bc8 <mainTask_f+0x26c>)
 8000a1e:	f001 fad6 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000a22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a26:	f000 fb9b 	bl	8001160 <HAL_Delay>
				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4866      	ldr	r0, [pc, #408]	; (8000bc8 <mainTask_f+0x26c>)
 8000a2e:	f001 face 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000a32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a36:	f000 fb93 	bl	8001160 <HAL_Delay>

				 HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	4862      	ldr	r0, [pc, #392]	; (8000bc8 <mainTask_f+0x26c>)
 8000a3e:	f001 fac6 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000a42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a46:	f000 fb8b 	bl	8001160 <HAL_Delay>
				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	485e      	ldr	r0, [pc, #376]	; (8000bc8 <mainTask_f+0x26c>)
 8000a4e:	f001 fabe 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000a52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a56:	f000 fb83 	bl	8001160 <HAL_Delay>
			  }
			  count_g++;
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	e784      	b.n	800096c <mainTask_f+0x10>
		  }else if(buf == 'r'){
 8000a62:	7dfb      	ldrb	r3, [r7, #23]
 8000a64:	2b72      	cmp	r3, #114	; 0x72
 8000a66:	d181      	bne.n	800096c <mainTask_f+0x10>
			  if(count_r %3 ==0){
 8000a68:	69b9      	ldr	r1, [r7, #24]
 8000a6a:	4b58      	ldr	r3, [pc, #352]	; (8000bcc <mainTask_f+0x270>)
 8000a6c:	fb83 3201 	smull	r3, r2, r3, r1
 8000a70:	17cb      	asrs	r3, r1, #31
 8000a72:	1ad2      	subs	r2, r2, r3
 8000a74:	4613      	mov	r3, r2
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	4413      	add	r3, r2
 8000a7a:	1aca      	subs	r2, r1, r3
 8000a7c:	2a00      	cmp	r2, #0
 8000a7e:	d136      	bne.n	8000aee <mainTask_f+0x192>
				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000a80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a84:	4850      	ldr	r0, [pc, #320]	; (8000bc8 <mainTask_f+0x26c>)
 8000a86:	f001 faa2 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000a8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a8e:	f000 fb67 	bl	8001160 <HAL_Delay>
				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000a92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a96:	484c      	ldr	r0, [pc, #304]	; (8000bc8 <mainTask_f+0x26c>)
 8000a98:	f001 fa99 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000a9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aa0:	f000 fb5e 	bl	8001160 <HAL_Delay>

				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000aa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa8:	4847      	ldr	r0, [pc, #284]	; (8000bc8 <mainTask_f+0x26c>)
 8000aaa:	f001 fa90 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000aae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab2:	f000 fb55 	bl	8001160 <HAL_Delay>
				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aba:	4843      	ldr	r0, [pc, #268]	; (8000bc8 <mainTask_f+0x26c>)
 8000abc:	f001 fa87 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000ac0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ac4:	f000 fb4c 	bl	8001160 <HAL_Delay>

				HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000ac8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000acc:	483e      	ldr	r0, [pc, #248]	; (8000bc8 <mainTask_f+0x26c>)
 8000ace:	f001 fa7e 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000ad2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ad6:	f000 fb43 	bl	8001160 <HAL_Delay>
				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000ada:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ade:	483a      	ldr	r0, [pc, #232]	; (8000bc8 <mainTask_f+0x26c>)
 8000ae0:	f001 fa75 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000ae4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ae8:	f000 fb3a 	bl	8001160 <HAL_Delay>
 8000aec:	e066      	b.n	8000bbc <mainTask_f+0x260>
			  }else if(count_r %3 == 1){
 8000aee:	69b9      	ldr	r1, [r7, #24]
 8000af0:	4b36      	ldr	r3, [pc, #216]	; (8000bcc <mainTask_f+0x270>)
 8000af2:	fb83 3201 	smull	r3, r2, r3, r1
 8000af6:	17cb      	asrs	r3, r1, #31
 8000af8:	1ad2      	subs	r2, r2, r3
 8000afa:	4613      	mov	r3, r2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	4413      	add	r3, r2
 8000b00:	1aca      	subs	r2, r1, r3
 8000b02:	2a01      	cmp	r2, #1
 8000b04:	d124      	bne.n	8000b50 <mainTask_f+0x1f4>
				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000b06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b0a:	482f      	ldr	r0, [pc, #188]	; (8000bc8 <mainTask_f+0x26c>)
 8000b0c:	f001 fa5f 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000b10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b14:	f000 fb24 	bl	8001160 <HAL_Delay>
				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000b18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b1c:	482a      	ldr	r0, [pc, #168]	; (8000bc8 <mainTask_f+0x26c>)
 8000b1e:	f001 fa56 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000b22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b26:	f000 fb1b 	bl	8001160 <HAL_Delay>

				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000b2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b2e:	4826      	ldr	r0, [pc, #152]	; (8000bc8 <mainTask_f+0x26c>)
 8000b30:	f001 fa4d 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000b34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b38:	f000 fb12 	bl	8001160 <HAL_Delay>
				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000b3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b40:	4821      	ldr	r0, [pc, #132]	; (8000bc8 <mainTask_f+0x26c>)
 8000b42:	f001 fa44 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000b46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b4a:	f000 fb09 	bl	8001160 <HAL_Delay>
 8000b4e:	e035      	b.n	8000bbc <mainTask_f+0x260>
			  }else{
				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000b50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b54:	481c      	ldr	r0, [pc, #112]	; (8000bc8 <mainTask_f+0x26c>)
 8000b56:	f001 fa3a 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000b5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b5e:	f000 faff 	bl	8001160 <HAL_Delay>
				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000b62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b66:	4818      	ldr	r0, [pc, #96]	; (8000bc8 <mainTask_f+0x26c>)
 8000b68:	f001 fa31 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000b6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b70:	f000 faf6 	bl	8001160 <HAL_Delay>

				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000b74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b78:	4813      	ldr	r0, [pc, #76]	; (8000bc8 <mainTask_f+0x26c>)
 8000b7a:	f001 fa28 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000b7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b82:	f000 faed 	bl	8001160 <HAL_Delay>
				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000b86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b8a:	480f      	ldr	r0, [pc, #60]	; (8000bc8 <mainTask_f+0x26c>)
 8000b8c:	f001 fa1f 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000b90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b94:	f000 fae4 	bl	8001160 <HAL_Delay>

				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000b98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b9c:	480a      	ldr	r0, [pc, #40]	; (8000bc8 <mainTask_f+0x26c>)
 8000b9e:	f001 fa16 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000ba2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ba6:	f000 fadb 	bl	8001160 <HAL_Delay>
				  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000baa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <mainTask_f+0x26c>)
 8000bb0:	f001 fa0d 	bl	8001fce <HAL_GPIO_TogglePin>
				  HAL_Delay(500);
 8000bb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bb8:	f000 fad2 	bl	8001160 <HAL_Delay>
			  }
			  count_r++;
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	61bb      	str	r3, [r7, #24]
  {
 8000bc2:	e6d3      	b.n	800096c <mainTask_f+0x10>
 8000bc4:	2000442c 	.word	0x2000442c
 8000bc8:	40020400 	.word	0x40020400
 8000bcc:	55555556 	.word	0x55555556

08000bd0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */

  for(;;)
  {
	  char msg = 'g';
 8000bd8:	2367      	movs	r3, #103	; 0x67
 8000bda:	73fb      	strb	r3, [r7, #15]
	  osMessagePut(myQueue01Handle,msg,osWaitForever);
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <StartTask02+0x20>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	7bf9      	ldrb	r1, [r7, #15]
 8000be2:	f04f 32ff 	mov.w	r2, #4294967295
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 f818 	bl	8003c1c <osMessagePut>
  {
 8000bec:	e7f4      	b.n	8000bd8 <StartTask02+0x8>
 8000bee:	bf00      	nop
 8000bf0:	2000442c 	.word	0x2000442c

08000bf4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  char msg = 'r';
 8000bfc:	2372      	movs	r3, #114	; 0x72
 8000bfe:	73fb      	strb	r3, [r7, #15]
	  osMessagePut(myQueue01Handle,msg,osWaitForever);
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <StartTask03+0x20>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	7bf9      	ldrb	r1, [r7, #15]
 8000c06:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f003 f806 	bl	8003c1c <osMessagePut>
  {
 8000c10:	e7f4      	b.n	8000bfc <StartTask03+0x8>
 8000c12:	bf00      	nop
 8000c14:	2000442c 	.word	0x2000442c

08000c18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d101      	bne.n	8000c2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c2a:	f000 fa79 	bl	8001120 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40010000 	.word	0x40010000

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>
	...

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_MspInit+0x54>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	4a11      	ldr	r2, [pc, #68]	; (8000c9c <HAL_MspInit+0x54>)
 8000c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <HAL_MspInit+0x54>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <HAL_MspInit+0x54>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <HAL_MspInit+0x54>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_MspInit+0x54>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	210f      	movs	r1, #15
 8000c8a:	f06f 0001 	mvn.w	r0, #1
 8000c8e:	f000 fb43 	bl	8001318 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08e      	sub	sp, #56	; 0x38
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a55      	ldr	r2, [pc, #340]	; (8000e14 <HAL_ETH_MspInit+0x174>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	f040 80a4 	bne.w	8000e0c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
 8000cc8:	4b53      	ldr	r3, [pc, #332]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ccc:	4a52      	ldr	r2, [pc, #328]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000cce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd4:	4b50      	ldr	r3, [pc, #320]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cdc:	623b      	str	r3, [r7, #32]
 8000cde:	6a3b      	ldr	r3, [r7, #32]
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
 8000ce4:	4b4c      	ldr	r3, [pc, #304]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	4a4b      	ldr	r2, [pc, #300]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000cea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cee:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf0:	4b49      	ldr	r3, [pc, #292]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cf8:	61fb      	str	r3, [r7, #28]
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61bb      	str	r3, [r7, #24]
 8000d00:	4b45      	ldr	r3, [pc, #276]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	4a44      	ldr	r2, [pc, #272]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0c:	4b42      	ldr	r3, [pc, #264]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d14:	61bb      	str	r3, [r7, #24]
 8000d16:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	4b3e      	ldr	r3, [pc, #248]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	4a3d      	ldr	r2, [pc, #244]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
 8000d28:	4b3b      	ldr	r3, [pc, #236]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	4b37      	ldr	r3, [pc, #220]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	4a36      	ldr	r2, [pc, #216]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	6313      	str	r3, [r2, #48]	; 0x30
 8000d44:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	4b30      	ldr	r3, [pc, #192]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	4a2f      	ldr	r2, [pc, #188]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d5a:	f043 0302 	orr.w	r3, r3, #2
 8000d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d60:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	4b29      	ldr	r3, [pc, #164]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	4a28      	ldr	r2, [pc, #160]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7c:	4b26      	ldr	r3, [pc, #152]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d88:	2332      	movs	r3, #50	; 0x32
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d98:	230b      	movs	r3, #11
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	481e      	ldr	r0, [pc, #120]	; (8000e1c <HAL_ETH_MspInit+0x17c>)
 8000da4:	f000 ff4e 	bl	8001c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000da8:	2386      	movs	r3, #134	; 0x86
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db8:	230b      	movs	r3, #11
 8000dba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4817      	ldr	r0, [pc, #92]	; (8000e20 <HAL_ETH_MspInit+0x180>)
 8000dc4:	f000 ff3e 	bl	8001c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dda:	230b      	movs	r3, #11
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de2:	4619      	mov	r1, r3
 8000de4:	480f      	ldr	r0, [pc, #60]	; (8000e24 <HAL_ETH_MspInit+0x184>)
 8000de6:	f000 ff2d 	bl	8001c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000dea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dfc:	230b      	movs	r3, #11
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	4808      	ldr	r0, [pc, #32]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000e08:	f000 ff1c 	bl	8001c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e0c:	bf00      	nop
 8000e0e:	3738      	adds	r7, #56	; 0x38
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40028000 	.word	0x40028000
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020800 	.word	0x40020800
 8000e20:	40020000 	.word	0x40020000
 8000e24:	40020400 	.word	0x40020400
 8000e28:	40021800 	.word	0x40021800

08000e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a19      	ldr	r2, [pc, #100]	; (8000eb0 <HAL_UART_MspInit+0x84>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d12c      	bne.n	8000ea8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a17      	ldr	r2, [pc, #92]	; (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e74:	f043 0308 	orr.w	r3, r3, #8
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <HAL_UART_MspInit+0x8c>)
 8000ea4:	f000 fece 	bl	8001c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3728      	adds	r7, #40	; 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40004800 	.word	0x40004800
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020c00 	.word	0x40020c00

08000ebc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000edc:	d13f      	bne.n	8000f5e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a20      	ldr	r2, [pc, #128]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000efa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f0c:	230a      	movs	r3, #10
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4815      	ldr	r0, [pc, #84]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000f18:	f000 fe94 	bl	8001c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480e      	ldr	r0, [pc, #56]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000f32:	f000 fe87 	bl	8001c44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f40:	6353      	str	r3, [r2, #52]	; 0x34
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f50:	6453      	str	r3, [r2, #68]	; 0x44
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	; 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000

08000f70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	; 0x30
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	2019      	movs	r0, #25
 8000f86:	f000 f9c7 	bl	8001318 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f8a:	2019      	movs	r0, #25
 8000f8c:	f000 f9e0 	bl	8001350 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <HAL_InitTick+0xa4>)
 8000f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f98:	4a1e      	ldr	r2, [pc, #120]	; (8001014 <HAL_InitTick+0xa4>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <HAL_InitTick+0xa4>)
 8000fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fac:	f107 0210 	add.w	r2, r7, #16
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fdb4 	bl	8002b24 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000fbc:	f001 fd9e 	bl	8002afc <HAL_RCC_GetPCLK2Freq>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc8:	4a13      	ldr	r2, [pc, #76]	; (8001018 <HAL_InitTick+0xa8>)
 8000fca:	fba2 2303 	umull	r2, r3, r2, r3
 8000fce:	0c9b      	lsrs	r3, r3, #18
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <HAL_InitTick+0xac>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <HAL_InitTick+0xb0>)
 8000fd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <HAL_InitTick+0xac>)
 8000fdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fe0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_InitTick+0xac>)
 8000fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_InitTick+0xac>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_InitTick+0xac>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ff4:	4809      	ldr	r0, [pc, #36]	; (800101c <HAL_InitTick+0xac>)
 8000ff6:	f001 fdc7 	bl	8002b88 <HAL_TIM_Base_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d104      	bne.n	800100a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001000:	4806      	ldr	r0, [pc, #24]	; (800101c <HAL_InitTick+0xac>)
 8001002:	f001 fe1b 	bl	8002c3c <HAL_TIM_Base_Start_IT>
 8001006:	4603      	mov	r3, r0
 8001008:	e000      	b.n	800100c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3730      	adds	r7, #48	; 0x30
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40023800 	.word	0x40023800
 8001018:	431bde83 	.word	0x431bde83
 800101c:	20004478 	.word	0x20004478
 8001020:	40010000 	.word	0x40010000

08001024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <NMI_Handler+0x4>

0800102a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <HardFault_Handler+0x4>

08001030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <MemManage_Handler+0x4>

08001036 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <BusFault_Handler+0x4>

0800103c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <UsageFault_Handler+0x4>

08001042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001056:	f001 fe61 	bl	8002d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20004478 	.word	0x20004478

08001064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <SystemInit+0x20>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <SystemInit+0x20>)
 8001070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800108e:	490e      	ldr	r1, [pc, #56]	; (80010c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001090:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001094:	e002      	b.n	800109c <LoopCopyDataInit>

08001096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109a:	3304      	adds	r3, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800109c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a0:	d3f9      	bcc.n	8001096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a2:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010a4:	4c0b      	ldr	r4, [pc, #44]	; (80010d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a8:	e001      	b.n	80010ae <LoopFillZerobss>

080010aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ac:	3204      	adds	r2, #4

080010ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b0:	d3fb      	bcc.n	80010aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010b2:	f7ff ffd7 	bl	8001064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010b6:	f004 ff31 	bl	8005f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ba:	f7ff fa2f 	bl	800051c <main>
  bx  lr    
 80010be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010cc:	08006060 	.word	0x08006060
  ldr r2, =_sbss
 80010d0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010d4:	200044c4 	.word	0x200044c4

080010d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d8:	e7fe      	b.n	80010d8 <ADC_IRQHandler>
	...

080010dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0d      	ldr	r2, [pc, #52]	; (800111c <HAL_Init+0x40>)
 80010e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0a      	ldr	r2, [pc, #40]	; (800111c <HAL_Init+0x40>)
 80010f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <HAL_Init+0x40>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a07      	ldr	r2, [pc, #28]	; (800111c <HAL_Init+0x40>)
 80010fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001102:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001104:	2003      	movs	r0, #3
 8001106:	f000 f8fc 	bl	8001302 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800110a:	2000      	movs	r0, #0
 800110c:	f7ff ff30 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001110:	f7ff fd9a 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023c00 	.word	0x40023c00

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008
 8001144:	200044c0 	.word	0x200044c0

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	200044c0 	.word	0x200044c0

08001160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff ffee 	bl	8001148 <HAL_GetTick>
 800116c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001178:	d005      	beq.n	8001186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_Delay+0x44>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001186:	bf00      	nop
 8001188:	f7ff ffde 	bl	8001148 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f7      	bhi.n	8001188 <HAL_Delay+0x28>
  {
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000008 	.word	0x20000008

080011a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <__NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	db0b      	blt.n	8001236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 021f 	and.w	r2, r3, #31
 8001224:	4907      	ldr	r1, [pc, #28]	; (8001244 <__NVIC_EnableIRQ+0x38>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	; (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ff4c 	bl	80011a8 <__NVIC_SetPriorityGrouping>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800132a:	f7ff ff61 	bl	80011f0 <__NVIC_GetPriorityGrouping>
 800132e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	6978      	ldr	r0, [r7, #20]
 8001336:	f7ff ffb1 	bl	800129c <NVIC_EncodePriority>
 800133a:	4602      	mov	r2, r0
 800133c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001340:	4611      	mov	r1, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ff80 	bl	8001248 <__NVIC_SetPriority>
}
 8001348:	bf00      	nop
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff54 	bl	800120c <__NVIC_EnableIRQ>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800137c:	4baa      	ldr	r3, [pc, #680]	; (8001628 <HAL_ETH_Init+0x2bc>)
 800137e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e183      	b.n	800169a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d106      	bne.n	80013ac <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fc7a 	bl	8000ca0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	4b9e      	ldr	r3, [pc, #632]	; (800162c <HAL_ETH_Init+0x2c0>)
 80013b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b4:	4a9d      	ldr	r2, [pc, #628]	; (800162c <HAL_ETH_Init+0x2c0>)
 80013b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ba:	6453      	str	r3, [r2, #68]	; 0x44
 80013bc:	4b9b      	ldr	r3, [pc, #620]	; (800162c <HAL_ETH_Init+0x2c0>)
 80013be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013c8:	4b99      	ldr	r3, [pc, #612]	; (8001630 <HAL_ETH_Init+0x2c4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	4a98      	ldr	r2, [pc, #608]	; (8001630 <HAL_ETH_Init+0x2c4>)
 80013ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013d2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013d4:	4b96      	ldr	r3, [pc, #600]	; (8001630 <HAL_ETH_Init+0x2c4>)
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	4994      	ldr	r1, [pc, #592]	; (8001630 <HAL_ETH_Init+0x2c4>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f042 0201 	orr.w	r2, r2, #1
 80013f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013f8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80013fa:	f7ff fea5 	bl	8001148 <HAL_GetTick>
 80013fe:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001400:	e011      	b.n	8001426 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001402:	f7ff fea1 	bl	8001148 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001410:	d909      	bls.n	8001426 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2203      	movs	r2, #3
 8001416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e139      	b.n	800169a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1e4      	bne.n	8001402 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f023 031c 	bic.w	r3, r3, #28
 8001446:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001448:	f001 fb38 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 800144c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	4a78      	ldr	r2, [pc, #480]	; (8001634 <HAL_ETH_Init+0x2c8>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d908      	bls.n	8001468 <HAL_ETH_Init+0xfc>
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	4a77      	ldr	r2, [pc, #476]	; (8001638 <HAL_ETH_Init+0x2cc>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d804      	bhi.n	8001468 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	f043 0308 	orr.w	r3, r3, #8
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	e027      	b.n	80014b8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	4a73      	ldr	r2, [pc, #460]	; (8001638 <HAL_ETH_Init+0x2cc>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d908      	bls.n	8001482 <HAL_ETH_Init+0x116>
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	4a6d      	ldr	r2, [pc, #436]	; (8001628 <HAL_ETH_Init+0x2bc>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d204      	bcs.n	8001482 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f043 030c 	orr.w	r3, r3, #12
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	e01a      	b.n	80014b8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	4a68      	ldr	r2, [pc, #416]	; (8001628 <HAL_ETH_Init+0x2bc>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d303      	bcc.n	8001492 <HAL_ETH_Init+0x126>
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	4a6b      	ldr	r2, [pc, #428]	; (800163c <HAL_ETH_Init+0x2d0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d911      	bls.n	80014b6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	4a69      	ldr	r2, [pc, #420]	; (800163c <HAL_ETH_Init+0x2d0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d908      	bls.n	80014ac <HAL_ETH_Init+0x140>
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4a68      	ldr	r2, [pc, #416]	; (8001640 <HAL_ETH_Init+0x2d4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d804      	bhi.n	80014ac <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	61fb      	str	r3, [r7, #28]
 80014aa:	e005      	b.n	80014b8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f043 0310 	orr.w	r3, r3, #16
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	e000      	b.n	80014b8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80014b6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	69fa      	ldr	r2, [r7, #28]
 80014be:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80014c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014c4:	2100      	movs	r1, #0
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f954 	bl	8001774 <HAL_ETH_WritePHYRegister>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00b      	beq.n	80014ea <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80014d6:	6939      	ldr	r1, [r7, #16]
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 f9b1 	bl	8001840 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e0d7      	b.n	800169a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80014ea:	20ff      	movs	r0, #255	; 0xff
 80014ec:	f7ff fe38 	bl	8001160 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 80a5 	beq.w	8001644 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80014fa:	f7ff fe25 	bl	8001148 <HAL_GetTick>
 80014fe:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	461a      	mov	r2, r3
 8001506:	2101      	movs	r1, #1
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 f8cb 	bl	80016a4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800150e:	f7ff fe1b 	bl	8001148 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	f241 3288 	movw	r2, #5000	; 0x1388
 800151c:	4293      	cmp	r3, r2
 800151e:	d90f      	bls.n	8001540 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001524:	6939      	ldr	r1, [r7, #16]
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f98a 	bl	8001840 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e0ac      	b.n	800169a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0da      	beq.n	8001500 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800154a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800154e:	2100      	movs	r1, #0
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f90f 	bl	8001774 <HAL_ETH_WritePHYRegister>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00b      	beq.n	8001574 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f96c 	bl	8001840 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001570:	2301      	movs	r3, #1
 8001572:	e092      	b.n	800169a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001574:	f7ff fde8 	bl	8001148 <HAL_GetTick>
 8001578:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	461a      	mov	r2, r3
 8001580:	2101      	movs	r1, #1
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f88e 	bl	80016a4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001588:	f7ff fdde 	bl	8001148 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	; 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d90f      	bls.n	80015ba <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800159e:	6939      	ldr	r1, [r7, #16]
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 f94d 	bl	8001840 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e06f      	b.n	800169a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f003 0320 	and.w	r3, r3, #32
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0da      	beq.n	800157a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	461a      	mov	r2, r3
 80015ca:	2110      	movs	r1, #16
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 f869 	bl	80016a4 <HAL_ETH_ReadPHYRegister>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00b      	beq.n	80015f0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015dc:	6939      	ldr	r1, [r7, #16]
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f92e 	bl	8001840 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80015ec:	2301      	movs	r3, #1
 80015ee:	e054      	b.n	800169a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d004      	beq.n	8001604 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	e002      	b.n	800160a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	e035      	b.n	8001688 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	e030      	b.n	8001688 <HAL_ETH_Init+0x31c>
 8001626:	bf00      	nop
 8001628:	03938700 	.word	0x03938700
 800162c:	40023800 	.word	0x40023800
 8001630:	40013800 	.word	0x40013800
 8001634:	01312cff 	.word	0x01312cff
 8001638:	02160ebf 	.word	0x02160ebf
 800163c:	05f5e0ff 	.word	0x05f5e0ff
 8001640:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	08db      	lsrs	r3, r3, #3
 800164a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	085b      	lsrs	r3, r3, #1
 8001652:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001654:	4313      	orrs	r3, r2
 8001656:	b29b      	uxth	r3, r3
 8001658:	461a      	mov	r2, r3
 800165a:	2100      	movs	r1, #0
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 f889 	bl	8001774 <HAL_ETH_WritePHYRegister>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d00b      	beq.n	8001680 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800166c:	6939      	ldr	r1, [r7, #16]
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f8e6 	bl	8001840 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e00c      	b.n	800169a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001680:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001684:	f7ff fd6c 	bl	8001160 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001688:	6939      	ldr	r1, [r7, #16]
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f8d8 	bl	8001840 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop

080016a4 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	460b      	mov	r3, r1
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b82      	cmp	r3, #130	; 0x82
 80016c4:	d101      	bne.n	80016ca <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80016c6:	2302      	movs	r3, #2
 80016c8:	e050      	b.n	800176c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2282      	movs	r2, #130	; 0x82
 80016ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f003 031c 	and.w	r3, r3, #28
 80016e0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8a1b      	ldrh	r3, [r3, #16]
 80016e6:	02db      	lsls	r3, r3, #11
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80016f0:	897b      	ldrh	r3, [r7, #10]
 80016f2:	019b      	lsls	r3, r3, #6
 80016f4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f023 0302 	bic.w	r3, r3, #2
 8001704:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001716:	f7ff fd17 	bl	8001148 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800171c:	e015      	b.n	800174a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800171e:	f7ff fd13 	bl	8001148 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172c:	d309      	bcc.n	8001742 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e014      	b.n	800176c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1e4      	bne.n	800171e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	b29b      	uxth	r3, r3
 800175c:	461a      	mov	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	460b      	mov	r3, r1
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b42      	cmp	r3, #66	; 0x42
 8001794:	d101      	bne.n	800179a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001796:	2302      	movs	r3, #2
 8001798:	e04e      	b.n	8001838 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2242      	movs	r2, #66	; 0x42
 800179e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 031c 	and.w	r3, r3, #28
 80017b0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8a1b      	ldrh	r3, [r3, #16]
 80017b6:	02db      	lsls	r3, r3, #11
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	4313      	orrs	r3, r2
 80017be:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80017c0:	897b      	ldrh	r3, [r7, #10]
 80017c2:	019b      	lsls	r3, r3, #6
 80017c4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80017f0:	f7ff fcaa 	bl	8001148 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017f6:	e015      	b.n	8001824 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80017f8:	f7ff fca6 	bl	8001148 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001806:	d309      	bcc.n	800181c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e00d      	b.n	8001838 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1e4      	bne.n	80017f8 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b0b0      	sub	sp, #192	; 0xc0
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d007      	beq.n	8001866 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800185c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001864:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800186e:	2300      	movs	r3, #0
 8001870:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d103      	bne.n	800188e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800188a:	663b      	str	r3, [r7, #96]	; 0x60
 800188c:	e001      	b.n	8001892 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001896:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800189c:	2300      	movs	r3, #0
 800189e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80018ac:	2340      	movs	r3, #64	; 0x40
 80018ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001904:	2300      	movs	r3, #0
 8001906:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001914:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001918:	4bac      	ldr	r3, [pc, #688]	; (8001bcc <ETH_MACDMAConfig+0x38c>)
 800191a:	4013      	ands	r3, r2
 800191c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001920:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001924:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001928:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800192a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800192c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001932:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001934:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001936:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800193a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001940:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001944:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001946:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001948:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800194a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800194c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800194e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001950:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001954:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001956:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800195a:	4313      	orrs	r3, r2
 800195c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001968:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001974:	2001      	movs	r0, #1
 8001976:	f7ff fbf3 	bl	8001160 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001982:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001984:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001986:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001988:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800198a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800198c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800198e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001992:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001994:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001998:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800199a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800199e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80019a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80019a4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80019a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80019b0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019b2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80019be:	2001      	movs	r0, #1
 80019c0:	f7ff fbce 	bl	8001160 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019cc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80019d6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80019e0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80019ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019f0:	f64f 7341 	movw	r3, #65345	; 0xff41
 80019f4:	4013      	ands	r3, r2
 80019f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80019fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019fe:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001a00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001a04:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001a06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001a0a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001a0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001a10:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001a12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001a16:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001a18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001a1c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001a1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a22:	4313      	orrs	r3, r2
 8001a24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a30:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f7ff fb8f 	bl	8001160 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a4a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001a4c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001a50:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a66:	2001      	movs	r0, #1
 8001a68:	f7ff fb7a 	bl	8001160 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a74:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001a7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a7e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001a84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a88:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001a9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001aa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aa8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001aaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aae:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aca:	3318      	adds	r3, #24
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ad2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ad6:	4b3e      	ldr	r3, [pc, #248]	; (8001bd0 <ETH_MACDMAConfig+0x390>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001ade:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001ae2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001ae4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001ae6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001ae8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001aea:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001aec:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001aee:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001af0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001af2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001af4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001af6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001afa:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001afe:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b04:	4313      	orrs	r3, r2
 8001b06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b12:	3318      	adds	r3, #24
 8001b14:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b18:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b22:	3318      	adds	r3, #24
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f7ff fb18 	bl	8001160 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b38:	3318      	adds	r3, #24
 8001b3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b3e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b44:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001b48:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001b4c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001b50:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b54:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001b56:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001b5a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b68:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f7ff faf1 	bl	8001160 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b8a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d10f      	bne.n	8001bb4 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b9c:	331c      	adds	r3, #28
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ba8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb0:	331c      	adds	r3, #28
 8001bb2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	2100      	movs	r1, #0
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f809 	bl	8001bd4 <ETH_MACAddressConfig>
}
 8001bc2:	bf00      	nop
 8001bc4:	37c0      	adds	r7, #192	; 0xc0
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	ff20810f 	.word	0xff20810f
 8001bd0:	f8de3f23 	.word	0xf8de3f23

08001bd4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3305      	adds	r3, #5
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	3204      	adds	r2, #4
 8001bec:	7812      	ldrb	r2, [r2, #0]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <ETH_MACAddressConfig+0x68>)
 8001bf6:	4413      	add	r3, r2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3303      	adds	r3, #3
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	061a      	lsls	r2, r3, #24
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3302      	adds	r3, #2
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	041b      	lsls	r3, r3, #16
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3301      	adds	r3, #1
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	021b      	lsls	r3, r3, #8
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	7812      	ldrb	r2, [r2, #0]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <ETH_MACAddressConfig+0x6c>)
 8001c26:	4413      	add	r3, r2
 8001c28:	461a      	mov	r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	6013      	str	r3, [r2, #0]
}
 8001c2e:	bf00      	nop
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40028040 	.word	0x40028040
 8001c40:	40028044 	.word	0x40028044

08001c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	e177      	b.n	8001f50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c60:	2201      	movs	r2, #1
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	f040 8166 	bne.w	8001f4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d005      	beq.n	8001c96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d130      	bne.n	8001cf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ccc:	2201      	movs	r2, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 0201 	and.w	r2, r3, #1
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d017      	beq.n	8001d34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d123      	bne.n	8001d88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	08da      	lsrs	r2, r3, #3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3208      	adds	r2, #8
 8001d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	220f      	movs	r2, #15
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	08da      	lsrs	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3208      	adds	r2, #8
 8001d82:	69b9      	ldr	r1, [r7, #24]
 8001d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0203 	and.w	r2, r3, #3
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80c0 	beq.w	8001f4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b66      	ldr	r3, [pc, #408]	; (8001f68 <HAL_GPIO_Init+0x324>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	4a65      	ldr	r2, [pc, #404]	; (8001f68 <HAL_GPIO_Init+0x324>)
 8001dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dda:	4b63      	ldr	r3, [pc, #396]	; (8001f68 <HAL_GPIO_Init+0x324>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001de6:	4a61      	ldr	r2, [pc, #388]	; (8001f6c <HAL_GPIO_Init+0x328>)
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3302      	adds	r3, #2
 8001dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a58      	ldr	r2, [pc, #352]	; (8001f70 <HAL_GPIO_Init+0x32c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d037      	beq.n	8001e82 <HAL_GPIO_Init+0x23e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a57      	ldr	r2, [pc, #348]	; (8001f74 <HAL_GPIO_Init+0x330>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d031      	beq.n	8001e7e <HAL_GPIO_Init+0x23a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a56      	ldr	r2, [pc, #344]	; (8001f78 <HAL_GPIO_Init+0x334>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d02b      	beq.n	8001e7a <HAL_GPIO_Init+0x236>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a55      	ldr	r2, [pc, #340]	; (8001f7c <HAL_GPIO_Init+0x338>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d025      	beq.n	8001e76 <HAL_GPIO_Init+0x232>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a54      	ldr	r2, [pc, #336]	; (8001f80 <HAL_GPIO_Init+0x33c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d01f      	beq.n	8001e72 <HAL_GPIO_Init+0x22e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a53      	ldr	r2, [pc, #332]	; (8001f84 <HAL_GPIO_Init+0x340>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d019      	beq.n	8001e6e <HAL_GPIO_Init+0x22a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a52      	ldr	r2, [pc, #328]	; (8001f88 <HAL_GPIO_Init+0x344>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <HAL_GPIO_Init+0x226>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a51      	ldr	r2, [pc, #324]	; (8001f8c <HAL_GPIO_Init+0x348>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00d      	beq.n	8001e66 <HAL_GPIO_Init+0x222>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a50      	ldr	r2, [pc, #320]	; (8001f90 <HAL_GPIO_Init+0x34c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d007      	beq.n	8001e62 <HAL_GPIO_Init+0x21e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4f      	ldr	r2, [pc, #316]	; (8001f94 <HAL_GPIO_Init+0x350>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <HAL_GPIO_Init+0x21a>
 8001e5a:	2309      	movs	r3, #9
 8001e5c:	e012      	b.n	8001e84 <HAL_GPIO_Init+0x240>
 8001e5e:	230a      	movs	r3, #10
 8001e60:	e010      	b.n	8001e84 <HAL_GPIO_Init+0x240>
 8001e62:	2308      	movs	r3, #8
 8001e64:	e00e      	b.n	8001e84 <HAL_GPIO_Init+0x240>
 8001e66:	2307      	movs	r3, #7
 8001e68:	e00c      	b.n	8001e84 <HAL_GPIO_Init+0x240>
 8001e6a:	2306      	movs	r3, #6
 8001e6c:	e00a      	b.n	8001e84 <HAL_GPIO_Init+0x240>
 8001e6e:	2305      	movs	r3, #5
 8001e70:	e008      	b.n	8001e84 <HAL_GPIO_Init+0x240>
 8001e72:	2304      	movs	r3, #4
 8001e74:	e006      	b.n	8001e84 <HAL_GPIO_Init+0x240>
 8001e76:	2303      	movs	r3, #3
 8001e78:	e004      	b.n	8001e84 <HAL_GPIO_Init+0x240>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e002      	b.n	8001e84 <HAL_GPIO_Init+0x240>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_GPIO_Init+0x240>
 8001e82:	2300      	movs	r3, #0
 8001e84:	69fa      	ldr	r2, [r7, #28]
 8001e86:	f002 0203 	and.w	r2, r2, #3
 8001e8a:	0092      	lsls	r2, r2, #2
 8001e8c:	4093      	lsls	r3, r2
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e94:	4935      	ldr	r1, [pc, #212]	; (8001f6c <HAL_GPIO_Init+0x328>)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea2:	4b3d      	ldr	r3, [pc, #244]	; (8001f98 <HAL_GPIO_Init+0x354>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ec6:	4a34      	ldr	r2, [pc, #208]	; (8001f98 <HAL_GPIO_Init+0x354>)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ecc:	4b32      	ldr	r3, [pc, #200]	; (8001f98 <HAL_GPIO_Init+0x354>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ef0:	4a29      	ldr	r2, [pc, #164]	; (8001f98 <HAL_GPIO_Init+0x354>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ef6:	4b28      	ldr	r3, [pc, #160]	; (8001f98 <HAL_GPIO_Init+0x354>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f1a:	4a1f      	ldr	r2, [pc, #124]	; (8001f98 <HAL_GPIO_Init+0x354>)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f20:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <HAL_GPIO_Init+0x354>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f44:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <HAL_GPIO_Init+0x354>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	2b0f      	cmp	r3, #15
 8001f54:	f67f ae84 	bls.w	8001c60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	3724      	adds	r7, #36	; 0x24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40013800 	.word	0x40013800
 8001f70:	40020000 	.word	0x40020000
 8001f74:	40020400 	.word	0x40020400
 8001f78:	40020800 	.word	0x40020800
 8001f7c:	40020c00 	.word	0x40020c00
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40021400 	.word	0x40021400
 8001f88:	40021800 	.word	0x40021800
 8001f8c:	40021c00 	.word	0x40021c00
 8001f90:	40022000 	.word	0x40022000
 8001f94:	40022400 	.word	0x40022400
 8001f98:	40013c00 	.word	0x40013c00

08001f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	807b      	strh	r3, [r7, #2]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fac:	787b      	ldrb	r3, [r7, #1]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fb2:	887a      	ldrh	r2, [r7, #2]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fb8:	e003      	b.n	8001fc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fba:	887b      	ldrh	r3, [r7, #2]
 8001fbc:	041a      	lsls	r2, r3, #16
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	619a      	str	r2, [r3, #24]
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b085      	sub	sp, #20
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fe0:	887a      	ldrh	r2, [r7, #2]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	041a      	lsls	r2, r3, #16
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	43d9      	mvns	r1, r3
 8001fec:	887b      	ldrh	r3, [r7, #2]
 8001fee:	400b      	ands	r3, r1
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	619a      	str	r2, [r3, #24]
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002002:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002004:	b08f      	sub	sp, #60	; 0x3c
 8002006:	af0a      	add	r7, sp, #40	; 0x28
 8002008:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e10f      	b.n	8002234 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d106      	bne.n	8002034 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7fe ff44 	bl	8000ebc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2203      	movs	r2, #3
 8002038:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f001 fabd 	bl	80035d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	603b      	str	r3, [r7, #0]
 800205e:	687e      	ldr	r6, [r7, #4]
 8002060:	466d      	mov	r5, sp
 8002062:	f106 0410 	add.w	r4, r6, #16
 8002066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800206a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800206e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002072:	e885 0003 	stmia.w	r5, {r0, r1}
 8002076:	1d33      	adds	r3, r6, #4
 8002078:	cb0e      	ldmia	r3, {r1, r2, r3}
 800207a:	6838      	ldr	r0, [r7, #0]
 800207c:	f001 fa48 	bl	8003510 <USB_CoreInit>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2202      	movs	r2, #2
 800208a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e0d0      	b.n	8002234 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2100      	movs	r1, #0
 8002098:	4618      	mov	r0, r3
 800209a:	f001 faab 	bl	80035f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800209e:	2300      	movs	r3, #0
 80020a0:	73fb      	strb	r3, [r7, #15]
 80020a2:	e04a      	b.n	800213a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	333d      	adds	r3, #61	; 0x3d
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	333c      	adds	r3, #60	; 0x3c
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	b298      	uxth	r0, r3
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	3342      	adds	r3, #66	; 0x42
 80020e0:	4602      	mov	r2, r0
 80020e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	333f      	adds	r3, #63	; 0x3f
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	3344      	adds	r3, #68	; 0x44
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	1a9b      	subs	r3, r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	3348      	adds	r3, #72	; 0x48
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002120:	7bfa      	ldrb	r2, [r7, #15]
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	3350      	adds	r3, #80	; 0x50
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	3301      	adds	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
 800213a:	7bfa      	ldrb	r2, [r7, #15]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	429a      	cmp	r2, r3
 8002142:	d3af      	bcc.n	80020a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002144:	2300      	movs	r3, #0
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	e044      	b.n	80021d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002172:	7bfa      	ldrb	r2, [r7, #15]
 8002174:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	1a9b      	subs	r3, r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	1a9b      	subs	r3, r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021b8:	7bfa      	ldrb	r2, [r7, #15]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	3301      	adds	r3, #1
 80021d2:	73fb      	strb	r3, [r7, #15]
 80021d4:	7bfa      	ldrb	r2, [r7, #15]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d3b5      	bcc.n	800214a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	687e      	ldr	r6, [r7, #4]
 80021e6:	466d      	mov	r5, sp
 80021e8:	f106 0410 	add.w	r4, r6, #16
 80021ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80021fc:	1d33      	adds	r3, r6, #4
 80021fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002200:	6838      	ldr	r0, [r7, #0]
 8002202:	f001 fa43 	bl	800368c <USB_DevInit>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e00d      	b.n	8002234 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f001 fbee 	bl	8003a0e <USB_DevDisconnect>

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800223c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e264      	b.n	8002718 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d075      	beq.n	8002346 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800225a:	4ba3      	ldr	r3, [pc, #652]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b04      	cmp	r3, #4
 8002264:	d00c      	beq.n	8002280 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002266:	4ba0      	ldr	r3, [pc, #640]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800226e:	2b08      	cmp	r3, #8
 8002270:	d112      	bne.n	8002298 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002272:	4b9d      	ldr	r3, [pc, #628]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800227a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800227e:	d10b      	bne.n	8002298 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002280:	4b99      	ldr	r3, [pc, #612]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d05b      	beq.n	8002344 <HAL_RCC_OscConfig+0x108>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d157      	bne.n	8002344 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e23f      	b.n	8002718 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a0:	d106      	bne.n	80022b0 <HAL_RCC_OscConfig+0x74>
 80022a2:	4b91      	ldr	r3, [pc, #580]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a90      	ldr	r2, [pc, #576]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	e01d      	b.n	80022ec <HAL_RCC_OscConfig+0xb0>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b8:	d10c      	bne.n	80022d4 <HAL_RCC_OscConfig+0x98>
 80022ba:	4b8b      	ldr	r3, [pc, #556]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a8a      	ldr	r2, [pc, #552]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	4b88      	ldr	r3, [pc, #544]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a87      	ldr	r2, [pc, #540]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 80022cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	e00b      	b.n	80022ec <HAL_RCC_OscConfig+0xb0>
 80022d4:	4b84      	ldr	r3, [pc, #528]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a83      	ldr	r2, [pc, #524]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 80022da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b81      	ldr	r3, [pc, #516]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a80      	ldr	r2, [pc, #512]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 80022e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d013      	beq.n	800231c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7fe ff28 	bl	8001148 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022fc:	f7fe ff24 	bl	8001148 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	; 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e204      	b.n	8002718 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	4b76      	ldr	r3, [pc, #472]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0xc0>
 800231a:	e014      	b.n	8002346 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7fe ff14 	bl	8001148 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002324:	f7fe ff10 	bl	8001148 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	; 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e1f0      	b.n	8002718 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002336:	4b6c      	ldr	r3, [pc, #432]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0xe8>
 8002342:	e000      	b.n	8002346 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d063      	beq.n	800241a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002352:	4b65      	ldr	r3, [pc, #404]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800235e:	4b62      	ldr	r3, [pc, #392]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002366:	2b08      	cmp	r3, #8
 8002368:	d11c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800236a:	4b5f      	ldr	r3, [pc, #380]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d116      	bne.n	80023a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002376:	4b5c      	ldr	r3, [pc, #368]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <HAL_RCC_OscConfig+0x152>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d001      	beq.n	800238e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e1c4      	b.n	8002718 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238e:	4b56      	ldr	r3, [pc, #344]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4952      	ldr	r1, [pc, #328]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a2:	e03a      	b.n	800241a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d020      	beq.n	80023ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ac:	4b4f      	ldr	r3, [pc, #316]	; (80024ec <HAL_RCC_OscConfig+0x2b0>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b2:	f7fe fec9 	bl	8001148 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ba:	f7fe fec5 	bl	8001148 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e1a5      	b.n	8002718 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023cc:	4b46      	ldr	r3, [pc, #280]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d8:	4b43      	ldr	r3, [pc, #268]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4940      	ldr	r1, [pc, #256]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	600b      	str	r3, [r1, #0]
 80023ec:	e015      	b.n	800241a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ee:	4b3f      	ldr	r3, [pc, #252]	; (80024ec <HAL_RCC_OscConfig+0x2b0>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7fe fea8 	bl	8001148 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023fc:	f7fe fea4 	bl	8001148 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e184      	b.n	8002718 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240e:	4b36      	ldr	r3, [pc, #216]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d030      	beq.n	8002488 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d016      	beq.n	800245c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800242e:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <HAL_RCC_OscConfig+0x2b4>)
 8002430:	2201      	movs	r2, #1
 8002432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002434:	f7fe fe88 	bl	8001148 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800243c:	f7fe fe84 	bl	8001148 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e164      	b.n	8002718 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244e:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0x200>
 800245a:	e015      	b.n	8002488 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800245c:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <HAL_RCC_OscConfig+0x2b4>)
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002462:	f7fe fe71 	bl	8001148 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800246a:	f7fe fe6d 	bl	8001148 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e14d      	b.n	8002718 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247c:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 800247e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f0      	bne.n	800246a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80a0 	beq.w	80025d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10f      	bne.n	80024c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	4a0e      	ldr	r2, [pc, #56]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 80024b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b4:	6413      	str	r3, [r2, #64]	; 0x40
 80024b6:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c2:	2301      	movs	r3, #1
 80024c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_RCC_OscConfig+0x2b8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d121      	bne.n	8002516 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <HAL_RCC_OscConfig+0x2b8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a07      	ldr	r2, [pc, #28]	; (80024f4 <HAL_RCC_OscConfig+0x2b8>)
 80024d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024de:	f7fe fe33 	bl	8001148 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e4:	e011      	b.n	800250a <HAL_RCC_OscConfig+0x2ce>
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800
 80024ec:	42470000 	.word	0x42470000
 80024f0:	42470e80 	.word	0x42470e80
 80024f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f8:	f7fe fe26 	bl	8001148 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e106      	b.n	8002718 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250a:	4b85      	ldr	r3, [pc, #532]	; (8002720 <HAL_RCC_OscConfig+0x4e4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d106      	bne.n	800252c <HAL_RCC_OscConfig+0x2f0>
 800251e:	4b81      	ldr	r3, [pc, #516]	; (8002724 <HAL_RCC_OscConfig+0x4e8>)
 8002520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002522:	4a80      	ldr	r2, [pc, #512]	; (8002724 <HAL_RCC_OscConfig+0x4e8>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6713      	str	r3, [r2, #112]	; 0x70
 800252a:	e01c      	b.n	8002566 <HAL_RCC_OscConfig+0x32a>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b05      	cmp	r3, #5
 8002532:	d10c      	bne.n	800254e <HAL_RCC_OscConfig+0x312>
 8002534:	4b7b      	ldr	r3, [pc, #492]	; (8002724 <HAL_RCC_OscConfig+0x4e8>)
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	4a7a      	ldr	r2, [pc, #488]	; (8002724 <HAL_RCC_OscConfig+0x4e8>)
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	6713      	str	r3, [r2, #112]	; 0x70
 8002540:	4b78      	ldr	r3, [pc, #480]	; (8002724 <HAL_RCC_OscConfig+0x4e8>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002544:	4a77      	ldr	r2, [pc, #476]	; (8002724 <HAL_RCC_OscConfig+0x4e8>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6713      	str	r3, [r2, #112]	; 0x70
 800254c:	e00b      	b.n	8002566 <HAL_RCC_OscConfig+0x32a>
 800254e:	4b75      	ldr	r3, [pc, #468]	; (8002724 <HAL_RCC_OscConfig+0x4e8>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002552:	4a74      	ldr	r2, [pc, #464]	; (8002724 <HAL_RCC_OscConfig+0x4e8>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6713      	str	r3, [r2, #112]	; 0x70
 800255a:	4b72      	ldr	r3, [pc, #456]	; (8002724 <HAL_RCC_OscConfig+0x4e8>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255e:	4a71      	ldr	r2, [pc, #452]	; (8002724 <HAL_RCC_OscConfig+0x4e8>)
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d015      	beq.n	800259a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256e:	f7fe fdeb 	bl	8001148 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7fe fde7 	bl	8001148 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	; 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0c5      	b.n	8002718 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	4b65      	ldr	r3, [pc, #404]	; (8002724 <HAL_RCC_OscConfig+0x4e8>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0ee      	beq.n	8002576 <HAL_RCC_OscConfig+0x33a>
 8002598:	e014      	b.n	80025c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259a:	f7fe fdd5 	bl	8001148 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7fe fdd1 	bl	8001148 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e0af      	b.n	8002718 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	4b5a      	ldr	r3, [pc, #360]	; (8002724 <HAL_RCC_OscConfig+0x4e8>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1ee      	bne.n	80025a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025c4:	7dfb      	ldrb	r3, [r7, #23]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d105      	bne.n	80025d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ca:	4b56      	ldr	r3, [pc, #344]	; (8002724 <HAL_RCC_OscConfig+0x4e8>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a55      	ldr	r2, [pc, #340]	; (8002724 <HAL_RCC_OscConfig+0x4e8>)
 80025d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 809b 	beq.w	8002716 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025e0:	4b50      	ldr	r3, [pc, #320]	; (8002724 <HAL_RCC_OscConfig+0x4e8>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d05c      	beq.n	80026a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d141      	bne.n	8002678 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f4:	4b4c      	ldr	r3, [pc, #304]	; (8002728 <HAL_RCC_OscConfig+0x4ec>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fa:	f7fe fda5 	bl	8001148 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002602:	f7fe fda1 	bl	8001148 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e081      	b.n	8002718 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002614:	4b43      	ldr	r3, [pc, #268]	; (8002724 <HAL_RCC_OscConfig+0x4e8>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f0      	bne.n	8002602 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69da      	ldr	r2, [r3, #28]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	019b      	lsls	r3, r3, #6
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	3b01      	subs	r3, #1
 800263a:	041b      	lsls	r3, r3, #16
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	061b      	lsls	r3, r3, #24
 8002644:	4937      	ldr	r1, [pc, #220]	; (8002724 <HAL_RCC_OscConfig+0x4e8>)
 8002646:	4313      	orrs	r3, r2
 8002648:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800264a:	4b37      	ldr	r3, [pc, #220]	; (8002728 <HAL_RCC_OscConfig+0x4ec>)
 800264c:	2201      	movs	r2, #1
 800264e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7fe fd7a 	bl	8001148 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002658:	f7fe fd76 	bl	8001148 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e056      	b.n	8002718 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266a:	4b2e      	ldr	r3, [pc, #184]	; (8002724 <HAL_RCC_OscConfig+0x4e8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x41c>
 8002676:	e04e      	b.n	8002716 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002678:	4b2b      	ldr	r3, [pc, #172]	; (8002728 <HAL_RCC_OscConfig+0x4ec>)
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267e:	f7fe fd63 	bl	8001148 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002686:	f7fe fd5f 	bl	8001148 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e03f      	b.n	8002718 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002698:	4b22      	ldr	r3, [pc, #136]	; (8002724 <HAL_RCC_OscConfig+0x4e8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f0      	bne.n	8002686 <HAL_RCC_OscConfig+0x44a>
 80026a4:	e037      	b.n	8002716 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e032      	b.n	8002718 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026b2:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <HAL_RCC_OscConfig+0x4e8>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d028      	beq.n	8002712 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d121      	bne.n	8002712 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d11a      	bne.n	8002712 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026e2:	4013      	ands	r3, r2
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d111      	bne.n	8002712 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f8:	085b      	lsrs	r3, r3, #1
 80026fa:	3b01      	subs	r3, #1
 80026fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d107      	bne.n	8002712 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800270e:	429a      	cmp	r2, r3
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40007000 	.word	0x40007000
 8002724:	40023800 	.word	0x40023800
 8002728:	42470060 	.word	0x42470060

0800272c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0cc      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002740:	4b68      	ldr	r3, [pc, #416]	; (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d90c      	bls.n	8002768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b65      	ldr	r3, [pc, #404]	; (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b63      	ldr	r3, [pc, #396]	; (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0b8      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d020      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002780:	4b59      	ldr	r3, [pc, #356]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a58      	ldr	r2, [pc, #352]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800278a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002798:	4b53      	ldr	r3, [pc, #332]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a52      	ldr	r2, [pc, #328]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a4:	4b50      	ldr	r3, [pc, #320]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	494d      	ldr	r1, [pc, #308]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d044      	beq.n	800284c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ca:	4b47      	ldr	r3, [pc, #284]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d119      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e07f      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d003      	beq.n	80027ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ea:	4b3f      	ldr	r3, [pc, #252]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e06f      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fa:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e067      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800280a:	4b37      	ldr	r3, [pc, #220]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f023 0203 	bic.w	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4934      	ldr	r1, [pc, #208]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	4313      	orrs	r3, r2
 800281a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800281c:	f7fe fc94 	bl	8001148 <HAL_GetTick>
 8002820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	e00a      	b.n	800283a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002824:	f7fe fc90 	bl	8001148 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d901      	bls.n	800283a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e04f      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 020c 	and.w	r2, r3, #12
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	429a      	cmp	r2, r3
 800284a:	d1eb      	bne.n	8002824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800284c:	4b25      	ldr	r3, [pc, #148]	; (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d20c      	bcs.n	8002874 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285a:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002862:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d001      	beq.n	8002874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e032      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002880:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4916      	ldr	r1, [pc, #88]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	4313      	orrs	r3, r2
 8002890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d009      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	490e      	ldr	r1, [pc, #56]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028b2:	f000 f821 	bl	80028f8 <HAL_RCC_GetSysClockFreq>
 80028b6:	4602      	mov	r2, r0
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	490a      	ldr	r1, [pc, #40]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	5ccb      	ldrb	r3, [r1, r3]
 80028c6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ca:	4a09      	ldr	r2, [pc, #36]	; (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ce:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <HAL_RCC_ClockConfig+0x1c8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fb4c 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40023c00 	.word	0x40023c00
 80028e8:	40023800 	.word	0x40023800
 80028ec:	08006038 	.word	0x08006038
 80028f0:	20000000 	.word	0x20000000
 80028f4:	20000004 	.word	0x20000004

080028f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	607b      	str	r3, [r7, #4]
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	2300      	movs	r3, #0
 800290a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002910:	4b67      	ldr	r3, [pc, #412]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 030c 	and.w	r3, r3, #12
 8002918:	2b08      	cmp	r3, #8
 800291a:	d00d      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x40>
 800291c:	2b08      	cmp	r3, #8
 800291e:	f200 80bd 	bhi.w	8002a9c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x34>
 8002926:	2b04      	cmp	r3, #4
 8002928:	d003      	beq.n	8002932 <HAL_RCC_GetSysClockFreq+0x3a>
 800292a:	e0b7      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800292c:	4b61      	ldr	r3, [pc, #388]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800292e:	60bb      	str	r3, [r7, #8]
       break;
 8002930:	e0b7      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002932:	4b61      	ldr	r3, [pc, #388]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002934:	60bb      	str	r3, [r7, #8]
      break;
 8002936:	e0b4      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002938:	4b5d      	ldr	r3, [pc, #372]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002940:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002942:	4b5b      	ldr	r3, [pc, #364]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d04d      	beq.n	80029ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294e:	4b58      	ldr	r3, [pc, #352]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	099b      	lsrs	r3, r3, #6
 8002954:	461a      	mov	r2, r3
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800295e:	f04f 0100 	mov.w	r1, #0
 8002962:	ea02 0800 	and.w	r8, r2, r0
 8002966:	ea03 0901 	and.w	r9, r3, r1
 800296a:	4640      	mov	r0, r8
 800296c:	4649      	mov	r1, r9
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	014b      	lsls	r3, r1, #5
 8002978:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800297c:	0142      	lsls	r2, r0, #5
 800297e:	4610      	mov	r0, r2
 8002980:	4619      	mov	r1, r3
 8002982:	ebb0 0008 	subs.w	r0, r0, r8
 8002986:	eb61 0109 	sbc.w	r1, r1, r9
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	018b      	lsls	r3, r1, #6
 8002994:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002998:	0182      	lsls	r2, r0, #6
 800299a:	1a12      	subs	r2, r2, r0
 800299c:	eb63 0301 	sbc.w	r3, r3, r1
 80029a0:	f04f 0000 	mov.w	r0, #0
 80029a4:	f04f 0100 	mov.w	r1, #0
 80029a8:	00d9      	lsls	r1, r3, #3
 80029aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029ae:	00d0      	lsls	r0, r2, #3
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	eb12 0208 	adds.w	r2, r2, r8
 80029b8:	eb43 0309 	adc.w	r3, r3, r9
 80029bc:	f04f 0000 	mov.w	r0, #0
 80029c0:	f04f 0100 	mov.w	r1, #0
 80029c4:	0259      	lsls	r1, r3, #9
 80029c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80029ca:	0250      	lsls	r0, r2, #9
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4610      	mov	r0, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	461a      	mov	r2, r3
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	f7fd fc08 	bl	80001f0 <__aeabi_uldivmod>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4613      	mov	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	e04a      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ea:	4b31      	ldr	r3, [pc, #196]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	099b      	lsrs	r3, r3, #6
 80029f0:	461a      	mov	r2, r3
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029fa:	f04f 0100 	mov.w	r1, #0
 80029fe:	ea02 0400 	and.w	r4, r2, r0
 8002a02:	ea03 0501 	and.w	r5, r3, r1
 8002a06:	4620      	mov	r0, r4
 8002a08:	4629      	mov	r1, r5
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	014b      	lsls	r3, r1, #5
 8002a14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a18:	0142      	lsls	r2, r0, #5
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	1b00      	subs	r0, r0, r4
 8002a20:	eb61 0105 	sbc.w	r1, r1, r5
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	018b      	lsls	r3, r1, #6
 8002a2e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a32:	0182      	lsls	r2, r0, #6
 8002a34:	1a12      	subs	r2, r2, r0
 8002a36:	eb63 0301 	sbc.w	r3, r3, r1
 8002a3a:	f04f 0000 	mov.w	r0, #0
 8002a3e:	f04f 0100 	mov.w	r1, #0
 8002a42:	00d9      	lsls	r1, r3, #3
 8002a44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a48:	00d0      	lsls	r0, r2, #3
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	1912      	adds	r2, r2, r4
 8002a50:	eb45 0303 	adc.w	r3, r5, r3
 8002a54:	f04f 0000 	mov.w	r0, #0
 8002a58:	f04f 0100 	mov.w	r1, #0
 8002a5c:	0299      	lsls	r1, r3, #10
 8002a5e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a62:	0290      	lsls	r0, r2, #10
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4610      	mov	r0, r2
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	f7fd fbbc 	bl	80001f0 <__aeabi_uldivmod>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	0c1b      	lsrs	r3, r3, #16
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a98:	60bb      	str	r3, [r7, #8]
      break;
 8002a9a:	e002      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a9e:	60bb      	str	r3, [r7, #8]
      break;
 8002aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	00f42400 	.word	0x00f42400
 8002ab8:	007a1200 	.word	0x007a1200

08002abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	20000000 	.word	0x20000000

08002ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ad8:	f7ff fff0 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002adc:	4602      	mov	r2, r0
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	0a9b      	lsrs	r3, r3, #10
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	4903      	ldr	r1, [pc, #12]	; (8002af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aea:	5ccb      	ldrb	r3, [r1, r3]
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	08006048 	.word	0x08006048

08002afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b00:	f7ff ffdc 	bl	8002abc <HAL_RCC_GetHCLKFreq>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0b5b      	lsrs	r3, r3, #13
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4903      	ldr	r1, [pc, #12]	; (8002b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b12:	5ccb      	ldrb	r3, [r1, r3]
 8002b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	08006048 	.word	0x08006048

08002b24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	220f      	movs	r2, #15
 8002b32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b34:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <HAL_RCC_GetClockConfig+0x5c>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 0203 	and.w	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b40:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <HAL_RCC_GetClockConfig+0x5c>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <HAL_RCC_GetClockConfig+0x5c>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b58:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_RCC_GetClockConfig+0x5c>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	08db      	lsrs	r3, r3, #3
 8002b5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <HAL_RCC_GetClockConfig+0x60>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 020f 	and.w	r2, r3, #15
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	601a      	str	r2, [r3, #0]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40023c00 	.word	0x40023c00

08002b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e041      	b.n	8002c1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f839 	bl	8002c26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	f000 f9d8 	bl	8002f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d001      	beq.n	8002c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e04e      	b.n	8002cf2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d022      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x80>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7e:	d01d      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x80>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a1f      	ldr	r2, [pc, #124]	; (8002d04 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d018      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x80>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a1e      	ldr	r2, [pc, #120]	; (8002d08 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d013      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x80>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <HAL_TIM_Base_Start_IT+0xd0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00e      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x80>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a1b      	ldr	r2, [pc, #108]	; (8002d10 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d009      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x80>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a19      	ldr	r2, [pc, #100]	; (8002d14 <HAL_TIM_Base_Start_IT+0xd8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d004      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x80>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <HAL_TIM_Base_Start_IT+0xdc>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d111      	bne.n	8002ce0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d010      	beq.n	8002cf0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cde:	e007      	b.n	8002cf0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40010000 	.word	0x40010000
 8002d04:	40000400 	.word	0x40000400
 8002d08:	40000800 	.word	0x40000800
 8002d0c:	40000c00 	.word	0x40000c00
 8002d10:	40010400 	.word	0x40010400
 8002d14:	40014000 	.word	0x40014000
 8002d18:	40001800 	.word	0x40001800

08002d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d122      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d11b      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0202 	mvn.w	r2, #2
 8002d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f8ee 	bl	8002f40 <HAL_TIM_IC_CaptureCallback>
 8002d64:	e005      	b.n	8002d72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f8e0 	bl	8002f2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f8f1 	bl	8002f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d122      	bne.n	8002dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d11b      	bne.n	8002dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0204 	mvn.w	r2, #4
 8002d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2202      	movs	r2, #2
 8002da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f8c4 	bl	8002f40 <HAL_TIM_IC_CaptureCallback>
 8002db8:	e005      	b.n	8002dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f8b6 	bl	8002f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f8c7 	bl	8002f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d122      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d11b      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0208 	mvn.w	r2, #8
 8002df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2204      	movs	r2, #4
 8002df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f89a 	bl	8002f40 <HAL_TIM_IC_CaptureCallback>
 8002e0c:	e005      	b.n	8002e1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f88c 	bl	8002f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f89d 	bl	8002f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d122      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b10      	cmp	r3, #16
 8002e3a:	d11b      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0210 	mvn.w	r2, #16
 8002e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2208      	movs	r2, #8
 8002e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f870 	bl	8002f40 <HAL_TIM_IC_CaptureCallback>
 8002e60:	e005      	b.n	8002e6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f862 	bl	8002f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f873 	bl	8002f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d10e      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d107      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0201 	mvn.w	r2, #1
 8002e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fd febc 	bl	8000c18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eaa:	2b80      	cmp	r3, #128	; 0x80
 8002eac:	d10e      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb8:	2b80      	cmp	r3, #128	; 0x80
 8002eba:	d107      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f902 	bl	80030d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b40      	cmp	r3, #64	; 0x40
 8002ed8:	d10e      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee4:	2b40      	cmp	r3, #64	; 0x40
 8002ee6:	d107      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f838 	bl	8002f68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d10e      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	2b20      	cmp	r3, #32
 8002f12:	d107      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f06f 0220 	mvn.w	r2, #32
 8002f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f8cc 	bl	80030bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a40      	ldr	r2, [pc, #256]	; (8003090 <TIM_Base_SetConfig+0x114>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d013      	beq.n	8002fbc <TIM_Base_SetConfig+0x40>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9a:	d00f      	beq.n	8002fbc <TIM_Base_SetConfig+0x40>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a3d      	ldr	r2, [pc, #244]	; (8003094 <TIM_Base_SetConfig+0x118>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d00b      	beq.n	8002fbc <TIM_Base_SetConfig+0x40>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a3c      	ldr	r2, [pc, #240]	; (8003098 <TIM_Base_SetConfig+0x11c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d007      	beq.n	8002fbc <TIM_Base_SetConfig+0x40>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a3b      	ldr	r2, [pc, #236]	; (800309c <TIM_Base_SetConfig+0x120>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d003      	beq.n	8002fbc <TIM_Base_SetConfig+0x40>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a3a      	ldr	r2, [pc, #232]	; (80030a0 <TIM_Base_SetConfig+0x124>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d108      	bne.n	8002fce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a2f      	ldr	r2, [pc, #188]	; (8003090 <TIM_Base_SetConfig+0x114>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d02b      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fdc:	d027      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a2c      	ldr	r2, [pc, #176]	; (8003094 <TIM_Base_SetConfig+0x118>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d023      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a2b      	ldr	r2, [pc, #172]	; (8003098 <TIM_Base_SetConfig+0x11c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d01f      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a2a      	ldr	r2, [pc, #168]	; (800309c <TIM_Base_SetConfig+0x120>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d01b      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a29      	ldr	r2, [pc, #164]	; (80030a0 <TIM_Base_SetConfig+0x124>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d017      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a28      	ldr	r2, [pc, #160]	; (80030a4 <TIM_Base_SetConfig+0x128>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a27      	ldr	r2, [pc, #156]	; (80030a8 <TIM_Base_SetConfig+0x12c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00f      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a26      	ldr	r2, [pc, #152]	; (80030ac <TIM_Base_SetConfig+0x130>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00b      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a25      	ldr	r2, [pc, #148]	; (80030b0 <TIM_Base_SetConfig+0x134>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d007      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a24      	ldr	r2, [pc, #144]	; (80030b4 <TIM_Base_SetConfig+0x138>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d003      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a23      	ldr	r2, [pc, #140]	; (80030b8 <TIM_Base_SetConfig+0x13c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d108      	bne.n	8003040 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <TIM_Base_SetConfig+0x114>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d003      	beq.n	8003074 <TIM_Base_SetConfig+0xf8>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a0c      	ldr	r2, [pc, #48]	; (80030a0 <TIM_Base_SetConfig+0x124>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d103      	bne.n	800307c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	615a      	str	r2, [r3, #20]
}
 8003082:	bf00      	nop
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40010000 	.word	0x40010000
 8003094:	40000400 	.word	0x40000400
 8003098:	40000800 	.word	0x40000800
 800309c:	40000c00 	.word	0x40000c00
 80030a0:	40010400 	.word	0x40010400
 80030a4:	40014000 	.word	0x40014000
 80030a8:	40014400 	.word	0x40014400
 80030ac:	40014800 	.word	0x40014800
 80030b0:	40001800 	.word	0x40001800
 80030b4:	40001c00 	.word	0x40001c00
 80030b8:	40002000 	.word	0x40002000

080030bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e03f      	b.n	8003176 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fd fe8e 	bl	8000e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2224      	movs	r2, #36	; 0x24
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003126:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f829 	bl	8003180 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800313c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695a      	ldr	r2, [r3, #20]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800314c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800315c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003184:	b09f      	sub	sp, #124	; 0x7c
 8003186:	af00      	add	r7, sp, #0
 8003188:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800318a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003196:	68d9      	ldr	r1, [r3, #12]
 8003198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	ea40 0301 	orr.w	r3, r0, r1
 80031a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80031ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031c4:	f021 010c 	bic.w	r1, r1, #12
 80031c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031ce:	430b      	orrs	r3, r1
 80031d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031de:	6999      	ldr	r1, [r3, #24]
 80031e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	ea40 0301 	orr.w	r3, r0, r1
 80031e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4bc5      	ldr	r3, [pc, #788]	; (8003504 <UART_SetConfig+0x384>)
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d004      	beq.n	80031fe <UART_SetConfig+0x7e>
 80031f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4bc3      	ldr	r3, [pc, #780]	; (8003508 <UART_SetConfig+0x388>)
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d103      	bne.n	8003206 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031fe:	f7ff fc7d 	bl	8002afc <HAL_RCC_GetPCLK2Freq>
 8003202:	6778      	str	r0, [r7, #116]	; 0x74
 8003204:	e002      	b.n	800320c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003206:	f7ff fc65 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
 800320a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800320c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003214:	f040 80b6 	bne.w	8003384 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800321a:	461c      	mov	r4, r3
 800321c:	f04f 0500 	mov.w	r5, #0
 8003220:	4622      	mov	r2, r4
 8003222:	462b      	mov	r3, r5
 8003224:	1891      	adds	r1, r2, r2
 8003226:	6439      	str	r1, [r7, #64]	; 0x40
 8003228:	415b      	adcs	r3, r3
 800322a:	647b      	str	r3, [r7, #68]	; 0x44
 800322c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003230:	1912      	adds	r2, r2, r4
 8003232:	eb45 0303 	adc.w	r3, r5, r3
 8003236:	f04f 0000 	mov.w	r0, #0
 800323a:	f04f 0100 	mov.w	r1, #0
 800323e:	00d9      	lsls	r1, r3, #3
 8003240:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003244:	00d0      	lsls	r0, r2, #3
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	1911      	adds	r1, r2, r4
 800324c:	6639      	str	r1, [r7, #96]	; 0x60
 800324e:	416b      	adcs	r3, r5
 8003250:	667b      	str	r3, [r7, #100]	; 0x64
 8003252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	461a      	mov	r2, r3
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	1891      	adds	r1, r2, r2
 800325e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003260:	415b      	adcs	r3, r3
 8003262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003264:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003268:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800326c:	f7fc ffc0 	bl	80001f0 <__aeabi_uldivmod>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4ba5      	ldr	r3, [pc, #660]	; (800350c <UART_SetConfig+0x38c>)
 8003276:	fba3 2302 	umull	r2, r3, r3, r2
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	011e      	lsls	r6, r3, #4
 800327e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003280:	461c      	mov	r4, r3
 8003282:	f04f 0500 	mov.w	r5, #0
 8003286:	4622      	mov	r2, r4
 8003288:	462b      	mov	r3, r5
 800328a:	1891      	adds	r1, r2, r2
 800328c:	6339      	str	r1, [r7, #48]	; 0x30
 800328e:	415b      	adcs	r3, r3
 8003290:	637b      	str	r3, [r7, #52]	; 0x34
 8003292:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003296:	1912      	adds	r2, r2, r4
 8003298:	eb45 0303 	adc.w	r3, r5, r3
 800329c:	f04f 0000 	mov.w	r0, #0
 80032a0:	f04f 0100 	mov.w	r1, #0
 80032a4:	00d9      	lsls	r1, r3, #3
 80032a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032aa:	00d0      	lsls	r0, r2, #3
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	1911      	adds	r1, r2, r4
 80032b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80032b4:	416b      	adcs	r3, r5
 80032b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	461a      	mov	r2, r3
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	1891      	adds	r1, r2, r2
 80032c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80032c6:	415b      	adcs	r3, r3
 80032c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80032d2:	f7fc ff8d 	bl	80001f0 <__aeabi_uldivmod>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4b8c      	ldr	r3, [pc, #560]	; (800350c <UART_SetConfig+0x38c>)
 80032dc:	fba3 1302 	umull	r1, r3, r3, r2
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	2164      	movs	r1, #100	; 0x64
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	3332      	adds	r3, #50	; 0x32
 80032ee:	4a87      	ldr	r2, [pc, #540]	; (800350c <UART_SetConfig+0x38c>)
 80032f0:	fba2 2303 	umull	r2, r3, r2, r3
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032fc:	441e      	add	r6, r3
 80032fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003300:	4618      	mov	r0, r3
 8003302:	f04f 0100 	mov.w	r1, #0
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	1894      	adds	r4, r2, r2
 800330c:	623c      	str	r4, [r7, #32]
 800330e:	415b      	adcs	r3, r3
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
 8003312:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003316:	1812      	adds	r2, r2, r0
 8003318:	eb41 0303 	adc.w	r3, r1, r3
 800331c:	f04f 0400 	mov.w	r4, #0
 8003320:	f04f 0500 	mov.w	r5, #0
 8003324:	00dd      	lsls	r5, r3, #3
 8003326:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800332a:	00d4      	lsls	r4, r2, #3
 800332c:	4622      	mov	r2, r4
 800332e:	462b      	mov	r3, r5
 8003330:	1814      	adds	r4, r2, r0
 8003332:	653c      	str	r4, [r7, #80]	; 0x50
 8003334:	414b      	adcs	r3, r1
 8003336:	657b      	str	r3, [r7, #84]	; 0x54
 8003338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	461a      	mov	r2, r3
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	1891      	adds	r1, r2, r2
 8003344:	61b9      	str	r1, [r7, #24]
 8003346:	415b      	adcs	r3, r3
 8003348:	61fb      	str	r3, [r7, #28]
 800334a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800334e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003352:	f7fc ff4d 	bl	80001f0 <__aeabi_uldivmod>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4b6c      	ldr	r3, [pc, #432]	; (800350c <UART_SetConfig+0x38c>)
 800335c:	fba3 1302 	umull	r1, r3, r3, r2
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	2164      	movs	r1, #100	; 0x64
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	3332      	adds	r3, #50	; 0x32
 800336e:	4a67      	ldr	r2, [pc, #412]	; (800350c <UART_SetConfig+0x38c>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	f003 0207 	and.w	r2, r3, #7
 800337a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4432      	add	r2, r6
 8003380:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003382:	e0b9      	b.n	80034f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003386:	461c      	mov	r4, r3
 8003388:	f04f 0500 	mov.w	r5, #0
 800338c:	4622      	mov	r2, r4
 800338e:	462b      	mov	r3, r5
 8003390:	1891      	adds	r1, r2, r2
 8003392:	6139      	str	r1, [r7, #16]
 8003394:	415b      	adcs	r3, r3
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800339c:	1912      	adds	r2, r2, r4
 800339e:	eb45 0303 	adc.w	r3, r5, r3
 80033a2:	f04f 0000 	mov.w	r0, #0
 80033a6:	f04f 0100 	mov.w	r1, #0
 80033aa:	00d9      	lsls	r1, r3, #3
 80033ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033b0:	00d0      	lsls	r0, r2, #3
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	eb12 0804 	adds.w	r8, r2, r4
 80033ba:	eb43 0905 	adc.w	r9, r3, r5
 80033be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f04f 0100 	mov.w	r1, #0
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	008b      	lsls	r3, r1, #2
 80033d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033d6:	0082      	lsls	r2, r0, #2
 80033d8:	4640      	mov	r0, r8
 80033da:	4649      	mov	r1, r9
 80033dc:	f7fc ff08 	bl	80001f0 <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4b49      	ldr	r3, [pc, #292]	; (800350c <UART_SetConfig+0x38c>)
 80033e6:	fba3 2302 	umull	r2, r3, r3, r2
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	011e      	lsls	r6, r3, #4
 80033ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033f0:	4618      	mov	r0, r3
 80033f2:	f04f 0100 	mov.w	r1, #0
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	1894      	adds	r4, r2, r2
 80033fc:	60bc      	str	r4, [r7, #8]
 80033fe:	415b      	adcs	r3, r3
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003406:	1812      	adds	r2, r2, r0
 8003408:	eb41 0303 	adc.w	r3, r1, r3
 800340c:	f04f 0400 	mov.w	r4, #0
 8003410:	f04f 0500 	mov.w	r5, #0
 8003414:	00dd      	lsls	r5, r3, #3
 8003416:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800341a:	00d4      	lsls	r4, r2, #3
 800341c:	4622      	mov	r2, r4
 800341e:	462b      	mov	r3, r5
 8003420:	1814      	adds	r4, r2, r0
 8003422:	64bc      	str	r4, [r7, #72]	; 0x48
 8003424:	414b      	adcs	r3, r1
 8003426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4618      	mov	r0, r3
 800342e:	f04f 0100 	mov.w	r1, #0
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	008b      	lsls	r3, r1, #2
 800343c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003440:	0082      	lsls	r2, r0, #2
 8003442:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003446:	f7fc fed3 	bl	80001f0 <__aeabi_uldivmod>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4b2f      	ldr	r3, [pc, #188]	; (800350c <UART_SetConfig+0x38c>)
 8003450:	fba3 1302 	umull	r1, r3, r3, r2
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	2164      	movs	r1, #100	; 0x64
 8003458:	fb01 f303 	mul.w	r3, r1, r3
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	3332      	adds	r3, #50	; 0x32
 8003462:	4a2a      	ldr	r2, [pc, #168]	; (800350c <UART_SetConfig+0x38c>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800346e:	441e      	add	r6, r3
 8003470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003472:	4618      	mov	r0, r3
 8003474:	f04f 0100 	mov.w	r1, #0
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	1894      	adds	r4, r2, r2
 800347e:	603c      	str	r4, [r7, #0]
 8003480:	415b      	adcs	r3, r3
 8003482:	607b      	str	r3, [r7, #4]
 8003484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003488:	1812      	adds	r2, r2, r0
 800348a:	eb41 0303 	adc.w	r3, r1, r3
 800348e:	f04f 0400 	mov.w	r4, #0
 8003492:	f04f 0500 	mov.w	r5, #0
 8003496:	00dd      	lsls	r5, r3, #3
 8003498:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800349c:	00d4      	lsls	r4, r2, #3
 800349e:	4622      	mov	r2, r4
 80034a0:	462b      	mov	r3, r5
 80034a2:	eb12 0a00 	adds.w	sl, r2, r0
 80034a6:	eb43 0b01 	adc.w	fp, r3, r1
 80034aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f04f 0100 	mov.w	r1, #0
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	008b      	lsls	r3, r1, #2
 80034be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80034c2:	0082      	lsls	r2, r0, #2
 80034c4:	4650      	mov	r0, sl
 80034c6:	4659      	mov	r1, fp
 80034c8:	f7fc fe92 	bl	80001f0 <__aeabi_uldivmod>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4b0e      	ldr	r3, [pc, #56]	; (800350c <UART_SetConfig+0x38c>)
 80034d2:	fba3 1302 	umull	r1, r3, r3, r2
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	2164      	movs	r1, #100	; 0x64
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	3332      	adds	r3, #50	; 0x32
 80034e4:	4a09      	ldr	r2, [pc, #36]	; (800350c <UART_SetConfig+0x38c>)
 80034e6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	f003 020f 	and.w	r2, r3, #15
 80034f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4432      	add	r2, r6
 80034f6:	609a      	str	r2, [r3, #8]
}
 80034f8:	bf00      	nop
 80034fa:	377c      	adds	r7, #124	; 0x7c
 80034fc:	46bd      	mov	sp, r7
 80034fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003502:	bf00      	nop
 8003504:	40011000 	.word	0x40011000
 8003508:	40011400 	.word	0x40011400
 800350c:	51eb851f 	.word	0x51eb851f

08003510 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003510:	b084      	sub	sp, #16
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	f107 001c 	add.w	r0, r7, #28
 800351e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	2b01      	cmp	r3, #1
 8003526:	d122      	bne.n	800356e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800353c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003552:	2b01      	cmp	r3, #1
 8003554:	d105      	bne.n	8003562 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fa82 	bl	8003a6c <USB_CoreReset>
 8003568:	4603      	mov	r3, r0
 800356a:	73fb      	strb	r3, [r7, #15]
 800356c:	e01a      	b.n	80035a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fa76 	bl	8003a6c <USB_CoreReset>
 8003580:	4603      	mov	r3, r0
 8003582:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	639a      	str	r2, [r3, #56]	; 0x38
 8003596:	e005      	b.n	80035a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80035a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d10b      	bne.n	80035c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f043 0206 	orr.w	r2, r3, #6
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f043 0220 	orr.w	r2, r3, #32
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035ce:	b004      	add	sp, #16
 80035d0:	4770      	bx	lr

080035d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f023 0201 	bic.w	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d115      	bne.n	8003642 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003622:	2001      	movs	r0, #1
 8003624:	f7fd fd9c 	bl	8001160 <HAL_Delay>
      ms++;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	3301      	adds	r3, #1
 800362c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fa0e 	bl	8003a50 <USB_GetMode>
 8003634:	4603      	mov	r3, r0
 8003636:	2b01      	cmp	r3, #1
 8003638:	d01e      	beq.n	8003678 <USB_SetCurrentMode+0x84>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2b31      	cmp	r3, #49	; 0x31
 800363e:	d9f0      	bls.n	8003622 <USB_SetCurrentMode+0x2e>
 8003640:	e01a      	b.n	8003678 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d115      	bne.n	8003674 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003654:	2001      	movs	r0, #1
 8003656:	f7fd fd83 	bl	8001160 <HAL_Delay>
      ms++;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3301      	adds	r3, #1
 800365e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f9f5 	bl	8003a50 <USB_GetMode>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <USB_SetCurrentMode+0x84>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b31      	cmp	r3, #49	; 0x31
 8003670:	d9f0      	bls.n	8003654 <USB_SetCurrentMode+0x60>
 8003672:	e001      	b.n	8003678 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e005      	b.n	8003684 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b32      	cmp	r3, #50	; 0x32
 800367c:	d101      	bne.n	8003682 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800368c:	b084      	sub	sp, #16
 800368e:	b580      	push	{r7, lr}
 8003690:	b086      	sub	sp, #24
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800369a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	e009      	b.n	80036c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	3340      	adds	r3, #64	; 0x40
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	2200      	movs	r2, #0
 80036b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	3301      	adds	r3, #1
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b0e      	cmp	r3, #14
 80036c4:	d9f2      	bls.n	80036ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80036c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d11c      	bne.n	8003706 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036da:	f043 0302 	orr.w	r3, r3, #2
 80036de:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	639a      	str	r2, [r3, #56]	; 0x38
 8003704:	e00b      	b.n	800371e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003724:	461a      	mov	r2, r3
 8003726:	2300      	movs	r3, #0
 8003728:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003730:	4619      	mov	r1, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003738:	461a      	mov	r2, r3
 800373a:	680b      	ldr	r3, [r1, #0]
 800373c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800373e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003740:	2b01      	cmp	r3, #1
 8003742:	d10c      	bne.n	800375e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003746:	2b00      	cmp	r3, #0
 8003748:	d104      	bne.n	8003754 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800374a:	2100      	movs	r1, #0
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f945 	bl	80039dc <USB_SetDevSpeed>
 8003752:	e008      	b.n	8003766 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003754:	2101      	movs	r1, #1
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f940 	bl	80039dc <USB_SetDevSpeed>
 800375c:	e003      	b.n	8003766 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800375e:	2103      	movs	r1, #3
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f93b 	bl	80039dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003766:	2110      	movs	r1, #16
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f8f3 	bl	8003954 <USB_FlushTxFifo>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f90f 	bl	800399c <USB_FlushRxFifo>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378e:	461a      	mov	r2, r3
 8003790:	2300      	movs	r3, #0
 8003792:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800379a:	461a      	mov	r2, r3
 800379c:	2300      	movs	r3, #0
 800379e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a6:	461a      	mov	r2, r3
 80037a8:	2300      	movs	r3, #0
 80037aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037ac:	2300      	movs	r3, #0
 80037ae:	613b      	str	r3, [r7, #16]
 80037b0:	e043      	b.n	800383a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037c8:	d118      	bne.n	80037fc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037dc:	461a      	mov	r2, r3
 80037de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	e013      	b.n	800380e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f2:	461a      	mov	r2, r3
 80037f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e008      	b.n	800380e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003808:	461a      	mov	r2, r3
 800380a:	2300      	movs	r3, #0
 800380c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381a:	461a      	mov	r2, r3
 800381c:	2300      	movs	r3, #0
 800381e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800382c:	461a      	mov	r2, r3
 800382e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003832:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	3301      	adds	r3, #1
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	429a      	cmp	r2, r3
 8003840:	d3b7      	bcc.n	80037b2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003842:	2300      	movs	r3, #0
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	e043      	b.n	80038d0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800385a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800385e:	d118      	bne.n	8003892 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10a      	bne.n	800387c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003872:	461a      	mov	r2, r3
 8003874:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	e013      	b.n	80038a4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003888:	461a      	mov	r2, r3
 800388a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	e008      	b.n	80038a4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	015a      	lsls	r2, r3, #5
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4413      	add	r3, r2
 800389a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389e:	461a      	mov	r2, r3
 80038a0:	2300      	movs	r3, #0
 80038a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b0:	461a      	mov	r2, r3
 80038b2:	2300      	movs	r3, #0
 80038b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c2:	461a      	mov	r2, r3
 80038c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	3301      	adds	r3, #1
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d3b7      	bcc.n	8003848 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80038f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d105      	bne.n	800390c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	f043 0210 	orr.w	r2, r3, #16
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699a      	ldr	r2, [r3, #24]
 8003910:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <USB_DevInit+0x2c4>)
 8003912:	4313      	orrs	r3, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	f043 0208 	orr.w	r2, r3, #8
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800392a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800392c:	2b01      	cmp	r3, #1
 800392e:	d107      	bne.n	8003940 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003938:	f043 0304 	orr.w	r3, r3, #4
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003940:	7dfb      	ldrb	r3, [r7, #23]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800394c:	b004      	add	sp, #16
 800394e:	4770      	bx	lr
 8003950:	803c3800 	.word	0x803c3800

08003954 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	019b      	lsls	r3, r3, #6
 8003966:	f043 0220 	orr.w	r2, r3, #32
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	3301      	adds	r3, #1
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	4a08      	ldr	r2, [pc, #32]	; (8003998 <USB_FlushTxFifo+0x44>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e006      	b.n	800398c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b20      	cmp	r3, #32
 8003988:	d0f1      	beq.n	800396e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	00030d40 	.word	0x00030d40

0800399c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2210      	movs	r2, #16
 80039ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3301      	adds	r3, #1
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	4a08      	ldr	r2, [pc, #32]	; (80039d8 <USB_FlushRxFifo+0x3c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d901      	bls.n	80039be <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e006      	b.n	80039cc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	2b10      	cmp	r3, #16
 80039c8:	d0f1      	beq.n	80039ae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	00030d40 	.word	0x00030d40

080039dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	68f9      	ldr	r1, [r7, #12]
 80039f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039fc:	4313      	orrs	r3, r2
 80039fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b085      	sub	sp, #20
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003a28:	f023 0303 	bic.w	r3, r3, #3
 8003a2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a3c:	f043 0302 	orr.w	r3, r3, #2
 8003a40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	4a13      	ldr	r2, [pc, #76]	; (8003acc <USB_CoreReset+0x60>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d901      	bls.n	8003a88 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e01a      	b.n	8003abe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	daf3      	bge.n	8003a78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f043 0201 	orr.w	r2, r3, #1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	4a09      	ldr	r2, [pc, #36]	; (8003acc <USB_CoreReset+0x60>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d901      	bls.n	8003ab0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e006      	b.n	8003abe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d0f1      	beq.n	8003aa0 <USB_CoreReset+0x34>

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	00030d40 	.word	0x00030d40

08003ad0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ae2:	2b84      	cmp	r3, #132	; 0x84
 8003ae4:	d005      	beq.n	8003af2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003ae6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4413      	add	r3, r2
 8003aee:	3303      	adds	r3, #3
 8003af0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003af2:	68fb      	ldr	r3, [r7, #12]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b06:	f3ef 8305 	mrs	r3, IPSR
 8003b0a:	607b      	str	r3, [r7, #4]
  return(result);
 8003b0c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	bf14      	ite	ne
 8003b12:	2301      	movne	r3, #1
 8003b14:	2300      	moveq	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003b28:	f001 f8b8 	bl	8004c9c <vTaskStartScheduler>
  
  return osOK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003b32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b34:	b089      	sub	sp, #36	; 0x24
 8003b36:	af04      	add	r7, sp, #16
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d020      	beq.n	8003b86 <osThreadCreate+0x54>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01c      	beq.n	8003b86 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685c      	ldr	r4, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681d      	ldr	r5, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691e      	ldr	r6, [r3, #16]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff ffb6 	bl	8003ad0 <makeFreeRtosPriority>
 8003b64:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b6e:	9202      	str	r2, [sp, #8]
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	9100      	str	r1, [sp, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4632      	mov	r2, r6
 8003b78:	4629      	mov	r1, r5
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f000 fefa 	bl	8004974 <xTaskCreateStatic>
 8003b80:	4603      	mov	r3, r0
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	e01c      	b.n	8003bc0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685c      	ldr	r4, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b92:	b29e      	uxth	r6, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff ff98 	bl	8003ad0 <makeFreeRtosPriority>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	f107 030c 	add.w	r3, r7, #12
 8003ba6:	9301      	str	r3, [sp, #4]
 8003ba8:	9200      	str	r2, [sp, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	4632      	mov	r2, r6
 8003bae:	4629      	mov	r1, r5
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f000 ff3c 	bl	8004a2e <xTaskCreate>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d001      	beq.n	8003bc0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	e000      	b.n	8003bc2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bca <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003bca:	b590      	push	{r4, r7, lr}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af02      	add	r7, sp, #8
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d011      	beq.n	8003c00 <osMessageCreate+0x36>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00d      	beq.n	8003c00 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6859      	ldr	r1, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2400      	movs	r4, #0
 8003bf6:	9400      	str	r4, [sp, #0]
 8003bf8:	f000 f9e0 	bl	8003fbc <xQueueGenericCreateStatic>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	e008      	b.n	8003c12 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	f000 fa4e 	bl	80040ac <xQueueGenericCreate>
 8003c10:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd90      	pop	{r4, r7, pc}
	...

08003c1c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <osMessagePut+0x1e>
    ticks = 1;
 8003c36:	2301      	movs	r3, #1
 8003c38:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8003c3a:	f7ff ff61 	bl	8003b00 <inHandlerMode>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d018      	beq.n	8003c76 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003c44:	f107 0210 	add.w	r2, r7, #16
 8003c48:	f107 0108 	add.w	r1, r7, #8
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 fb84 	bl	800435c <xQueueGenericSendFromISR>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d001      	beq.n	8003c5e <osMessagePut+0x42>
      return osErrorOS;
 8003c5a:	23ff      	movs	r3, #255	; 0xff
 8003c5c:	e018      	b.n	8003c90 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d014      	beq.n	8003c8e <osMessagePut+0x72>
 8003c64:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <osMessagePut+0x7c>)
 8003c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	f3bf 8f6f 	isb	sy
 8003c74:	e00b      	b.n	8003c8e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003c76:	f107 0108 	add.w	r1, r7, #8
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fa6e 	bl	8004160 <xQueueGenericSend>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d001      	beq.n	8003c8e <osMessagePut+0x72>
      return osErrorOS;
 8003c8a:	23ff      	movs	r3, #255	; 0xff
 8003c8c:	e000      	b.n	8003c90 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	e000ed04 	.word	0xe000ed04

08003c9c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003c9c:	b590      	push	{r4, r7, lr}
 8003c9e:	b08b      	sub	sp, #44	; 0x2c
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003cac:	2300      	movs	r3, #0
 8003cae:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10a      	bne.n	8003ccc <osMessageGet+0x30>
    event.status = osErrorParameter;
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	617b      	str	r3, [r7, #20]
    return event;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	461c      	mov	r4, r3
 8003cbe:	f107 0314 	add.w	r3, r7, #20
 8003cc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003cc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003cca:	e054      	b.n	8003d76 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cda:	d103      	bne.n	8003ce4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce2:	e009      	b.n	8003cf8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d006      	beq.n	8003cf8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <osMessageGet+0x5c>
      ticks = 1;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003cf8:	f7ff ff02 	bl	8003b00 <inHandlerMode>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d01c      	beq.n	8003d3c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003d02:	f107 0220 	add.w	r2, r7, #32
 8003d06:	f107 0314 	add.w	r3, r7, #20
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	68b8      	ldr	r0, [r7, #8]
 8003d10:	f000 fca0 	bl	8004654 <xQueueReceiveFromISR>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d102      	bne.n	8003d20 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8003d1a:	2310      	movs	r3, #16
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	e001      	b.n	8003d24 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d01d      	beq.n	8003d66 <osMessageGet+0xca>
 8003d2a:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <osMessageGet+0xe4>)
 8003d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	e014      	b.n	8003d66 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003d3c:	f107 0314 	add.w	r3, r7, #20
 8003d40:	3304      	adds	r3, #4
 8003d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d44:	4619      	mov	r1, r3
 8003d46:	68b8      	ldr	r0, [r7, #8]
 8003d48:	f000 fba4 	bl	8004494 <xQueueReceive>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d102      	bne.n	8003d58 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003d52:	2310      	movs	r3, #16
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	e006      	b.n	8003d66 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <osMessageGet+0xc6>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e000      	b.n	8003d64 <osMessageGet+0xc8>
 8003d62:	2340      	movs	r3, #64	; 0x40
 8003d64:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	461c      	mov	r4, r3
 8003d6a:	f107 0314 	add.w	r3, r7, #20
 8003d6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	372c      	adds	r7, #44	; 0x2c
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd90      	pop	{r4, r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	e000ed04 	.word	0xe000ed04

08003d84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f103 0208 	add.w	r2, r3, #8
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f04f 32ff 	mov.w	r2, #4294967295
 8003d9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f103 0208 	add.w	r2, r3, #8
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f103 0208 	add.w	r2, r3, #8
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dde:	b480      	push	{r7}
 8003de0:	b085      	sub	sp, #20
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	601a      	str	r2, [r3, #0]
}
 8003e1a:	bf00      	nop
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e26:	b480      	push	{r7}
 8003e28:	b085      	sub	sp, #20
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3c:	d103      	bne.n	8003e46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	e00c      	b.n	8003e60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3308      	adds	r3, #8
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	e002      	b.n	8003e54 <vListInsert+0x2e>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d2f6      	bcs.n	8003e4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	601a      	str	r2, [r3, #0]
}
 8003e8c:	bf00      	nop
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6892      	ldr	r2, [r2, #8]
 8003eae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6852      	ldr	r2, [r2, #4]
 8003eb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d103      	bne.n	8003ecc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	1e5a      	subs	r2, r3, #1
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10a      	bne.n	8003f16 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f12:	bf00      	nop
 8003f14:	e7fe      	b.n	8003f14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f16:	f001 fcf5 	bl	8005904 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f22:	68f9      	ldr	r1, [r7, #12]
 8003f24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f26:	fb01 f303 	mul.w	r3, r1, r3
 8003f2a:	441a      	add	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f46:	3b01      	subs	r3, #1
 8003f48:	68f9      	ldr	r1, [r7, #12]
 8003f4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f4c:	fb01 f303 	mul.w	r3, r1, r3
 8003f50:	441a      	add	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	22ff      	movs	r2, #255	; 0xff
 8003f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	22ff      	movs	r2, #255	; 0xff
 8003f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d114      	bne.n	8003f96 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d01a      	beq.n	8003faa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	3310      	adds	r3, #16
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f001 f8d1 	bl	8005120 <xTaskRemoveFromEventList>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d012      	beq.n	8003faa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f84:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <xQueueGenericReset+0xcc>)
 8003f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	e009      	b.n	8003faa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3310      	adds	r3, #16
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fef2 	bl	8003d84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	3324      	adds	r3, #36	; 0x24
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff feed 	bl	8003d84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003faa:	f001 fcdb 	bl	8005964 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003fae:	2301      	movs	r3, #1
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	e000ed04 	.word	0xe000ed04

08003fbc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08e      	sub	sp, #56	; 0x38
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10a      	bne.n	8003fe6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003fe2:	bf00      	nop
 8003fe4:	e7fe      	b.n	8003fe4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10a      	bne.n	8004002 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ffe:	bf00      	nop
 8004000:	e7fe      	b.n	8004000 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <xQueueGenericCreateStatic+0x52>
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <xQueueGenericCreateStatic+0x56>
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <xQueueGenericCreateStatic+0x58>
 8004012:	2300      	movs	r3, #0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10a      	bne.n	800402e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	623b      	str	r3, [r7, #32]
}
 800402a:	bf00      	nop
 800402c:	e7fe      	b.n	800402c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d102      	bne.n	800403a <xQueueGenericCreateStatic+0x7e>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <xQueueGenericCreateStatic+0x82>
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <xQueueGenericCreateStatic+0x84>
 800403e:	2300      	movs	r3, #0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10a      	bne.n	800405a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	61fb      	str	r3, [r7, #28]
}
 8004056:	bf00      	nop
 8004058:	e7fe      	b.n	8004058 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800405a:	2348      	movs	r3, #72	; 0x48
 800405c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b48      	cmp	r3, #72	; 0x48
 8004062:	d00a      	beq.n	800407a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	61bb      	str	r3, [r7, #24]
}
 8004076:	bf00      	nop
 8004078:	e7fe      	b.n	8004078 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800407a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00d      	beq.n	80040a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800408e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	4613      	mov	r3, r2
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 f83f 	bl	8004120 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3730      	adds	r7, #48	; 0x30
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08a      	sub	sp, #40	; 0x28
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	4613      	mov	r3, r2
 80040b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	613b      	str	r3, [r7, #16]
}
 80040d2:	bf00      	nop
 80040d4:	e7fe      	b.n	80040d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	fb02 f303 	mul.w	r3, r2, r3
 80040de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	3348      	adds	r3, #72	; 0x48
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 fd2f 	bl	8005b48 <pvPortMalloc>
 80040ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d011      	beq.n	8004116 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	3348      	adds	r3, #72	; 0x48
 80040fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004104:	79fa      	ldrb	r2, [r7, #7]
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	4613      	mov	r3, r2
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	68b9      	ldr	r1, [r7, #8]
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f805 	bl	8004120 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004116:	69bb      	ldr	r3, [r7, #24]
	}
 8004118:	4618      	mov	r0, r3
 800411a:	3720      	adds	r7, #32
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d103      	bne.n	800413c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e002      	b.n	8004142 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800414e:	2101      	movs	r1, #1
 8004150:	69b8      	ldr	r0, [r7, #24]
 8004152:	f7ff fecb 	bl	8003eec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
	...

08004160 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08e      	sub	sp, #56	; 0x38
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800416e:	2300      	movs	r3, #0
 8004170:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <xQueueGenericSend+0x32>
	__asm volatile
 800417c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800418e:	bf00      	nop
 8004190:	e7fe      	b.n	8004190 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d103      	bne.n	80041a0 <xQueueGenericSend+0x40>
 8004198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <xQueueGenericSend+0x44>
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <xQueueGenericSend+0x46>
 80041a4:	2300      	movs	r3, #0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10a      	bne.n	80041c0 <xQueueGenericSend+0x60>
	__asm volatile
 80041aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80041bc:	bf00      	nop
 80041be:	e7fe      	b.n	80041be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d103      	bne.n	80041ce <xQueueGenericSend+0x6e>
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <xQueueGenericSend+0x72>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e000      	b.n	80041d4 <xQueueGenericSend+0x74>
 80041d2:	2300      	movs	r3, #0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <xQueueGenericSend+0x8e>
	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	623b      	str	r3, [r7, #32]
}
 80041ea:	bf00      	nop
 80041ec:	e7fe      	b.n	80041ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041ee:	f001 f953 	bl	8005498 <xTaskGetSchedulerState>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d102      	bne.n	80041fe <xQueueGenericSend+0x9e>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <xQueueGenericSend+0xa2>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <xQueueGenericSend+0xa4>
 8004202:	2300      	movs	r3, #0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10a      	bne.n	800421e <xQueueGenericSend+0xbe>
	__asm volatile
 8004208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	61fb      	str	r3, [r7, #28]
}
 800421a:	bf00      	nop
 800421c:	e7fe      	b.n	800421c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800421e:	f001 fb71 	bl	8005904 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422a:	429a      	cmp	r2, r3
 800422c:	d302      	bcc.n	8004234 <xQueueGenericSend+0xd4>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b02      	cmp	r3, #2
 8004232:	d129      	bne.n	8004288 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	68b9      	ldr	r1, [r7, #8]
 8004238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800423a:	f000 fa8b 	bl	8004754 <prvCopyDataToQueue>
 800423e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	2b00      	cmp	r3, #0
 8004246:	d010      	beq.n	800426a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	3324      	adds	r3, #36	; 0x24
 800424c:	4618      	mov	r0, r3
 800424e:	f000 ff67 	bl	8005120 <xTaskRemoveFromEventList>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d013      	beq.n	8004280 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004258:	4b3f      	ldr	r3, [pc, #252]	; (8004358 <xQueueGenericSend+0x1f8>)
 800425a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	e00a      	b.n	8004280 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d007      	beq.n	8004280 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004270:	4b39      	ldr	r3, [pc, #228]	; (8004358 <xQueueGenericSend+0x1f8>)
 8004272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004280:	f001 fb70 	bl	8005964 <vPortExitCritical>
				return pdPASS;
 8004284:	2301      	movs	r3, #1
 8004286:	e063      	b.n	8004350 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d103      	bne.n	8004296 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800428e:	f001 fb69 	bl	8005964 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004292:	2300      	movs	r3, #0
 8004294:	e05c      	b.n	8004350 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004298:	2b00      	cmp	r3, #0
 800429a:	d106      	bne.n	80042aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800429c:	f107 0314 	add.w	r3, r7, #20
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 ff9f 	bl	80051e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042a6:	2301      	movs	r3, #1
 80042a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042aa:	f001 fb5b 	bl	8005964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042ae:	f000 fd55 	bl	8004d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042b2:	f001 fb27 	bl	8005904 <vPortEnterCritical>
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042bc:	b25b      	sxtb	r3, r3
 80042be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c2:	d103      	bne.n	80042cc <xQueueGenericSend+0x16c>
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042d2:	b25b      	sxtb	r3, r3
 80042d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d8:	d103      	bne.n	80042e2 <xQueueGenericSend+0x182>
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042e2:	f001 fb3f 	bl	8005964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042e6:	1d3a      	adds	r2, r7, #4
 80042e8:	f107 0314 	add.w	r3, r7, #20
 80042ec:	4611      	mov	r1, r2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 ff8e 	bl	8005210 <xTaskCheckForTimeOut>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d124      	bne.n	8004344 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042fc:	f000 fb22 	bl	8004944 <prvIsQueueFull>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d018      	beq.n	8004338 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	3310      	adds	r3, #16
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	4611      	mov	r1, r2
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fee2 	bl	80050d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004316:	f000 faad 	bl	8004874 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800431a:	f000 fd2d 	bl	8004d78 <xTaskResumeAll>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	f47f af7c 	bne.w	800421e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004326:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <xQueueGenericSend+0x1f8>)
 8004328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	e772      	b.n	800421e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800433a:	f000 fa9b 	bl	8004874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800433e:	f000 fd1b 	bl	8004d78 <xTaskResumeAll>
 8004342:	e76c      	b.n	800421e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004346:	f000 fa95 	bl	8004874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800434a:	f000 fd15 	bl	8004d78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800434e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004350:	4618      	mov	r0, r3
 8004352:	3738      	adds	r7, #56	; 0x38
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	e000ed04 	.word	0xe000ed04

0800435c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b090      	sub	sp, #64	; 0x40
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800436e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10a      	bne.n	800438a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004386:	bf00      	nop
 8004388:	e7fe      	b.n	8004388 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d103      	bne.n	8004398 <xQueueGenericSendFromISR+0x3c>
 8004390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <xQueueGenericSendFromISR+0x40>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <xQueueGenericSendFromISR+0x42>
 800439c:	2300      	movs	r3, #0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10a      	bne.n	80043b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043b4:	bf00      	nop
 80043b6:	e7fe      	b.n	80043b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d103      	bne.n	80043c6 <xQueueGenericSendFromISR+0x6a>
 80043be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <xQueueGenericSendFromISR+0x6e>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <xQueueGenericSendFromISR+0x70>
 80043ca:	2300      	movs	r3, #0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80043d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	623b      	str	r3, [r7, #32]
}
 80043e2:	bf00      	nop
 80043e4:	e7fe      	b.n	80043e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043e6:	f001 fb6f 	bl	8005ac8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043ea:	f3ef 8211 	mrs	r2, BASEPRI
 80043ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	61fa      	str	r2, [r7, #28]
 8004400:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004402:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004404:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800440a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440e:	429a      	cmp	r2, r3
 8004410:	d302      	bcc.n	8004418 <xQueueGenericSendFromISR+0xbc>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b02      	cmp	r3, #2
 8004416:	d12f      	bne.n	8004478 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800441e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004426:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	68b9      	ldr	r1, [r7, #8]
 800442c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800442e:	f000 f991 	bl	8004754 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004432:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443a:	d112      	bne.n	8004462 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800443c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	2b00      	cmp	r3, #0
 8004442:	d016      	beq.n	8004472 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004446:	3324      	adds	r3, #36	; 0x24
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fe69 	bl	8005120 <xTaskRemoveFromEventList>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00e      	beq.n	8004472 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00b      	beq.n	8004472 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	e007      	b.n	8004472 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004462:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004466:	3301      	adds	r3, #1
 8004468:	b2db      	uxtb	r3, r3
 800446a:	b25a      	sxtb	r2, r3
 800446c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004472:	2301      	movs	r3, #1
 8004474:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004476:	e001      	b.n	800447c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004478:	2300      	movs	r3, #0
 800447a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800447c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004486:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800448a:	4618      	mov	r0, r3
 800448c:	3740      	adds	r7, #64	; 0x40
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08c      	sub	sp, #48	; 0x30
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044a0:	2300      	movs	r3, #0
 80044a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10a      	bne.n	80044c4 <xQueueReceive+0x30>
	__asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	623b      	str	r3, [r7, #32]
}
 80044c0:	bf00      	nop
 80044c2:	e7fe      	b.n	80044c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d103      	bne.n	80044d2 <xQueueReceive+0x3e>
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <xQueueReceive+0x42>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <xQueueReceive+0x44>
 80044d6:	2300      	movs	r3, #0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10a      	bne.n	80044f2 <xQueueReceive+0x5e>
	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	61fb      	str	r3, [r7, #28]
}
 80044ee:	bf00      	nop
 80044f0:	e7fe      	b.n	80044f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044f2:	f000 ffd1 	bl	8005498 <xTaskGetSchedulerState>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d102      	bne.n	8004502 <xQueueReceive+0x6e>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <xQueueReceive+0x72>
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <xQueueReceive+0x74>
 8004506:	2300      	movs	r3, #0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10a      	bne.n	8004522 <xQueueReceive+0x8e>
	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	61bb      	str	r3, [r7, #24]
}
 800451e:	bf00      	nop
 8004520:	e7fe      	b.n	8004520 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004522:	f001 f9ef 	bl	8005904 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	2b00      	cmp	r3, #0
 8004530:	d01f      	beq.n	8004572 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004532:	68b9      	ldr	r1, [r7, #8]
 8004534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004536:	f000 f977 	bl	8004828 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	1e5a      	subs	r2, r3, #1
 800453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004540:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00f      	beq.n	800456a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800454a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454c:	3310      	adds	r3, #16
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fde6 	bl	8005120 <xTaskRemoveFromEventList>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800455a:	4b3d      	ldr	r3, [pc, #244]	; (8004650 <xQueueReceive+0x1bc>)
 800455c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800456a:	f001 f9fb 	bl	8005964 <vPortExitCritical>
				return pdPASS;
 800456e:	2301      	movs	r3, #1
 8004570:	e069      	b.n	8004646 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d103      	bne.n	8004580 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004578:	f001 f9f4 	bl	8005964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800457c:	2300      	movs	r3, #0
 800457e:	e062      	b.n	8004646 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004586:	f107 0310 	add.w	r3, r7, #16
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fe2a 	bl	80051e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004590:	2301      	movs	r3, #1
 8004592:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004594:	f001 f9e6 	bl	8005964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004598:	f000 fbe0 	bl	8004d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800459c:	f001 f9b2 	bl	8005904 <vPortEnterCritical>
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045a6:	b25b      	sxtb	r3, r3
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d103      	bne.n	80045b6 <xQueueReceive+0x122>
 80045ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045bc:	b25b      	sxtb	r3, r3
 80045be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c2:	d103      	bne.n	80045cc <xQueueReceive+0x138>
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045cc:	f001 f9ca 	bl	8005964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045d0:	1d3a      	adds	r2, r7, #4
 80045d2:	f107 0310 	add.w	r3, r7, #16
 80045d6:	4611      	mov	r1, r2
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fe19 	bl	8005210 <xTaskCheckForTimeOut>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d123      	bne.n	800462c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045e6:	f000 f997 	bl	8004918 <prvIsQueueEmpty>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d017      	beq.n	8004620 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	3324      	adds	r3, #36	; 0x24
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	4611      	mov	r1, r2
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 fd6d 	bl	80050d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004600:	f000 f938 	bl	8004874 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004604:	f000 fbb8 	bl	8004d78 <xTaskResumeAll>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d189      	bne.n	8004522 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800460e:	4b10      	ldr	r3, [pc, #64]	; (8004650 <xQueueReceive+0x1bc>)
 8004610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	e780      	b.n	8004522 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004622:	f000 f927 	bl	8004874 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004626:	f000 fba7 	bl	8004d78 <xTaskResumeAll>
 800462a:	e77a      	b.n	8004522 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800462c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800462e:	f000 f921 	bl	8004874 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004632:	f000 fba1 	bl	8004d78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004638:	f000 f96e 	bl	8004918 <prvIsQueueEmpty>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	f43f af6f 	beq.w	8004522 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004644:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004646:	4618      	mov	r0, r3
 8004648:	3730      	adds	r7, #48	; 0x30
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	e000ed04 	.word	0xe000ed04

08004654 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08e      	sub	sp, #56	; 0x38
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10a      	bne.n	8004680 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	623b      	str	r3, [r7, #32]
}
 800467c:	bf00      	nop
 800467e:	e7fe      	b.n	800467e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d103      	bne.n	800468e <xQueueReceiveFromISR+0x3a>
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <xQueueReceiveFromISR+0x3e>
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <xQueueReceiveFromISR+0x40>
 8004692:	2300      	movs	r3, #0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10a      	bne.n	80046ae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	61fb      	str	r3, [r7, #28]
}
 80046aa:	bf00      	nop
 80046ac:	e7fe      	b.n	80046ac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046ae:	f001 fa0b 	bl	8005ac8 <vPortValidateInterruptPriority>
	__asm volatile
 80046b2:	f3ef 8211 	mrs	r2, BASEPRI
 80046b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	61ba      	str	r2, [r7, #24]
 80046c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80046ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d02f      	beq.n	800473a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046e8:	f000 f89e 	bl	8004828 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ee:	1e5a      	subs	r2, r3, #1
 80046f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80046f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fc:	d112      	bne.n	8004724 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d016      	beq.n	8004734 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	3310      	adds	r3, #16
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fd08 	bl	8005120 <xTaskRemoveFromEventList>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00e      	beq.n	8004734 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00b      	beq.n	8004734 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	e007      	b.n	8004734 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004728:	3301      	adds	r3, #1
 800472a:	b2db      	uxtb	r3, r3
 800472c:	b25a      	sxtb	r2, r3
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004734:	2301      	movs	r3, #1
 8004736:	637b      	str	r3, [r7, #52]	; 0x34
 8004738:	e001      	b.n	800473e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800473a:	2300      	movs	r3, #0
 800473c:	637b      	str	r3, [r7, #52]	; 0x34
 800473e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004740:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f383 8811 	msr	BASEPRI, r3
}
 8004748:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800474a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800474c:	4618      	mov	r0, r3
 800474e:	3738      	adds	r7, #56	; 0x38
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10d      	bne.n	800478e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d14d      	bne.n	8004816 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fea8 	bl	80054d4 <xTaskPriorityDisinherit>
 8004784:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	609a      	str	r2, [r3, #8]
 800478c:	e043      	b.n	8004816 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d119      	bne.n	80047c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6858      	ldr	r0, [r3, #4]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	461a      	mov	r2, r3
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	f001 fbe0 	bl	8005f64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	441a      	add	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d32b      	bcc.n	8004816 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	605a      	str	r2, [r3, #4]
 80047c6:	e026      	b.n	8004816 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	68d8      	ldr	r0, [r3, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	461a      	mov	r2, r3
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	f001 fbc6 	bl	8005f64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	425b      	negs	r3, r3
 80047e2:	441a      	add	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d207      	bcs.n	8004804 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	425b      	negs	r3, r3
 80047fe:	441a      	add	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b02      	cmp	r3, #2
 8004808:	d105      	bne.n	8004816 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	3b01      	subs	r3, #1
 8004814:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800481e:	697b      	ldr	r3, [r7, #20]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	d018      	beq.n	800486c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	441a      	add	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	429a      	cmp	r2, r3
 8004852:	d303      	bcc.n	800485c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68d9      	ldr	r1, [r3, #12]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	461a      	mov	r2, r3
 8004866:	6838      	ldr	r0, [r7, #0]
 8004868:	f001 fb7c 	bl	8005f64 <memcpy>
	}
}
 800486c:	bf00      	nop
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800487c:	f001 f842 	bl	8005904 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004886:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004888:	e011      	b.n	80048ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	2b00      	cmp	r3, #0
 8004890:	d012      	beq.n	80048b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3324      	adds	r3, #36	; 0x24
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fc42 	bl	8005120 <xTaskRemoveFromEventList>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80048a2:	f000 fd17 	bl	80052d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	dce9      	bgt.n	800488a <prvUnlockQueue+0x16>
 80048b6:	e000      	b.n	80048ba <prvUnlockQueue+0x46>
					break;
 80048b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	22ff      	movs	r2, #255	; 0xff
 80048be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80048c2:	f001 f84f 	bl	8005964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048c6:	f001 f81d 	bl	8005904 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048d2:	e011      	b.n	80048f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d012      	beq.n	8004902 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3310      	adds	r3, #16
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fc1d 	bl	8005120 <xTaskRemoveFromEventList>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048ec:	f000 fcf2 	bl	80052d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048f0:	7bbb      	ldrb	r3, [r7, #14]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	dce9      	bgt.n	80048d4 <prvUnlockQueue+0x60>
 8004900:	e000      	b.n	8004904 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004902:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	22ff      	movs	r2, #255	; 0xff
 8004908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800490c:	f001 f82a 	bl	8005964 <vPortExitCritical>
}
 8004910:	bf00      	nop
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004920:	f000 fff0 	bl	8005904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800492c:	2301      	movs	r3, #1
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	e001      	b.n	8004936 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004936:	f001 f815 	bl	8005964 <vPortExitCritical>

	return xReturn;
 800493a:	68fb      	ldr	r3, [r7, #12]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800494c:	f000 ffda 	bl	8005904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004958:	429a      	cmp	r2, r3
 800495a:	d102      	bne.n	8004962 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800495c:	2301      	movs	r3, #1
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	e001      	b.n	8004966 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004966:	f000 fffd 	bl	8005964 <vPortExitCritical>

	return xReturn;
 800496a:	68fb      	ldr	r3, [r7, #12]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08e      	sub	sp, #56	; 0x38
 8004978:	af04      	add	r7, sp, #16
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10a      	bne.n	800499e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	623b      	str	r3, [r7, #32]
}
 800499a:	bf00      	nop
 800499c:	e7fe      	b.n	800499c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <xTaskCreateStatic+0x46>
	__asm volatile
 80049a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	61fb      	str	r3, [r7, #28]
}
 80049b6:	bf00      	nop
 80049b8:	e7fe      	b.n	80049b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80049ba:	2354      	movs	r3, #84	; 0x54
 80049bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2b54      	cmp	r3, #84	; 0x54
 80049c2:	d00a      	beq.n	80049da <xTaskCreateStatic+0x66>
	__asm volatile
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	61bb      	str	r3, [r7, #24]
}
 80049d6:	bf00      	nop
 80049d8:	e7fe      	b.n	80049d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80049da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80049dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d01e      	beq.n	8004a20 <xTaskCreateStatic+0xac>
 80049e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01b      	beq.n	8004a20 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	2202      	movs	r2, #2
 80049f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80049fa:	2300      	movs	r3, #0
 80049fc:	9303      	str	r3, [sp, #12]
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	9302      	str	r3, [sp, #8]
 8004a02:	f107 0314 	add.w	r3, r7, #20
 8004a06:	9301      	str	r3, [sp, #4]
 8004a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	68b9      	ldr	r1, [r7, #8]
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 f850 	bl	8004ab8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a1a:	f000 f8d5 	bl	8004bc8 <prvAddNewTaskToReadyList>
 8004a1e:	e001      	b.n	8004a24 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a24:	697b      	ldr	r3, [r7, #20]
	}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3728      	adds	r7, #40	; 0x28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b08c      	sub	sp, #48	; 0x30
 8004a32:	af04      	add	r7, sp, #16
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	603b      	str	r3, [r7, #0]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a3e:	88fb      	ldrh	r3, [r7, #6]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4618      	mov	r0, r3
 8004a44:	f001 f880 	bl	8005b48 <pvPortMalloc>
 8004a48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00e      	beq.n	8004a6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a50:	2054      	movs	r0, #84	; 0x54
 8004a52:	f001 f879 	bl	8005b48 <pvPortMalloc>
 8004a56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	631a      	str	r2, [r3, #48]	; 0x30
 8004a64:	e005      	b.n	8004a72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004a66:	6978      	ldr	r0, [r7, #20]
 8004a68:	f001 f93a 	bl	8005ce0 <vPortFree>
 8004a6c:	e001      	b.n	8004a72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d017      	beq.n	8004aa8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a80:	88fa      	ldrh	r2, [r7, #6]
 8004a82:	2300      	movs	r3, #0
 8004a84:	9303      	str	r3, [sp, #12]
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	9302      	str	r3, [sp, #8]
 8004a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8c:	9301      	str	r3, [sp, #4]
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68b9      	ldr	r1, [r7, #8]
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 f80e 	bl	8004ab8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a9c:	69f8      	ldr	r0, [r7, #28]
 8004a9e:	f000 f893 	bl	8004bc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	61bb      	str	r3, [r7, #24]
 8004aa6:	e002      	b.n	8004aae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8004aac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004aae:	69bb      	ldr	r3, [r7, #24]
	}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3720      	adds	r7, #32
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	f023 0307 	bic.w	r3, r3, #7
 8004ade:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	617b      	str	r3, [r7, #20]
}
 8004afc:	bf00      	nop
 8004afe:	e7fe      	b.n	8004afe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d01f      	beq.n	8004b46 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b06:	2300      	movs	r3, #0
 8004b08:	61fb      	str	r3, [r7, #28]
 8004b0a:	e012      	b.n	8004b32 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	4413      	add	r3, r2
 8004b12:	7819      	ldrb	r1, [r3, #0]
 8004b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	4413      	add	r3, r2
 8004b1a:	3334      	adds	r3, #52	; 0x34
 8004b1c:	460a      	mov	r2, r1
 8004b1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d006      	beq.n	8004b3a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	61fb      	str	r3, [r7, #28]
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	2b0f      	cmp	r3, #15
 8004b36:	d9e9      	bls.n	8004b0c <prvInitialiseNewTask+0x54>
 8004b38:	e000      	b.n	8004b3c <prvInitialiseNewTask+0x84>
			{
				break;
 8004b3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b44:	e003      	b.n	8004b4e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	2b06      	cmp	r3, #6
 8004b52:	d901      	bls.n	8004b58 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b54:	2306      	movs	r3, #6
 8004b56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b62:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	2200      	movs	r2, #0
 8004b68:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff f928 	bl	8003dc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b76:	3318      	adds	r3, #24
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff f923 	bl	8003dc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	f1c3 0207 	rsb	r2, r3, #7
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b96:	2200      	movs	r2, #0
 8004b98:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	68f9      	ldr	r1, [r7, #12]
 8004ba6:	69b8      	ldr	r0, [r7, #24]
 8004ba8:	f000 fd80 	bl	80056ac <pxPortInitialiseStack>
 8004bac:	4602      	mov	r2, r0
 8004bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bbe:	bf00      	nop
 8004bc0:	3720      	adds	r7, #32
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004bd0:	f000 fe98 	bl	8005904 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004bd4:	4b2a      	ldr	r3, [pc, #168]	; (8004c80 <prvAddNewTaskToReadyList+0xb8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	4a29      	ldr	r2, [pc, #164]	; (8004c80 <prvAddNewTaskToReadyList+0xb8>)
 8004bdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004bde:	4b29      	ldr	r3, [pc, #164]	; (8004c84 <prvAddNewTaskToReadyList+0xbc>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004be6:	4a27      	ldr	r2, [pc, #156]	; (8004c84 <prvAddNewTaskToReadyList+0xbc>)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004bec:	4b24      	ldr	r3, [pc, #144]	; (8004c80 <prvAddNewTaskToReadyList+0xb8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d110      	bne.n	8004c16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004bf4:	f000 fb92 	bl	800531c <prvInitialiseTaskLists>
 8004bf8:	e00d      	b.n	8004c16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004bfa:	4b23      	ldr	r3, [pc, #140]	; (8004c88 <prvAddNewTaskToReadyList+0xc0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d109      	bne.n	8004c16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c02:	4b20      	ldr	r3, [pc, #128]	; (8004c84 <prvAddNewTaskToReadyList+0xbc>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d802      	bhi.n	8004c16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c10:	4a1c      	ldr	r2, [pc, #112]	; (8004c84 <prvAddNewTaskToReadyList+0xbc>)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c16:	4b1d      	ldr	r3, [pc, #116]	; (8004c8c <prvAddNewTaskToReadyList+0xc4>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	4a1b      	ldr	r2, [pc, #108]	; (8004c8c <prvAddNewTaskToReadyList+0xc4>)
 8004c1e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c24:	2201      	movs	r2, #1
 8004c26:	409a      	lsls	r2, r3
 8004c28:	4b19      	ldr	r3, [pc, #100]	; (8004c90 <prvAddNewTaskToReadyList+0xc8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	4a18      	ldr	r2, [pc, #96]	; (8004c90 <prvAddNewTaskToReadyList+0xc8>)
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c36:	4613      	mov	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4a15      	ldr	r2, [pc, #84]	; (8004c94 <prvAddNewTaskToReadyList+0xcc>)
 8004c40:	441a      	add	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3304      	adds	r3, #4
 8004c46:	4619      	mov	r1, r3
 8004c48:	4610      	mov	r0, r2
 8004c4a:	f7ff f8c8 	bl	8003dde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c4e:	f000 fe89 	bl	8005964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c52:	4b0d      	ldr	r3, [pc, #52]	; (8004c88 <prvAddNewTaskToReadyList+0xc0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00e      	beq.n	8004c78 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <prvAddNewTaskToReadyList+0xbc>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d207      	bcs.n	8004c78 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c68:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <prvAddNewTaskToReadyList+0xd0>)
 8004c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c78:	bf00      	nop
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20000380 	.word	0x20000380
 8004c84:	20000280 	.word	0x20000280
 8004c88:	2000038c 	.word	0x2000038c
 8004c8c:	2000039c 	.word	0x2000039c
 8004c90:	20000388 	.word	0x20000388
 8004c94:	20000284 	.word	0x20000284
 8004c98:	e000ed04 	.word	0xe000ed04

08004c9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08a      	sub	sp, #40	; 0x28
 8004ca0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004caa:	463a      	mov	r2, r7
 8004cac:	1d39      	adds	r1, r7, #4
 8004cae:	f107 0308 	add.w	r3, r7, #8
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fb fc18 	bl	80004e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004cb8:	6839      	ldr	r1, [r7, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	9202      	str	r2, [sp, #8]
 8004cc0:	9301      	str	r3, [sp, #4]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	460a      	mov	r2, r1
 8004cca:	491e      	ldr	r1, [pc, #120]	; (8004d44 <vTaskStartScheduler+0xa8>)
 8004ccc:	481e      	ldr	r0, [pc, #120]	; (8004d48 <vTaskStartScheduler+0xac>)
 8004cce:	f7ff fe51 	bl	8004974 <xTaskCreateStatic>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	4a1d      	ldr	r2, [pc, #116]	; (8004d4c <vTaskStartScheduler+0xb0>)
 8004cd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004cd8:	4b1c      	ldr	r3, [pc, #112]	; (8004d4c <vTaskStartScheduler+0xb0>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	e001      	b.n	8004cea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d116      	bne.n	8004d1e <vTaskStartScheduler+0x82>
	__asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	613b      	str	r3, [r7, #16]
}
 8004d02:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d04:	4b12      	ldr	r3, [pc, #72]	; (8004d50 <vTaskStartScheduler+0xb4>)
 8004d06:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d0c:	4b11      	ldr	r3, [pc, #68]	; (8004d54 <vTaskStartScheduler+0xb8>)
 8004d0e:	2201      	movs	r2, #1
 8004d10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d12:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <vTaskStartScheduler+0xbc>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d18:	f000 fd52 	bl	80057c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d1c:	e00e      	b.n	8004d3c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d10a      	bne.n	8004d3c <vTaskStartScheduler+0xa0>
	__asm volatile
 8004d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	60fb      	str	r3, [r7, #12]
}
 8004d38:	bf00      	nop
 8004d3a:	e7fe      	b.n	8004d3a <vTaskStartScheduler+0x9e>
}
 8004d3c:	bf00      	nop
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	08006030 	.word	0x08006030
 8004d48:	080052ed 	.word	0x080052ed
 8004d4c:	200003a4 	.word	0x200003a4
 8004d50:	200003a0 	.word	0x200003a0
 8004d54:	2000038c 	.word	0x2000038c
 8004d58:	20000384 	.word	0x20000384

08004d5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d60:	4b04      	ldr	r3, [pc, #16]	; (8004d74 <vTaskSuspendAll+0x18>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3301      	adds	r3, #1
 8004d66:	4a03      	ldr	r2, [pc, #12]	; (8004d74 <vTaskSuspendAll+0x18>)
 8004d68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d6a:	bf00      	nop
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	200003a8 	.word	0x200003a8

08004d78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d86:	4b41      	ldr	r3, [pc, #260]	; (8004e8c <xTaskResumeAll+0x114>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10a      	bne.n	8004da4 <xTaskResumeAll+0x2c>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	603b      	str	r3, [r7, #0]
}
 8004da0:	bf00      	nop
 8004da2:	e7fe      	b.n	8004da2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004da4:	f000 fdae 	bl	8005904 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004da8:	4b38      	ldr	r3, [pc, #224]	; (8004e8c <xTaskResumeAll+0x114>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	4a37      	ldr	r2, [pc, #220]	; (8004e8c <xTaskResumeAll+0x114>)
 8004db0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004db2:	4b36      	ldr	r3, [pc, #216]	; (8004e8c <xTaskResumeAll+0x114>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d161      	bne.n	8004e7e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004dba:	4b35      	ldr	r3, [pc, #212]	; (8004e90 <xTaskResumeAll+0x118>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d05d      	beq.n	8004e7e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dc2:	e02e      	b.n	8004e22 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dc4:	4b33      	ldr	r3, [pc, #204]	; (8004e94 <xTaskResumeAll+0x11c>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3318      	adds	r3, #24
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7ff f861 	bl	8003e98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff f85c 	bl	8003e98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	2201      	movs	r2, #1
 8004de6:	409a      	lsls	r2, r3
 8004de8:	4b2b      	ldr	r3, [pc, #172]	; (8004e98 <xTaskResumeAll+0x120>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	4a2a      	ldr	r2, [pc, #168]	; (8004e98 <xTaskResumeAll+0x120>)
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df6:	4613      	mov	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4a27      	ldr	r2, [pc, #156]	; (8004e9c <xTaskResumeAll+0x124>)
 8004e00:	441a      	add	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3304      	adds	r3, #4
 8004e06:	4619      	mov	r1, r3
 8004e08:	4610      	mov	r0, r2
 8004e0a:	f7fe ffe8 	bl	8003dde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e12:	4b23      	ldr	r3, [pc, #140]	; (8004ea0 <xTaskResumeAll+0x128>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d302      	bcc.n	8004e22 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004e1c:	4b21      	ldr	r3, [pc, #132]	; (8004ea4 <xTaskResumeAll+0x12c>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e22:	4b1c      	ldr	r3, [pc, #112]	; (8004e94 <xTaskResumeAll+0x11c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1cc      	bne.n	8004dc4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e30:	f000 fb12 	bl	8005458 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e34:	4b1c      	ldr	r3, [pc, #112]	; (8004ea8 <xTaskResumeAll+0x130>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d010      	beq.n	8004e62 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e40:	f000 f836 	bl	8004eb0 <xTaskIncrementTick>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004e4a:	4b16      	ldr	r3, [pc, #88]	; (8004ea4 <xTaskResumeAll+0x12c>)
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1f1      	bne.n	8004e40 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004e5c:	4b12      	ldr	r3, [pc, #72]	; (8004ea8 <xTaskResumeAll+0x130>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e62:	4b10      	ldr	r3, [pc, #64]	; (8004ea4 <xTaskResumeAll+0x12c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d009      	beq.n	8004e7e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e6e:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <xTaskResumeAll+0x134>)
 8004e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e7e:	f000 fd71 	bl	8005964 <vPortExitCritical>

	return xAlreadyYielded;
 8004e82:	68bb      	ldr	r3, [r7, #8]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	200003a8 	.word	0x200003a8
 8004e90:	20000380 	.word	0x20000380
 8004e94:	20000340 	.word	0x20000340
 8004e98:	20000388 	.word	0x20000388
 8004e9c:	20000284 	.word	0x20000284
 8004ea0:	20000280 	.word	0x20000280
 8004ea4:	20000394 	.word	0x20000394
 8004ea8:	20000390 	.word	0x20000390
 8004eac:	e000ed04 	.word	0xe000ed04

08004eb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eba:	4b4e      	ldr	r3, [pc, #312]	; (8004ff4 <xTaskIncrementTick+0x144>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f040 808e 	bne.w	8004fe0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ec4:	4b4c      	ldr	r3, [pc, #304]	; (8004ff8 <xTaskIncrementTick+0x148>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ecc:	4a4a      	ldr	r2, [pc, #296]	; (8004ff8 <xTaskIncrementTick+0x148>)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d120      	bne.n	8004f1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ed8:	4b48      	ldr	r3, [pc, #288]	; (8004ffc <xTaskIncrementTick+0x14c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	603b      	str	r3, [r7, #0]
}
 8004ef4:	bf00      	nop
 8004ef6:	e7fe      	b.n	8004ef6 <xTaskIncrementTick+0x46>
 8004ef8:	4b40      	ldr	r3, [pc, #256]	; (8004ffc <xTaskIncrementTick+0x14c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	4b40      	ldr	r3, [pc, #256]	; (8005000 <xTaskIncrementTick+0x150>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a3e      	ldr	r2, [pc, #248]	; (8004ffc <xTaskIncrementTick+0x14c>)
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	4a3e      	ldr	r2, [pc, #248]	; (8005000 <xTaskIncrementTick+0x150>)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	4b3d      	ldr	r3, [pc, #244]	; (8005004 <xTaskIncrementTick+0x154>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3301      	adds	r3, #1
 8004f12:	4a3c      	ldr	r2, [pc, #240]	; (8005004 <xTaskIncrementTick+0x154>)
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	f000 fa9f 	bl	8005458 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f1a:	4b3b      	ldr	r3, [pc, #236]	; (8005008 <xTaskIncrementTick+0x158>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d348      	bcc.n	8004fb6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f24:	4b35      	ldr	r3, [pc, #212]	; (8004ffc <xTaskIncrementTick+0x14c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d104      	bne.n	8004f38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f2e:	4b36      	ldr	r3, [pc, #216]	; (8005008 <xTaskIncrementTick+0x158>)
 8004f30:	f04f 32ff 	mov.w	r2, #4294967295
 8004f34:	601a      	str	r2, [r3, #0]
					break;
 8004f36:	e03e      	b.n	8004fb6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f38:	4b30      	ldr	r3, [pc, #192]	; (8004ffc <xTaskIncrementTick+0x14c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d203      	bcs.n	8004f58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f50:	4a2d      	ldr	r2, [pc, #180]	; (8005008 <xTaskIncrementTick+0x158>)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f56:	e02e      	b.n	8004fb6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fe ff9b 	bl	8003e98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d004      	beq.n	8004f74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	3318      	adds	r3, #24
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fe ff92 	bl	8003e98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	2201      	movs	r2, #1
 8004f7a:	409a      	lsls	r2, r3
 8004f7c:	4b23      	ldr	r3, [pc, #140]	; (800500c <xTaskIncrementTick+0x15c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	4a22      	ldr	r2, [pc, #136]	; (800500c <xTaskIncrementTick+0x15c>)
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4a1f      	ldr	r2, [pc, #124]	; (8005010 <xTaskIncrementTick+0x160>)
 8004f94:	441a      	add	r2, r3
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4610      	mov	r0, r2
 8004f9e:	f7fe ff1e 	bl	8003dde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa6:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <xTaskIncrementTick+0x164>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d3b9      	bcc.n	8004f24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fb4:	e7b6      	b.n	8004f24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fb6:	4b17      	ldr	r3, [pc, #92]	; (8005014 <xTaskIncrementTick+0x164>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbc:	4914      	ldr	r1, [pc, #80]	; (8005010 <xTaskIncrementTick+0x160>)
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	440b      	add	r3, r1
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d901      	bls.n	8004fd2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004fd2:	4b11      	ldr	r3, [pc, #68]	; (8005018 <xTaskIncrementTick+0x168>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d007      	beq.n	8004fea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	e004      	b.n	8004fea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004fe0:	4b0e      	ldr	r3, [pc, #56]	; (800501c <xTaskIncrementTick+0x16c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	4a0d      	ldr	r2, [pc, #52]	; (800501c <xTaskIncrementTick+0x16c>)
 8004fe8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004fea:	697b      	ldr	r3, [r7, #20]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3718      	adds	r7, #24
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	200003a8 	.word	0x200003a8
 8004ff8:	20000384 	.word	0x20000384
 8004ffc:	20000338 	.word	0x20000338
 8005000:	2000033c 	.word	0x2000033c
 8005004:	20000398 	.word	0x20000398
 8005008:	200003a0 	.word	0x200003a0
 800500c:	20000388 	.word	0x20000388
 8005010:	20000284 	.word	0x20000284
 8005014:	20000280 	.word	0x20000280
 8005018:	20000394 	.word	0x20000394
 800501c:	20000390 	.word	0x20000390

08005020 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005026:	4b27      	ldr	r3, [pc, #156]	; (80050c4 <vTaskSwitchContext+0xa4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800502e:	4b26      	ldr	r3, [pc, #152]	; (80050c8 <vTaskSwitchContext+0xa8>)
 8005030:	2201      	movs	r2, #1
 8005032:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005034:	e03f      	b.n	80050b6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005036:	4b24      	ldr	r3, [pc, #144]	; (80050c8 <vTaskSwitchContext+0xa8>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800503c:	4b23      	ldr	r3, [pc, #140]	; (80050cc <vTaskSwitchContext+0xac>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	fab3 f383 	clz	r3, r3
 8005048:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800504a:	7afb      	ldrb	r3, [r7, #11]
 800504c:	f1c3 031f 	rsb	r3, r3, #31
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	491f      	ldr	r1, [pc, #124]	; (80050d0 <vTaskSwitchContext+0xb0>)
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10a      	bne.n	800507c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	607b      	str	r3, [r7, #4]
}
 8005078:	bf00      	nop
 800507a:	e7fe      	b.n	800507a <vTaskSwitchContext+0x5a>
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	4613      	mov	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4a12      	ldr	r2, [pc, #72]	; (80050d0 <vTaskSwitchContext+0xb0>)
 8005088:	4413      	add	r3, r2
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	3308      	adds	r3, #8
 800509e:	429a      	cmp	r2, r3
 80050a0:	d104      	bne.n	80050ac <vTaskSwitchContext+0x8c>
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	605a      	str	r2, [r3, #4]
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	4a08      	ldr	r2, [pc, #32]	; (80050d4 <vTaskSwitchContext+0xb4>)
 80050b4:	6013      	str	r3, [r2, #0]
}
 80050b6:	bf00      	nop
 80050b8:	371c      	adds	r7, #28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	200003a8 	.word	0x200003a8
 80050c8:	20000394 	.word	0x20000394
 80050cc:	20000388 	.word	0x20000388
 80050d0:	20000284 	.word	0x20000284
 80050d4:	20000280 	.word	0x20000280

080050d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10a      	bne.n	80050fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80050e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ec:	f383 8811 	msr	BASEPRI, r3
 80050f0:	f3bf 8f6f 	isb	sy
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	60fb      	str	r3, [r7, #12]
}
 80050fa:	bf00      	nop
 80050fc:	e7fe      	b.n	80050fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050fe:	4b07      	ldr	r3, [pc, #28]	; (800511c <vTaskPlaceOnEventList+0x44>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3318      	adds	r3, #24
 8005104:	4619      	mov	r1, r3
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fe fe8d 	bl	8003e26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800510c:	2101      	movs	r1, #1
 800510e:	6838      	ldr	r0, [r7, #0]
 8005110:	f000 fa66 	bl	80055e0 <prvAddCurrentTaskToDelayedList>
}
 8005114:	bf00      	nop
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	20000280 	.word	0x20000280

08005120 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10a      	bne.n	800514c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	60fb      	str	r3, [r7, #12]
}
 8005148:	bf00      	nop
 800514a:	e7fe      	b.n	800514a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	3318      	adds	r3, #24
 8005150:	4618      	mov	r0, r3
 8005152:	f7fe fea1 	bl	8003e98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005156:	4b1d      	ldr	r3, [pc, #116]	; (80051cc <xTaskRemoveFromEventList+0xac>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d11c      	bne.n	8005198 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	3304      	adds	r3, #4
 8005162:	4618      	mov	r0, r3
 8005164:	f7fe fe98 	bl	8003e98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	2201      	movs	r2, #1
 800516e:	409a      	lsls	r2, r3
 8005170:	4b17      	ldr	r3, [pc, #92]	; (80051d0 <xTaskRemoveFromEventList+0xb0>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4313      	orrs	r3, r2
 8005176:	4a16      	ldr	r2, [pc, #88]	; (80051d0 <xTaskRemoveFromEventList+0xb0>)
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517e:	4613      	mov	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4a13      	ldr	r2, [pc, #76]	; (80051d4 <xTaskRemoveFromEventList+0xb4>)
 8005188:	441a      	add	r2, r3
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	3304      	adds	r3, #4
 800518e:	4619      	mov	r1, r3
 8005190:	4610      	mov	r0, r2
 8005192:	f7fe fe24 	bl	8003dde <vListInsertEnd>
 8005196:	e005      	b.n	80051a4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	3318      	adds	r3, #24
 800519c:	4619      	mov	r1, r3
 800519e:	480e      	ldr	r0, [pc, #56]	; (80051d8 <xTaskRemoveFromEventList+0xb8>)
 80051a0:	f7fe fe1d 	bl	8003dde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a8:	4b0c      	ldr	r3, [pc, #48]	; (80051dc <xTaskRemoveFromEventList+0xbc>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d905      	bls.n	80051be <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80051b2:	2301      	movs	r3, #1
 80051b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80051b6:	4b0a      	ldr	r3, [pc, #40]	; (80051e0 <xTaskRemoveFromEventList+0xc0>)
 80051b8:	2201      	movs	r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	e001      	b.n	80051c2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80051c2:	697b      	ldr	r3, [r7, #20]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	200003a8 	.word	0x200003a8
 80051d0:	20000388 	.word	0x20000388
 80051d4:	20000284 	.word	0x20000284
 80051d8:	20000340 	.word	0x20000340
 80051dc:	20000280 	.word	0x20000280
 80051e0:	20000394 	.word	0x20000394

080051e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051ec:	4b06      	ldr	r3, [pc, #24]	; (8005208 <vTaskInternalSetTimeOutState+0x24>)
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051f4:	4b05      	ldr	r3, [pc, #20]	; (800520c <vTaskInternalSetTimeOutState+0x28>)
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	605a      	str	r2, [r3, #4]
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	20000398 	.word	0x20000398
 800520c:	20000384 	.word	0x20000384

08005210 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10a      	bne.n	8005236 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	613b      	str	r3, [r7, #16]
}
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10a      	bne.n	8005252 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	60fb      	str	r3, [r7, #12]
}
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005252:	f000 fb57 	bl	8005904 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005256:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <xTaskCheckForTimeOut+0xbc>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526e:	d102      	bne.n	8005276 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005270:	2300      	movs	r3, #0
 8005272:	61fb      	str	r3, [r7, #28]
 8005274:	e023      	b.n	80052be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	4b15      	ldr	r3, [pc, #84]	; (80052d0 <xTaskCheckForTimeOut+0xc0>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	429a      	cmp	r2, r3
 8005280:	d007      	beq.n	8005292 <xTaskCheckForTimeOut+0x82>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	429a      	cmp	r2, r3
 800528a:	d302      	bcc.n	8005292 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800528c:	2301      	movs	r3, #1
 800528e:	61fb      	str	r3, [r7, #28]
 8005290:	e015      	b.n	80052be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	429a      	cmp	r2, r3
 800529a:	d20b      	bcs.n	80052b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	1ad2      	subs	r2, r2, r3
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff ff9b 	bl	80051e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
 80052b2:	e004      	b.n	80052be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2200      	movs	r2, #0
 80052b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80052ba:	2301      	movs	r3, #1
 80052bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80052be:	f000 fb51 	bl	8005964 <vPortExitCritical>

	return xReturn;
 80052c2:	69fb      	ldr	r3, [r7, #28]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3720      	adds	r7, #32
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	20000384 	.word	0x20000384
 80052d0:	20000398 	.word	0x20000398

080052d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052d8:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <vTaskMissedYield+0x14>)
 80052da:	2201      	movs	r2, #1
 80052dc:	601a      	str	r2, [r3, #0]
}
 80052de:	bf00      	nop
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	20000394 	.word	0x20000394

080052ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052f4:	f000 f852 	bl	800539c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052f8:	4b06      	ldr	r3, [pc, #24]	; (8005314 <prvIdleTask+0x28>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d9f9      	bls.n	80052f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005300:	4b05      	ldr	r3, [pc, #20]	; (8005318 <prvIdleTask+0x2c>)
 8005302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005310:	e7f0      	b.n	80052f4 <prvIdleTask+0x8>
 8005312:	bf00      	nop
 8005314:	20000284 	.word	0x20000284
 8005318:	e000ed04 	.word	0xe000ed04

0800531c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005322:	2300      	movs	r3, #0
 8005324:	607b      	str	r3, [r7, #4]
 8005326:	e00c      	b.n	8005342 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	4613      	mov	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4a12      	ldr	r2, [pc, #72]	; (800537c <prvInitialiseTaskLists+0x60>)
 8005334:	4413      	add	r3, r2
 8005336:	4618      	mov	r0, r3
 8005338:	f7fe fd24 	bl	8003d84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3301      	adds	r3, #1
 8005340:	607b      	str	r3, [r7, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b06      	cmp	r3, #6
 8005346:	d9ef      	bls.n	8005328 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005348:	480d      	ldr	r0, [pc, #52]	; (8005380 <prvInitialiseTaskLists+0x64>)
 800534a:	f7fe fd1b 	bl	8003d84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800534e:	480d      	ldr	r0, [pc, #52]	; (8005384 <prvInitialiseTaskLists+0x68>)
 8005350:	f7fe fd18 	bl	8003d84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005354:	480c      	ldr	r0, [pc, #48]	; (8005388 <prvInitialiseTaskLists+0x6c>)
 8005356:	f7fe fd15 	bl	8003d84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800535a:	480c      	ldr	r0, [pc, #48]	; (800538c <prvInitialiseTaskLists+0x70>)
 800535c:	f7fe fd12 	bl	8003d84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005360:	480b      	ldr	r0, [pc, #44]	; (8005390 <prvInitialiseTaskLists+0x74>)
 8005362:	f7fe fd0f 	bl	8003d84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005366:	4b0b      	ldr	r3, [pc, #44]	; (8005394 <prvInitialiseTaskLists+0x78>)
 8005368:	4a05      	ldr	r2, [pc, #20]	; (8005380 <prvInitialiseTaskLists+0x64>)
 800536a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800536c:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <prvInitialiseTaskLists+0x7c>)
 800536e:	4a05      	ldr	r2, [pc, #20]	; (8005384 <prvInitialiseTaskLists+0x68>)
 8005370:	601a      	str	r2, [r3, #0]
}
 8005372:	bf00      	nop
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	20000284 	.word	0x20000284
 8005380:	20000310 	.word	0x20000310
 8005384:	20000324 	.word	0x20000324
 8005388:	20000340 	.word	0x20000340
 800538c:	20000354 	.word	0x20000354
 8005390:	2000036c 	.word	0x2000036c
 8005394:	20000338 	.word	0x20000338
 8005398:	2000033c 	.word	0x2000033c

0800539c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053a2:	e019      	b.n	80053d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80053a4:	f000 faae 	bl	8005904 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053a8:	4b10      	ldr	r3, [pc, #64]	; (80053ec <prvCheckTasksWaitingTermination+0x50>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3304      	adds	r3, #4
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fe fd6f 	bl	8003e98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80053ba:	4b0d      	ldr	r3, [pc, #52]	; (80053f0 <prvCheckTasksWaitingTermination+0x54>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3b01      	subs	r3, #1
 80053c0:	4a0b      	ldr	r2, [pc, #44]	; (80053f0 <prvCheckTasksWaitingTermination+0x54>)
 80053c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80053c4:	4b0b      	ldr	r3, [pc, #44]	; (80053f4 <prvCheckTasksWaitingTermination+0x58>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3b01      	subs	r3, #1
 80053ca:	4a0a      	ldr	r2, [pc, #40]	; (80053f4 <prvCheckTasksWaitingTermination+0x58>)
 80053cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80053ce:	f000 fac9 	bl	8005964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f810 	bl	80053f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053d8:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <prvCheckTasksWaitingTermination+0x58>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e1      	bne.n	80053a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053e0:	bf00      	nop
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20000354 	.word	0x20000354
 80053f0:	20000380 	.word	0x20000380
 80053f4:	20000368 	.word	0x20000368

080053f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005406:	2b00      	cmp	r3, #0
 8005408:	d108      	bne.n	800541c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fc66 	bl	8005ce0 <vPortFree>
				vPortFree( pxTCB );
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fc63 	bl	8005ce0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800541a:	e018      	b.n	800544e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005422:	2b01      	cmp	r3, #1
 8005424:	d103      	bne.n	800542e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fc5a 	bl	8005ce0 <vPortFree>
	}
 800542c:	e00f      	b.n	800544e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005434:	2b02      	cmp	r3, #2
 8005436:	d00a      	beq.n	800544e <prvDeleteTCB+0x56>
	__asm volatile
 8005438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	60fb      	str	r3, [r7, #12]
}
 800544a:	bf00      	nop
 800544c:	e7fe      	b.n	800544c <prvDeleteTCB+0x54>
	}
 800544e:	bf00      	nop
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800545e:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <prvResetNextTaskUnblockTime+0x38>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d104      	bne.n	8005472 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005468:	4b0a      	ldr	r3, [pc, #40]	; (8005494 <prvResetNextTaskUnblockTime+0x3c>)
 800546a:	f04f 32ff 	mov.w	r2, #4294967295
 800546e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005470:	e008      	b.n	8005484 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005472:	4b07      	ldr	r3, [pc, #28]	; (8005490 <prvResetNextTaskUnblockTime+0x38>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	4a04      	ldr	r2, [pc, #16]	; (8005494 <prvResetNextTaskUnblockTime+0x3c>)
 8005482:	6013      	str	r3, [r2, #0]
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	20000338 	.word	0x20000338
 8005494:	200003a0 	.word	0x200003a0

08005498 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800549e:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <xTaskGetSchedulerState+0x34>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d102      	bne.n	80054ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80054a6:	2301      	movs	r3, #1
 80054a8:	607b      	str	r3, [r7, #4]
 80054aa:	e008      	b.n	80054be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054ac:	4b08      	ldr	r3, [pc, #32]	; (80054d0 <xTaskGetSchedulerState+0x38>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d102      	bne.n	80054ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80054b4:	2302      	movs	r3, #2
 80054b6:	607b      	str	r3, [r7, #4]
 80054b8:	e001      	b.n	80054be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80054ba:	2300      	movs	r3, #0
 80054bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80054be:	687b      	ldr	r3, [r7, #4]
	}
 80054c0:	4618      	mov	r0, r3
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	2000038c 	.word	0x2000038c
 80054d0:	200003a8 	.word	0x200003a8

080054d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d06e      	beq.n	80055c8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80054ea:	4b3a      	ldr	r3, [pc, #232]	; (80055d4 <xTaskPriorityDisinherit+0x100>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d00a      	beq.n	800550a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	60fb      	str	r3, [r7, #12]
}
 8005506:	bf00      	nop
 8005508:	e7fe      	b.n	8005508 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10a      	bne.n	8005528 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	60bb      	str	r3, [r7, #8]
}
 8005524:	bf00      	nop
 8005526:	e7fe      	b.n	8005526 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800552c:	1e5a      	subs	r2, r3, #1
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553a:	429a      	cmp	r2, r3
 800553c:	d044      	beq.n	80055c8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005542:	2b00      	cmp	r3, #0
 8005544:	d140      	bne.n	80055c8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	3304      	adds	r3, #4
 800554a:	4618      	mov	r0, r3
 800554c:	f7fe fca4 	bl	8003e98 <uxListRemove>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d115      	bne.n	8005582 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555a:	491f      	ldr	r1, [pc, #124]	; (80055d8 <xTaskPriorityDisinherit+0x104>)
 800555c:	4613      	mov	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	440b      	add	r3, r1
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10a      	bne.n	8005582 <xTaskPriorityDisinherit+0xae>
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	2201      	movs	r2, #1
 8005572:	fa02 f303 	lsl.w	r3, r2, r3
 8005576:	43da      	mvns	r2, r3
 8005578:	4b18      	ldr	r3, [pc, #96]	; (80055dc <xTaskPriorityDisinherit+0x108>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4013      	ands	r3, r2
 800557e:	4a17      	ldr	r2, [pc, #92]	; (80055dc <xTaskPriorityDisinherit+0x108>)
 8005580:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	f1c3 0207 	rsb	r2, r3, #7
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	2201      	movs	r2, #1
 800559c:	409a      	lsls	r2, r3
 800559e:	4b0f      	ldr	r3, [pc, #60]	; (80055dc <xTaskPriorityDisinherit+0x108>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	4a0d      	ldr	r2, [pc, #52]	; (80055dc <xTaskPriorityDisinherit+0x108>)
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ac:	4613      	mov	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4a08      	ldr	r2, [pc, #32]	; (80055d8 <xTaskPriorityDisinherit+0x104>)
 80055b6:	441a      	add	r2, r3
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	3304      	adds	r3, #4
 80055bc:	4619      	mov	r1, r3
 80055be:	4610      	mov	r0, r2
 80055c0:	f7fe fc0d 	bl	8003dde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80055c4:	2301      	movs	r3, #1
 80055c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80055c8:	697b      	ldr	r3, [r7, #20]
	}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	20000280 	.word	0x20000280
 80055d8:	20000284 	.word	0x20000284
 80055dc:	20000388 	.word	0x20000388

080055e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055ea:	4b29      	ldr	r3, [pc, #164]	; (8005690 <prvAddCurrentTaskToDelayedList+0xb0>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055f0:	4b28      	ldr	r3, [pc, #160]	; (8005694 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3304      	adds	r3, #4
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fe fc4e 	bl	8003e98 <uxListRemove>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10b      	bne.n	800561a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005602:	4b24      	ldr	r3, [pc, #144]	; (8005694 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005608:	2201      	movs	r2, #1
 800560a:	fa02 f303 	lsl.w	r3, r2, r3
 800560e:	43da      	mvns	r2, r3
 8005610:	4b21      	ldr	r3, [pc, #132]	; (8005698 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4013      	ands	r3, r2
 8005616:	4a20      	ldr	r2, [pc, #128]	; (8005698 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005618:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005620:	d10a      	bne.n	8005638 <prvAddCurrentTaskToDelayedList+0x58>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d007      	beq.n	8005638 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005628:	4b1a      	ldr	r3, [pc, #104]	; (8005694 <prvAddCurrentTaskToDelayedList+0xb4>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3304      	adds	r3, #4
 800562e:	4619      	mov	r1, r3
 8005630:	481a      	ldr	r0, [pc, #104]	; (800569c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005632:	f7fe fbd4 	bl	8003dde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005636:	e026      	b.n	8005686 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4413      	add	r3, r2
 800563e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005640:	4b14      	ldr	r3, [pc, #80]	; (8005694 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	429a      	cmp	r2, r3
 800564e:	d209      	bcs.n	8005664 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005650:	4b13      	ldr	r3, [pc, #76]	; (80056a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	4b0f      	ldr	r3, [pc, #60]	; (8005694 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3304      	adds	r3, #4
 800565a:	4619      	mov	r1, r3
 800565c:	4610      	mov	r0, r2
 800565e:	f7fe fbe2 	bl	8003e26 <vListInsert>
}
 8005662:	e010      	b.n	8005686 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005664:	4b0f      	ldr	r3, [pc, #60]	; (80056a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	4b0a      	ldr	r3, [pc, #40]	; (8005694 <prvAddCurrentTaskToDelayedList+0xb4>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3304      	adds	r3, #4
 800566e:	4619      	mov	r1, r3
 8005670:	4610      	mov	r0, r2
 8005672:	f7fe fbd8 	bl	8003e26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005676:	4b0c      	ldr	r3, [pc, #48]	; (80056a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	429a      	cmp	r2, r3
 800567e:	d202      	bcs.n	8005686 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005680:	4a09      	ldr	r2, [pc, #36]	; (80056a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	6013      	str	r3, [r2, #0]
}
 8005686:	bf00      	nop
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	20000384 	.word	0x20000384
 8005694:	20000280 	.word	0x20000280
 8005698:	20000388 	.word	0x20000388
 800569c:	2000036c 	.word	0x2000036c
 80056a0:	2000033c 	.word	0x2000033c
 80056a4:	20000338 	.word	0x20000338
 80056a8:	200003a0 	.word	0x200003a0

080056ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3b04      	subs	r3, #4
 80056bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	3b04      	subs	r3, #4
 80056ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f023 0201 	bic.w	r2, r3, #1
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	3b04      	subs	r3, #4
 80056da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056dc:	4a0c      	ldr	r2, [pc, #48]	; (8005710 <pxPortInitialiseStack+0x64>)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3b14      	subs	r3, #20
 80056e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3b04      	subs	r3, #4
 80056f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f06f 0202 	mvn.w	r2, #2
 80056fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3b20      	subs	r3, #32
 8005700:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005702:	68fb      	ldr	r3, [r7, #12]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	08005715 	.word	0x08005715

08005714 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800571a:	2300      	movs	r3, #0
 800571c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800571e:	4b12      	ldr	r3, [pc, #72]	; (8005768 <prvTaskExitError+0x54>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005726:	d00a      	beq.n	800573e <prvTaskExitError+0x2a>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	60fb      	str	r3, [r7, #12]
}
 800573a:	bf00      	nop
 800573c:	e7fe      	b.n	800573c <prvTaskExitError+0x28>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	60bb      	str	r3, [r7, #8]
}
 8005750:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005752:	bf00      	nop
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0fc      	beq.n	8005754 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800575a:	bf00      	nop
 800575c:	bf00      	nop
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	2000000c 	.word	0x2000000c
 800576c:	00000000 	.word	0x00000000

08005770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005770:	4b07      	ldr	r3, [pc, #28]	; (8005790 <pxCurrentTCBConst2>)
 8005772:	6819      	ldr	r1, [r3, #0]
 8005774:	6808      	ldr	r0, [r1, #0]
 8005776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800577a:	f380 8809 	msr	PSP, r0
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f04f 0000 	mov.w	r0, #0
 8005786:	f380 8811 	msr	BASEPRI, r0
 800578a:	4770      	bx	lr
 800578c:	f3af 8000 	nop.w

08005790 <pxCurrentTCBConst2>:
 8005790:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005794:	bf00      	nop
 8005796:	bf00      	nop

08005798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005798:	4808      	ldr	r0, [pc, #32]	; (80057bc <prvPortStartFirstTask+0x24>)
 800579a:	6800      	ldr	r0, [r0, #0]
 800579c:	6800      	ldr	r0, [r0, #0]
 800579e:	f380 8808 	msr	MSP, r0
 80057a2:	f04f 0000 	mov.w	r0, #0
 80057a6:	f380 8814 	msr	CONTROL, r0
 80057aa:	b662      	cpsie	i
 80057ac:	b661      	cpsie	f
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	df00      	svc	0
 80057b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057ba:	bf00      	nop
 80057bc:	e000ed08 	.word	0xe000ed08

080057c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057c6:	4b46      	ldr	r3, [pc, #280]	; (80058e0 <xPortStartScheduler+0x120>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a46      	ldr	r2, [pc, #280]	; (80058e4 <xPortStartScheduler+0x124>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d10a      	bne.n	80057e6 <xPortStartScheduler+0x26>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	613b      	str	r3, [r7, #16]
}
 80057e2:	bf00      	nop
 80057e4:	e7fe      	b.n	80057e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80057e6:	4b3e      	ldr	r3, [pc, #248]	; (80058e0 <xPortStartScheduler+0x120>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a3f      	ldr	r2, [pc, #252]	; (80058e8 <xPortStartScheduler+0x128>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d10a      	bne.n	8005806 <xPortStartScheduler+0x46>
	__asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	60fb      	str	r3, [r7, #12]
}
 8005802:	bf00      	nop
 8005804:	e7fe      	b.n	8005804 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005806:	4b39      	ldr	r3, [pc, #228]	; (80058ec <xPortStartScheduler+0x12c>)
 8005808:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	b2db      	uxtb	r3, r3
 8005810:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	22ff      	movs	r2, #255	; 0xff
 8005816:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	b2db      	uxtb	r3, r3
 800581e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	b2db      	uxtb	r3, r3
 8005824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005828:	b2da      	uxtb	r2, r3
 800582a:	4b31      	ldr	r3, [pc, #196]	; (80058f0 <xPortStartScheduler+0x130>)
 800582c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800582e:	4b31      	ldr	r3, [pc, #196]	; (80058f4 <xPortStartScheduler+0x134>)
 8005830:	2207      	movs	r2, #7
 8005832:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005834:	e009      	b.n	800584a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005836:	4b2f      	ldr	r3, [pc, #188]	; (80058f4 <xPortStartScheduler+0x134>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3b01      	subs	r3, #1
 800583c:	4a2d      	ldr	r2, [pc, #180]	; (80058f4 <xPortStartScheduler+0x134>)
 800583e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	b2db      	uxtb	r3, r3
 8005848:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800584a:	78fb      	ldrb	r3, [r7, #3]
 800584c:	b2db      	uxtb	r3, r3
 800584e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005852:	2b80      	cmp	r3, #128	; 0x80
 8005854:	d0ef      	beq.n	8005836 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005856:	4b27      	ldr	r3, [pc, #156]	; (80058f4 <xPortStartScheduler+0x134>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f1c3 0307 	rsb	r3, r3, #7
 800585e:	2b04      	cmp	r3, #4
 8005860:	d00a      	beq.n	8005878 <xPortStartScheduler+0xb8>
	__asm volatile
 8005862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	60bb      	str	r3, [r7, #8]
}
 8005874:	bf00      	nop
 8005876:	e7fe      	b.n	8005876 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005878:	4b1e      	ldr	r3, [pc, #120]	; (80058f4 <xPortStartScheduler+0x134>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	021b      	lsls	r3, r3, #8
 800587e:	4a1d      	ldr	r2, [pc, #116]	; (80058f4 <xPortStartScheduler+0x134>)
 8005880:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005882:	4b1c      	ldr	r3, [pc, #112]	; (80058f4 <xPortStartScheduler+0x134>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800588a:	4a1a      	ldr	r2, [pc, #104]	; (80058f4 <xPortStartScheduler+0x134>)
 800588c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	b2da      	uxtb	r2, r3
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005896:	4b18      	ldr	r3, [pc, #96]	; (80058f8 <xPortStartScheduler+0x138>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a17      	ldr	r2, [pc, #92]	; (80058f8 <xPortStartScheduler+0x138>)
 800589c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058a2:	4b15      	ldr	r3, [pc, #84]	; (80058f8 <xPortStartScheduler+0x138>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a14      	ldr	r2, [pc, #80]	; (80058f8 <xPortStartScheduler+0x138>)
 80058a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80058ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058ae:	f000 f8dd 	bl	8005a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058b2:	4b12      	ldr	r3, [pc, #72]	; (80058fc <xPortStartScheduler+0x13c>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80058b8:	f000 f8fc 	bl	8005ab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058bc:	4b10      	ldr	r3, [pc, #64]	; (8005900 <xPortStartScheduler+0x140>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a0f      	ldr	r2, [pc, #60]	; (8005900 <xPortStartScheduler+0x140>)
 80058c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80058c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058c8:	f7ff ff66 	bl	8005798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058cc:	f7ff fba8 	bl	8005020 <vTaskSwitchContext>
	prvTaskExitError();
 80058d0:	f7ff ff20 	bl	8005714 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	e000ed00 	.word	0xe000ed00
 80058e4:	410fc271 	.word	0x410fc271
 80058e8:	410fc270 	.word	0x410fc270
 80058ec:	e000e400 	.word	0xe000e400
 80058f0:	200003ac 	.word	0x200003ac
 80058f4:	200003b0 	.word	0x200003b0
 80058f8:	e000ed20 	.word	0xe000ed20
 80058fc:	2000000c 	.word	0x2000000c
 8005900:	e000ef34 	.word	0xe000ef34

08005904 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	607b      	str	r3, [r7, #4]
}
 800591c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800591e:	4b0f      	ldr	r3, [pc, #60]	; (800595c <vPortEnterCritical+0x58>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3301      	adds	r3, #1
 8005924:	4a0d      	ldr	r2, [pc, #52]	; (800595c <vPortEnterCritical+0x58>)
 8005926:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005928:	4b0c      	ldr	r3, [pc, #48]	; (800595c <vPortEnterCritical+0x58>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d10f      	bne.n	8005950 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005930:	4b0b      	ldr	r3, [pc, #44]	; (8005960 <vPortEnterCritical+0x5c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <vPortEnterCritical+0x4c>
	__asm volatile
 800593a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	603b      	str	r3, [r7, #0]
}
 800594c:	bf00      	nop
 800594e:	e7fe      	b.n	800594e <vPortEnterCritical+0x4a>
	}
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	2000000c 	.word	0x2000000c
 8005960:	e000ed04 	.word	0xe000ed04

08005964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800596a:	4b12      	ldr	r3, [pc, #72]	; (80059b4 <vPortExitCritical+0x50>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10a      	bne.n	8005988 <vPortExitCritical+0x24>
	__asm volatile
 8005972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	607b      	str	r3, [r7, #4]
}
 8005984:	bf00      	nop
 8005986:	e7fe      	b.n	8005986 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005988:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <vPortExitCritical+0x50>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3b01      	subs	r3, #1
 800598e:	4a09      	ldr	r2, [pc, #36]	; (80059b4 <vPortExitCritical+0x50>)
 8005990:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005992:	4b08      	ldr	r3, [pc, #32]	; (80059b4 <vPortExitCritical+0x50>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d105      	bne.n	80059a6 <vPortExitCritical+0x42>
 800599a:	2300      	movs	r3, #0
 800599c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	f383 8811 	msr	BASEPRI, r3
}
 80059a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	2000000c 	.word	0x2000000c
	...

080059c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059c0:	f3ef 8009 	mrs	r0, PSP
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	4b15      	ldr	r3, [pc, #84]	; (8005a20 <pxCurrentTCBConst>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	f01e 0f10 	tst.w	lr, #16
 80059d0:	bf08      	it	eq
 80059d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059da:	6010      	str	r0, [r2, #0]
 80059dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059e4:	f380 8811 	msr	BASEPRI, r0
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f7ff fb16 	bl	8005020 <vTaskSwitchContext>
 80059f4:	f04f 0000 	mov.w	r0, #0
 80059f8:	f380 8811 	msr	BASEPRI, r0
 80059fc:	bc09      	pop	{r0, r3}
 80059fe:	6819      	ldr	r1, [r3, #0]
 8005a00:	6808      	ldr	r0, [r1, #0]
 8005a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a06:	f01e 0f10 	tst.w	lr, #16
 8005a0a:	bf08      	it	eq
 8005a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a10:	f380 8809 	msr	PSP, r0
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	f3af 8000 	nop.w

08005a20 <pxCurrentTCBConst>:
 8005a20:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a24:	bf00      	nop
 8005a26:	bf00      	nop

08005a28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	607b      	str	r3, [r7, #4]
}
 8005a40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a42:	f7ff fa35 	bl	8004eb0 <xTaskIncrementTick>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a4c:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <SysTick_Handler+0x40>)
 8005a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	2300      	movs	r3, #0
 8005a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	f383 8811 	msr	BASEPRI, r3
}
 8005a5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a60:	bf00      	nop
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	e000ed04 	.word	0xe000ed04

08005a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a70:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <vPortSetupTimerInterrupt+0x34>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a76:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <vPortSetupTimerInterrupt+0x38>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a7c:	4b0a      	ldr	r3, [pc, #40]	; (8005aa8 <vPortSetupTimerInterrupt+0x3c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a0a      	ldr	r2, [pc, #40]	; (8005aac <vPortSetupTimerInterrupt+0x40>)
 8005a82:	fba2 2303 	umull	r2, r3, r2, r3
 8005a86:	099b      	lsrs	r3, r3, #6
 8005a88:	4a09      	ldr	r2, [pc, #36]	; (8005ab0 <vPortSetupTimerInterrupt+0x44>)
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a8e:	4b04      	ldr	r3, [pc, #16]	; (8005aa0 <vPortSetupTimerInterrupt+0x34>)
 8005a90:	2207      	movs	r2, #7
 8005a92:	601a      	str	r2, [r3, #0]
}
 8005a94:	bf00      	nop
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	e000e010 	.word	0xe000e010
 8005aa4:	e000e018 	.word	0xe000e018
 8005aa8:	20000000 	.word	0x20000000
 8005aac:	10624dd3 	.word	0x10624dd3
 8005ab0:	e000e014 	.word	0xe000e014

08005ab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ac4 <vPortEnableVFP+0x10>
 8005ab8:	6801      	ldr	r1, [r0, #0]
 8005aba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005abe:	6001      	str	r1, [r0, #0]
 8005ac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ac2:	bf00      	nop
 8005ac4:	e000ed88 	.word	0xe000ed88

08005ac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ace:	f3ef 8305 	mrs	r3, IPSR
 8005ad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b0f      	cmp	r3, #15
 8005ad8:	d914      	bls.n	8005b04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005ada:	4a17      	ldr	r2, [pc, #92]	; (8005b38 <vPortValidateInterruptPriority+0x70>)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ae4:	4b15      	ldr	r3, [pc, #84]	; (8005b3c <vPortValidateInterruptPriority+0x74>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	7afa      	ldrb	r2, [r7, #11]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d20a      	bcs.n	8005b04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	607b      	str	r3, [r7, #4]
}
 8005b00:	bf00      	nop
 8005b02:	e7fe      	b.n	8005b02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b04:	4b0e      	ldr	r3, [pc, #56]	; (8005b40 <vPortValidateInterruptPriority+0x78>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b0c:	4b0d      	ldr	r3, [pc, #52]	; (8005b44 <vPortValidateInterruptPriority+0x7c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d90a      	bls.n	8005b2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	603b      	str	r3, [r7, #0]
}
 8005b26:	bf00      	nop
 8005b28:	e7fe      	b.n	8005b28 <vPortValidateInterruptPriority+0x60>
	}
 8005b2a:	bf00      	nop
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	e000e3f0 	.word	0xe000e3f0
 8005b3c:	200003ac 	.word	0x200003ac
 8005b40:	e000ed0c 	.word	0xe000ed0c
 8005b44:	200003b0 	.word	0x200003b0

08005b48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08a      	sub	sp, #40	; 0x28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b50:	2300      	movs	r3, #0
 8005b52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b54:	f7ff f902 	bl	8004d5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b58:	4b5b      	ldr	r3, [pc, #364]	; (8005cc8 <pvPortMalloc+0x180>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b60:	f000 f920 	bl	8005da4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b64:	4b59      	ldr	r3, [pc, #356]	; (8005ccc <pvPortMalloc+0x184>)
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f040 8093 	bne.w	8005c98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d01d      	beq.n	8005bb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005b78:	2208      	movs	r2, #8
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d014      	beq.n	8005bb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f023 0307 	bic.w	r3, r3, #7
 8005b90:	3308      	adds	r3, #8
 8005b92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <pvPortMalloc+0x6c>
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	617b      	str	r3, [r7, #20]
}
 8005bb0:	bf00      	nop
 8005bb2:	e7fe      	b.n	8005bb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d06e      	beq.n	8005c98 <pvPortMalloc+0x150>
 8005bba:	4b45      	ldr	r3, [pc, #276]	; (8005cd0 <pvPortMalloc+0x188>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d869      	bhi.n	8005c98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bc4:	4b43      	ldr	r3, [pc, #268]	; (8005cd4 <pvPortMalloc+0x18c>)
 8005bc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bc8:	4b42      	ldr	r3, [pc, #264]	; (8005cd4 <pvPortMalloc+0x18c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bce:	e004      	b.n	8005bda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d903      	bls.n	8005bec <pvPortMalloc+0xa4>
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1f1      	bne.n	8005bd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bec:	4b36      	ldr	r3, [pc, #216]	; (8005cc8 <pvPortMalloc+0x180>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d050      	beq.n	8005c98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2208      	movs	r2, #8
 8005bfc:	4413      	add	r3, r2
 8005bfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	1ad2      	subs	r2, r2, r3
 8005c10:	2308      	movs	r3, #8
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d91f      	bls.n	8005c58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	f003 0307 	and.w	r3, r3, #7
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <pvPortMalloc+0xf8>
	__asm volatile
 8005c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	613b      	str	r3, [r7, #16]
}
 8005c3c:	bf00      	nop
 8005c3e:	e7fe      	b.n	8005c3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	1ad2      	subs	r2, r2, r3
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c52:	69b8      	ldr	r0, [r7, #24]
 8005c54:	f000 f908 	bl	8005e68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c58:	4b1d      	ldr	r3, [pc, #116]	; (8005cd0 <pvPortMalloc+0x188>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	4a1b      	ldr	r2, [pc, #108]	; (8005cd0 <pvPortMalloc+0x188>)
 8005c64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c66:	4b1a      	ldr	r3, [pc, #104]	; (8005cd0 <pvPortMalloc+0x188>)
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	4b1b      	ldr	r3, [pc, #108]	; (8005cd8 <pvPortMalloc+0x190>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d203      	bcs.n	8005c7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c72:	4b17      	ldr	r3, [pc, #92]	; (8005cd0 <pvPortMalloc+0x188>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a18      	ldr	r2, [pc, #96]	; (8005cd8 <pvPortMalloc+0x190>)
 8005c78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	4b13      	ldr	r3, [pc, #76]	; (8005ccc <pvPortMalloc+0x184>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005c8e:	4b13      	ldr	r3, [pc, #76]	; (8005cdc <pvPortMalloc+0x194>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3301      	adds	r3, #1
 8005c94:	4a11      	ldr	r2, [pc, #68]	; (8005cdc <pvPortMalloc+0x194>)
 8005c96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c98:	f7ff f86e 	bl	8004d78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00a      	beq.n	8005cbc <pvPortMalloc+0x174>
	__asm volatile
 8005ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	60fb      	str	r3, [r7, #12]
}
 8005cb8:	bf00      	nop
 8005cba:	e7fe      	b.n	8005cba <pvPortMalloc+0x172>
	return pvReturn;
 8005cbc:	69fb      	ldr	r3, [r7, #28]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3728      	adds	r7, #40	; 0x28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	20003fbc 	.word	0x20003fbc
 8005ccc:	20003fd0 	.word	0x20003fd0
 8005cd0:	20003fc0 	.word	0x20003fc0
 8005cd4:	20003fb4 	.word	0x20003fb4
 8005cd8:	20003fc4 	.word	0x20003fc4
 8005cdc:	20003fc8 	.word	0x20003fc8

08005ce0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d04d      	beq.n	8005d8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005cf2:	2308      	movs	r3, #8
 8005cf4:	425b      	negs	r3, r3
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	4b24      	ldr	r3, [pc, #144]	; (8005d98 <vPortFree+0xb8>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10a      	bne.n	8005d24 <vPortFree+0x44>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	60fb      	str	r3, [r7, #12]
}
 8005d20:	bf00      	nop
 8005d22:	e7fe      	b.n	8005d22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00a      	beq.n	8005d42 <vPortFree+0x62>
	__asm volatile
 8005d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	60bb      	str	r3, [r7, #8]
}
 8005d3e:	bf00      	nop
 8005d40:	e7fe      	b.n	8005d40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	4b14      	ldr	r3, [pc, #80]	; (8005d98 <vPortFree+0xb8>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d01e      	beq.n	8005d8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d11a      	bne.n	8005d8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	4b0e      	ldr	r3, [pc, #56]	; (8005d98 <vPortFree+0xb8>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	43db      	mvns	r3, r3
 8005d62:	401a      	ands	r2, r3
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d68:	f7fe fff8 	bl	8004d5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	4b0a      	ldr	r3, [pc, #40]	; (8005d9c <vPortFree+0xbc>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4413      	add	r3, r2
 8005d76:	4a09      	ldr	r2, [pc, #36]	; (8005d9c <vPortFree+0xbc>)
 8005d78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d7a:	6938      	ldr	r0, [r7, #16]
 8005d7c:	f000 f874 	bl	8005e68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d80:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <vPortFree+0xc0>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3301      	adds	r3, #1
 8005d86:	4a06      	ldr	r2, [pc, #24]	; (8005da0 <vPortFree+0xc0>)
 8005d88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005d8a:	f7fe fff5 	bl	8004d78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d8e:	bf00      	nop
 8005d90:	3718      	adds	r7, #24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	20003fd0 	.word	0x20003fd0
 8005d9c:	20003fc0 	.word	0x20003fc0
 8005da0:	20003fcc 	.word	0x20003fcc

08005da4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005daa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005dae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005db0:	4b27      	ldr	r3, [pc, #156]	; (8005e50 <prvHeapInit+0xac>)
 8005db2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00c      	beq.n	8005dd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3307      	adds	r3, #7
 8005dc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0307 	bic.w	r3, r3, #7
 8005dca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	4a1f      	ldr	r2, [pc, #124]	; (8005e50 <prvHeapInit+0xac>)
 8005dd4:	4413      	add	r3, r2
 8005dd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ddc:	4a1d      	ldr	r2, [pc, #116]	; (8005e54 <prvHeapInit+0xb0>)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005de2:	4b1c      	ldr	r3, [pc, #112]	; (8005e54 <prvHeapInit+0xb0>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	4413      	add	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005df0:	2208      	movs	r2, #8
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	1a9b      	subs	r3, r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 0307 	bic.w	r3, r3, #7
 8005dfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4a15      	ldr	r2, [pc, #84]	; (8005e58 <prvHeapInit+0xb4>)
 8005e04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e06:	4b14      	ldr	r3, [pc, #80]	; (8005e58 <prvHeapInit+0xb4>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e0e:	4b12      	ldr	r3, [pc, #72]	; (8005e58 <prvHeapInit+0xb4>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2200      	movs	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	1ad2      	subs	r2, r2, r3
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e24:	4b0c      	ldr	r3, [pc, #48]	; (8005e58 <prvHeapInit+0xb4>)
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	4a0a      	ldr	r2, [pc, #40]	; (8005e5c <prvHeapInit+0xb8>)
 8005e32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	4a09      	ldr	r2, [pc, #36]	; (8005e60 <prvHeapInit+0xbc>)
 8005e3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e3c:	4b09      	ldr	r3, [pc, #36]	; (8005e64 <prvHeapInit+0xc0>)
 8005e3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e42:	601a      	str	r2, [r3, #0]
}
 8005e44:	bf00      	nop
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	200003b4 	.word	0x200003b4
 8005e54:	20003fb4 	.word	0x20003fb4
 8005e58:	20003fbc 	.word	0x20003fbc
 8005e5c:	20003fc4 	.word	0x20003fc4
 8005e60:	20003fc0 	.word	0x20003fc0
 8005e64:	20003fd0 	.word	0x20003fd0

08005e68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e70:	4b28      	ldr	r3, [pc, #160]	; (8005f14 <prvInsertBlockIntoFreeList+0xac>)
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	e002      	b.n	8005e7c <prvInsertBlockIntoFreeList+0x14>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60fb      	str	r3, [r7, #12]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d8f7      	bhi.n	8005e76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	4413      	add	r3, r2
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d108      	bne.n	8005eaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	441a      	add	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	441a      	add	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d118      	bne.n	8005ef0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	4b15      	ldr	r3, [pc, #84]	; (8005f18 <prvInsertBlockIntoFreeList+0xb0>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d00d      	beq.n	8005ee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	441a      	add	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	e008      	b.n	8005ef8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ee6:	4b0c      	ldr	r3, [pc, #48]	; (8005f18 <prvInsertBlockIntoFreeList+0xb0>)
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	e003      	b.n	8005ef8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d002      	beq.n	8005f06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f06:	bf00      	nop
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	20003fb4 	.word	0x20003fb4
 8005f18:	20003fbc 	.word	0x20003fbc

08005f1c <__libc_init_array>:
 8005f1c:	b570      	push	{r4, r5, r6, lr}
 8005f1e:	4d0d      	ldr	r5, [pc, #52]	; (8005f54 <__libc_init_array+0x38>)
 8005f20:	4c0d      	ldr	r4, [pc, #52]	; (8005f58 <__libc_init_array+0x3c>)
 8005f22:	1b64      	subs	r4, r4, r5
 8005f24:	10a4      	asrs	r4, r4, #2
 8005f26:	2600      	movs	r6, #0
 8005f28:	42a6      	cmp	r6, r4
 8005f2a:	d109      	bne.n	8005f40 <__libc_init_array+0x24>
 8005f2c:	4d0b      	ldr	r5, [pc, #44]	; (8005f5c <__libc_init_array+0x40>)
 8005f2e:	4c0c      	ldr	r4, [pc, #48]	; (8005f60 <__libc_init_array+0x44>)
 8005f30:	f000 f82e 	bl	8005f90 <_init>
 8005f34:	1b64      	subs	r4, r4, r5
 8005f36:	10a4      	asrs	r4, r4, #2
 8005f38:	2600      	movs	r6, #0
 8005f3a:	42a6      	cmp	r6, r4
 8005f3c:	d105      	bne.n	8005f4a <__libc_init_array+0x2e>
 8005f3e:	bd70      	pop	{r4, r5, r6, pc}
 8005f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f44:	4798      	blx	r3
 8005f46:	3601      	adds	r6, #1
 8005f48:	e7ee      	b.n	8005f28 <__libc_init_array+0xc>
 8005f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f4e:	4798      	blx	r3
 8005f50:	3601      	adds	r6, #1
 8005f52:	e7f2      	b.n	8005f3a <__libc_init_array+0x1e>
 8005f54:	08006058 	.word	0x08006058
 8005f58:	08006058 	.word	0x08006058
 8005f5c:	08006058 	.word	0x08006058
 8005f60:	0800605c 	.word	0x0800605c

08005f64 <memcpy>:
 8005f64:	440a      	add	r2, r1
 8005f66:	4291      	cmp	r1, r2
 8005f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f6c:	d100      	bne.n	8005f70 <memcpy+0xc>
 8005f6e:	4770      	bx	lr
 8005f70:	b510      	push	{r4, lr}
 8005f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f7a:	4291      	cmp	r1, r2
 8005f7c:	d1f9      	bne.n	8005f72 <memcpy+0xe>
 8005f7e:	bd10      	pop	{r4, pc}

08005f80 <memset>:
 8005f80:	4402      	add	r2, r0
 8005f82:	4603      	mov	r3, r0
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d100      	bne.n	8005f8a <memset+0xa>
 8005f88:	4770      	bx	lr
 8005f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f8e:	e7f9      	b.n	8005f84 <memset+0x4>

08005f90 <_init>:
 8005f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f92:	bf00      	nop
 8005f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f96:	bc08      	pop	{r3}
 8005f98:	469e      	mov	lr, r3
 8005f9a:	4770      	bx	lr

08005f9c <_fini>:
 8005f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9e:	bf00      	nop
 8005fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fa2:	bc08      	pop	{r3}
 8005fa4:	469e      	mov	lr, r3
 8005fa6:	4770      	bx	lr
